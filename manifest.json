{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.3", "generated_at": "2025-04-27T14:27:43.559774Z", "invocation_id": "0e159122-57e1-481b-828d-1f89cc095cdc", "env": {}, "project_name": "weather_dbt", "project_id": "4ecc04079284b58735b154c50d0d1088", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "fabric"}, "nodes": {"model.weather_dbt.b_astro": {"database": "wh_weather", "schema": "dbt_bronze", "name": "b_astro", "resource_type": "model", "package_name": "weather_dbt", "path": "010_bronze\\b_astro.sql", "original_file_path": "models\\010_bronze\\b_astro.sql", "unique_id": "model.weather_dbt.b_astro", "fqn": ["weather_dbt", "010_bronze", "b_astro"], "alias": "b_astro", "checksum": {"name": "sha256", "checksum": "4c5a30acdeedc24a65666d2fcb00b5dc6b107bfbf7835b111f7b9ff7452ecced"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "bronze", "materialized": "table"}, "created_at": 1745762657.3838372, "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_astro\"", "raw_code": "WITH ld_astro AS (\r\n    SELECT \r\n        *\r\n    FROM {{ source('landing_delta', 'ld_weather_astro') }}\r\n),\r\n\r\nb_astro AS (\r\n    SELECT\r\n        CONVERT(DATE, m_valid_dt) AS m_valid_dt\r\n        ,CONVERT(INT, moon_illumination) AS moon_illumination_pct\r\n        ,CONVERT(VARCHAR(20), moon_phase) AS moon_phase_cd\r\n        ,CONVERT(VARCHAR(11), moonrise) AS moonrise_t\r\n        ,CONVERT(VARCHAR(10), moonset) AS moonset_t\r\n        ,CONVERT(VARCHAR(10), sunrise) AS sunrise_t\r\n        ,CONVERT(VARCHAR(10), sunset) AS sunset_t\r\n        ,CONVERT(VARCHAR(50), city) AS city_nm\r\n        ,CONVERT(VARCHAR(50), country_EN) AS country_nm\r\n        ,CONVERT(DATE, forecast_date) AS forecast_dt\r\n        ,CONVERT(DATETIME2(6), m_extracted_at_dttm) AS m_extracted_at_dttm\r\n        ,CONVERT(DATETIME2(6), m_updated_at_dttm) AS m_updated_at_dttm\r\n    FROM ld_astro\r\n)\r\n\r\nSELECT * FROM b_astro", "language": "sql", "refs": [], "sources": [["landing_delta", "ld_weather_astro"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.landing_delta.ld_weather_astro"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.b_astro_forecast": {"database": "wh_weather", "schema": "dbt_bronze", "name": "b_astro_forecast", "resource_type": "model", "package_name": "weather_dbt", "path": "010_bronze\\b_astro_forecast.sql", "original_file_path": "models\\010_bronze\\b_astro_forecast.sql", "unique_id": "model.weather_dbt.b_astro_forecast", "fqn": ["weather_dbt", "010_bronze", "b_astro_forecast"], "alias": "b_astro_forecast", "checksum": {"name": "sha256", "checksum": "b8d8b6b9ab8109d47dae5b95c0d90f4188eee5ddb64f7b53bca9f84cf1bf518c"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "bronze", "materialized": "table"}, "created_at": 1745762657.3858328, "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_astro_forecast\"", "raw_code": "WITH ld_astro_forecast AS (\r\n    SELECT \r\n        *\r\n    FROM {{ source('landing_delta', 'ld_weather_astro_forecast') }}\r\n),\r\n\r\nb_astro_forecast AS (\r\n    SELECT\r\n        CONVERT(DATE, m_valid_dt) AS m_valid_dt\r\n        ,CONVERT(BIT, is_moon_up) AS moon_up_flg\r\n        ,CONVERT(BIT, is_sun_up) AS sun_up_flg\r\n        ,CONVERT(INT, moon_illumination) AS moon_illumination_pct\r\n        ,CONVERT(VARCHAR(20), moon_phase) AS moon_phase_cd\r\n        ,CONVERT(VARCHAR(11), moonrise) AS moonrise_t\r\n        ,CONVERT(VARCHAR(10), moonset) AS moonset_t\r\n        ,CONVERT(VARCHAR(10), sunrise) AS sunrise_t\r\n        ,CONVERT(VARCHAR(10), sunset) AS sunset_t\r\n        ,CONVERT(VARCHAR(50), city) AS city_nm\r\n        ,CONVERT(VARCHAR(50), country_EN) AS country_nm\r\n        ,CONVERT(DATE, forecast_date) AS forecast_dt\r\n        ,CONVERT(DATETIME2(6), m_extracted_at_dttm) AS m_extracted_at_dttm\r\n        ,CONVERT(DATETIME2(6), m_updated_at_dttm) AS m_updated_at_dttm\r\n    FROM ld_astro_forecast\r\n)\r\n\r\nSELECT * FROM b_astro_forecast", "language": "sql", "refs": [], "sources": [["landing_delta", "ld_weather_astro_forecast"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.landing_delta.ld_weather_astro_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.b_city": {"database": "wh_weather", "schema": "dbt_bronze", "name": "b_city", "resource_type": "model", "package_name": "weather_dbt", "path": "010_bronze\\b_city.sql", "original_file_path": "models\\010_bronze\\b_city.sql", "unique_id": "model.weather_dbt.b_city", "fqn": ["weather_dbt", "010_bronze", "b_city"], "alias": "b_city", "checksum": {"name": "sha256", "checksum": "f93c4e83338e521dca4866f37db2a9ea5bd611cc88d4eee824343431e6ce9c40"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "bronze", "materialized": "table"}, "created_at": 1745762657.3868327, "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_city\"", "raw_code": "WITH ld_city AS (\r\n    SELECT \r\n        *\r\n    FROM {{ source('landing_delta', 'city') }}\r\n),\r\n\r\nb_city AS (\r\n    SELECT\r\n        CONVERT(VARCHAR(50), Country) AS country_cd\r\n        ,CONVERT(VARCHAR(50), County) AS county_nm\r\n        ,CONVERT(VARCHAR(50), City) AS city_nm\r\n    FROM ld_city\r\n)\r\n\r\nSELECT * FROM b_city", "language": "sql", "refs": [], "sources": [["landing_delta", "city"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.landing_delta.city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.b_country": {"database": "wh_weather", "schema": "dbt_bronze", "name": "b_country", "resource_type": "model", "package_name": "weather_dbt", "path": "010_bronze\\b_country.sql", "original_file_path": "models\\010_bronze\\b_country.sql", "unique_id": "model.weather_dbt.b_country", "fqn": ["weather_dbt", "010_bronze", "b_country"], "alias": "b_country", "checksum": {"name": "sha256", "checksum": "c07f0b94fc11ca6d40a398aa57b157a098893df3cde25f5dd1325b4d705c4902"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "bronze", "materialized": "table"}, "created_at": 1745762657.3888326, "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_country\"", "raw_code": "WITH country_raw AS (\r\n    SELECT \r\n        *\r\n    FROM {{ source('seed', 'country') }}\r\n),\r\n\r\nb_country AS (\r\n    SELECT\r\n        CONVERT(VARCHAR(2), country_code) AS country_cd\r\n        ,CONVERT(VARCHAR(50), country) AS country_nm\r\n        ,CONVERT(VARCHAR(50), continent) AS continent_nm\r\n        ,CONVERT(BIT, eu_member_flag) AS eu_member_flg\r\n        ,CONVERT(VARCHAR(3), currency) AS currency_cd\r\n        ,CONVERT(VARCHAR(3), iso_alpha_3) AS iso_alpha_3_cd\r\n    FROM country_raw\r\n)\r\n\r\nSELECT * FROM b_country", "language": "sql", "refs": [], "sources": [["seed", "country"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.seed.country"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.b_date": {"database": "wh_weather", "schema": "dbt_bronze", "name": "b_date", "resource_type": "model", "package_name": "weather_dbt", "path": "010_bronze\\b_date.sql", "original_file_path": "models\\010_bronze\\b_date.sql", "unique_id": "model.weather_dbt.b_date", "fqn": ["weather_dbt", "010_bronze", "b_date"], "alias": "b_date", "checksum": {"name": "sha256", "checksum": "688af73dd79014da71e1fddaaa337d6b4e10724e68f55092955d8a111bfda835"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "bronze", "materialized": "table"}, "created_at": 1745762657.3898325, "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_date\"", "raw_code": "WITH ld_date AS (\r\n    SELECT \r\n        *\r\n    FROM {{ source('landing_delta', 'ld_date') }}\r\n),\r\n\r\nb_date AS (\r\n    SELECT\r\n        CONVERT(DATE, date) AS date\r\n        ,CONVERT(DATETIME2(6), date_timestamp) AS date_dttm\r\n        ,CONVERT(INT, year_num) AS year_num\r\n        ,CONVERT(VARCHAR(4), year_txt) AS year_txt\r\n        ,CONVERT(VARCHAR(1), quarter_num) AS quarter_num\r\n        ,CONVERT(VARCHAR(2), quarter_txt) AS quarter_txt\r\n        ,CONVERT(VARCHAR(2), month_num) AS month_num\r\n        ,CONVERT(VARCHAR(10), month_txt) AS month_txt\r\n        ,CONVERT(VARCHAR(2), day_num) AS day_num\r\n        ,CONVERT(VARCHAR(10), day_txt) AS day_txt\r\n        ,CONVERT(VARCHAR(7), year_quarter_txt) AS year_quarter_txt\r\n        ,CONVERT(VARCHAR(7), year_month_txt) AS year_month_txt\r\n    FROM ld_date\r\n)\r\n\r\nSELECT * FROM b_date", "language": "sql", "refs": [], "sources": [["landing_delta", "ld_date"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.landing_delta.ld_date"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.b_weather": {"database": "wh_weather", "schema": "dbt_bronze", "name": "b_weather", "resource_type": "model", "package_name": "weather_dbt", "path": "010_bronze\\b_weather.sql", "original_file_path": "models\\010_bronze\\b_weather.sql", "unique_id": "model.weather_dbt.b_weather", "fqn": ["weather_dbt", "010_bronze", "b_weather"], "alias": "b_weather", "checksum": {"name": "sha256", "checksum": "3aa19aa6669bca3f58138c422f000a224a335447443fd5ab0d5728440283ec65"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "bronze", "materialized": "table"}, "created_at": 1745762657.3918426, "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_weather\"", "raw_code": "WITH ld_weather AS (\r\n    SELECT \r\n        *\r\n    FROM {{ source('landing_delta', 'ld_weather_measure') }}\r\n),\r\n\r\nb_weather AS (\r\n    SELECT\r\n        CONVERT(DATE, m_valid_dt) AS m_valid_dt\r\n        ,CONVERT(INT, chance_of_rain) AS rain_chance_pct\r\n        ,CONVERT(INT, chance_of_snow) AS snow_chance_pct\r\n        ,CONVERT(INT, cloud) AS cloud_coverage_pct\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), feelslike_c) AS temp_feelslike_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), gust_kph) AS gust_kph_no\r\n        ,CONVERT(INT, humidity) AS humidity_pct\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), heatindex_c) AS heatindex_c_no\r\n        ,CONVERT(BIT, is_day) AS is_day_flg\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), precip_mm) AS precip_mm_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), pressure_mb) AS pressure_mb_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), temp_c) AS temp_c_no\r\n        ,CONVERT(DATETIME2(6), time) date_dtt\r\n        ,CONVERT(INT, time_epoch) AS time_epoch\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), uv) AS uv_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), vis_km) AS vis_km_no\r\n        ,CONVERT(VARCHAR(8), wind_dir) AS wind_dir_cd\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), wind_kph) AS wind_kph_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), windchill_c) AS windchill_c_no\r\n        ,CONVERT(VARCHAR(30), city) AS city_nm\r\n        ,CONVERT(VARCHAR(30), country_EN) AS country_nm\r\n        ,CONVERT(DATE, forecast_date) AS forecast_dt\r\n        ,CONVERT(DATETIME2(6), m_extracted_at_dttm) AS m_extracted_at_dttm\r\n        ,CONVERT(DATETIME2(6), m_updated_at_dttm) AS m_updated_at_dttm\r\n    FROM ld_weather\r\n)\r\n\r\nSELECT * FROM b_weather", "language": "sql", "refs": [], "sources": [["landing_delta", "ld_weather_measure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.landing_delta.ld_weather_measure"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.b_weather_forecast": {"database": "wh_weather", "schema": "dbt_bronze", "name": "b_weather_forecast", "resource_type": "model", "package_name": "weather_dbt", "path": "010_bronze\\b_weather_forecast.sql", "original_file_path": "models\\010_bronze\\b_weather_forecast.sql", "unique_id": "model.weather_dbt.b_weather_forecast", "fqn": ["weather_dbt", "010_bronze", "b_weather_forecast"], "alias": "b_weather_forecast", "checksum": {"name": "sha256", "checksum": "549e6d8431342511364c40147d385c85358c39d541be384d476f05167b2bd3c8"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "bronze", "materialized": "table"}, "created_at": 1745762657.3988397, "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_weather_forecast\"", "raw_code": "WITH ld_weather_forecast AS (\r\n    SELECT \r\n        *\r\n    FROM {{ source('landing_delta', 'ld_weather_forecast') }}\r\n),\r\n\r\nb_weather_forecast AS (\r\n    SELECT\r\n        CONVERT(DATE, m_valid_dt) AS m_valid_dt\r\n        ,CONVERT(INT, chance_of_rain) AS rain_chance_pct\r\n        ,CONVERT(INT, chance_of_snow) AS snow_chance_pct\r\n        ,CONVERT(INT, cloud) AS cloud_coverage_pct\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), feelslike_c) AS temp_feelslike_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), gust_kph) AS gust_kph_no\r\n        ,CONVERT(INT, humidity) AS humidity_pct\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), heatindex_c) AS heatindex_c_no\r\n        ,CONVERT(BIT, is_day) AS is_day_flg\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), precip_mm) AS precip_mm_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), pressure_mb) AS pressure_mb_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), temp_c) AS temp_c_no\r\n        ,CONVERT(DATETIME2(6), time) date_dtt\r\n        ,CONVERT(INT, time_epoch) AS time_epoch\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), uv) AS uv_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), vis_km) AS vis_km_no\r\n        ,CONVERT(VARCHAR(8), wind_dir) AS wind_dir_cd\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), wind_kph) AS wind_kph_no\r\n        ,CONVERT(DECIMAL({{ var('v_decimal_precision') }}, {{ var('v_decimal_scale') }}), windchill_c) AS windchill_c_no\r\n        ,CONVERT(VARCHAR(30), city) AS city_nm\r\n        ,CONVERT(VARCHAR(30), country_EN) AS country_nm\r\n        ,CONVERT(DATE, forecast_date) AS forecast_dt\r\n        ,CONVERT(DATETIME2(6), m_extracted_at_dttm) AS m_extracted_at_dttm\r\n        ,CONVERT(DATETIME2(6), m_updated_at_dttm) AS m_updated_at_dttm\r\n    FROM ld_weather_forecast\r\n)\r\n\r\nSELECT * FROM b_weather_forecast", "language": "sql", "refs": [], "sources": [["landing_delta", "ld_weather_forecast"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.landing_delta.ld_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.s_dim_city": {"database": "wh_weather", "schema": "dbt_silver", "name": "s_dim_city", "resource_type": "model", "package_name": "weather_dbt", "path": "020_silver\\s_dim_city.sql", "original_file_path": "models\\020_silver\\s_dim_city.sql", "unique_id": "model.weather_dbt.s_dim_city", "fqn": ["weather_dbt", "020_silver", "s_dim_city"], "alias": "s_dim_city", "checksum": {"name": "sha256", "checksum": "64ca0d042b51ec772864ef5c221a35a89f326e40e18c7221ed2be682290798a0"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "The s_city model provides detailed information about cities. It includes the city's unique identifier (city_pk), country code (country_cd), county name (county_nm), city name (city_nm), KSH code (ksh_cd), city type code (city_type_cd), district code (district_cd), district name (district_nm), district seat name (district_seat_nm), area number (area_no), population number (population_no), and the number of apartments (apartments_no). This model is useful for understanding the demographic and geographic characteristics of different cities.", "columns": {"city_pk": {"name": "city_pk", "description": "This is the primary key for the city. It is a unique identifier generated using a hash function. This identifier is used to uniquely identify each city in the database.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_cd": {"name": "country_cd", "description": "This is the country code associated with the city. It is used to identify the country in which the city is located.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "county_nm": {"name": "county_nm", "description": "This is the name of the county in which the city is located. It provides additional geographical context for the city.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_nm": {"name": "city_nm", "description": "This column represents the name of the city. It is a unique identifier for each city within a specific country and county.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "ksh_cd": {"name": "ksh_cd", "description": "This column represents the KSH code of the city. The KSH code is a unique identifier used by the Hungarian Central Statistical Office (KSH) to identify different geographical areas within Hungary.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_type_cd": {"name": "city_type_cd", "description": "This column represents the type of the city. The city type code is a classification that indicates whether a city is a metropolis, a large city, a small city, or a town.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "district_cd": {"name": "district_cd", "description": "This column represents the unique code assigned to each district. This code is used for identification and reference purposes in various business operations and analyses.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "district_nm": {"name": "district_nm", "description": "This column contains the name of the district. This information is crucial for understanding the geographical context of the data and can be used in various business scenarios such as market segmentation, sales analysis, and strategic planning.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": true, "tags": [], "granularity": null}, "district_seat_nm": {"name": "district_seat_nm", "description": "This column represents the name of the district seat, which is typically the administrative center or capital of the district. This information can be useful for understanding the administrative structure of the region and can be used in various business scenarios such as logistics planning and market research.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": true, "tags": [], "granularity": null}, "area_no": {"name": "area_no", "description": "This column represents the area number of the city. It is a unique identifier that is used to distinguish different areas within a city.", "meta": {}, "data_type": "int", "constraints": [], "quote": true, "tags": [], "granularity": null}, "population_no": {"name": "population_no", "description": "This column represents the population number of the city. It provides information about the total number of people residing in a particular city.", "meta": {}, "data_type": "int", "constraints": [], "quote": true, "tags": [], "granularity": null}, "apartments_no": {"name": "apartments_no", "description": "This column represents the number of apartments in the city. It provides information about the total number of residential units available in a particular city.", "meta": {}, "data_type": "int", "constraints": [], "quote": true, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "weather_dbt://models\\020_silver\\s_dim_city.yml", "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "silver", "materialized": "table"}, "created_at": 1745762657.5516784, "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_dim_city\"", "raw_code": "WITH b_city AS (\r\n    SELECT \r\n        *\r\n    FROM {{ ref('b_city') }}\r\n),\r\n\r\ncity_detailed AS (\r\n    SELECT\r\n        city_nm\r\n        ,ksh_cd\r\n        ,city_type_cd\r\n        ,county_nm\r\n        ,district_cd\r\n        ,district_nm\r\n        ,district_seat_nm\r\n        ,area_no\r\n        ,population_no\r\n        ,apartments_no\r\n        ,country_cd\r\n    FROM {{ source('seed', 'city') }}  \r\n),\r\n\r\njoin_detailed AS (\r\n    SELECT\r\n        city_detailed.*\r\n    FROM b_city\r\n    JOIN city_detailed\r\n    ON b_city.city_nm = city_detailed.city_nm\r\n    AND b_city.country_cd = city_detailed.country_cd\r\n    AND b_city.county_nm = city_detailed.county_nm\r\n),\r\n\r\ngen_sk AS (\r\n    SELECT\r\n        *\r\n        ,{{ gen_sk(['country_cd', 'city_nm']) }} AS city_pk   --county_cd needs to be added to weather tables then here\r\n    FROM join_detailed\r\n),\r\n\r\nreorder AS (\r\n    SELECT\r\n        city_pk\r\n        ,country_cd\r\n        ,county_nm\r\n        ,city_nm\r\n        ,ksh_cd\r\n        ,city_type_cd\r\n        ,district_cd\r\n        ,district_nm\r\n        ,district_seat_nm\r\n        ,area_no\r\n        ,population_no\r\n        ,apartments_no\r\n    FROM gen_sk\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "b_city", "package": null, "version": null}], "sources": [["seed", "city"]], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.gen_sk"], "nodes": ["source.weather_dbt.seed.city", "model.weather_dbt.b_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["city_pk"], "time_spine": null}, "model.weather_dbt.s_dim_country": {"database": "wh_weather", "schema": "dbt_silver", "name": "s_dim_country", "resource_type": "model", "package_name": "weather_dbt", "path": "020_silver\\s_dim_country.sql", "original_file_path": "models\\020_silver\\s_dim_country.sql", "unique_id": "model.weather_dbt.s_dim_country", "fqn": ["weather_dbt", "020_silver", "s_dim_country"], "alias": "s_dim_country", "checksum": {"name": "sha256", "checksum": "e5784cbdbcd00fbba1df734822e3753af4896f451d0c1363b4e5a94f3ce07584"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "silver", "materialized": "table"}, "created_at": 1745762657.4103281, "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_dim_country\"", "raw_code": "WITH b_country AS (\r\n    SELECT \r\n        *\r\n    FROM {{ ref('b_country') }}\r\n),\r\n\r\nreorder AS (\r\n    SELECT \r\n        country_cd\r\n        ,country_nm\r\n        ,continent_nm\r\n        ,eu_member_flg\r\n        ,currency_cd\r\n        ,iso_alpha_3_cd\r\n    FROM b_country\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "b_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.b_country"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.s_dim_date": {"database": "wh_weather", "schema": "dbt_silver", "name": "s_dim_date", "resource_type": "model", "package_name": "weather_dbt", "path": "020_silver\\s_dim_date.sql", "original_file_path": "models\\020_silver\\s_dim_date.sql", "unique_id": "model.weather_dbt.s_dim_date", "fqn": ["weather_dbt", "020_silver", "s_dim_date"], "alias": "s_dim_date", "checksum": {"name": "sha256", "checksum": "2b42d8cea7a7098cb4a2e53ac044768e494f0888b3e3f380815a6e01d749aac0"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "silver", "materialized": "table"}, "created_at": 1745762657.4113264, "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_dim_date\"", "raw_code": "WITH b_date AS (\r\n    SELECT \r\n        *\r\n    FROM {{ ref('b_date') }}\r\n),\r\n\r\nreorder AS (\r\n    SELECT \r\n        date\r\n        ,date_dttm\r\n        ,year_num\r\n        ,year_txt\r\n        ,quarter_num\r\n        ,quarter_txt\r\n        ,month_num\r\n        ,month_txt\r\n        ,day_num\r\n        ,day_txt\r\n        ,year_quarter_txt\r\n        ,year_month_txt\r\n    FROM b_date\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "b_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.b_date"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.s_fct_astro": {"database": "wh_weather", "schema": "dbt_silver", "name": "s_fct_astro", "resource_type": "model", "package_name": "weather_dbt", "path": "020_silver\\s_fct_astro.sql", "original_file_path": "models\\020_silver\\s_fct_astro.sql", "unique_id": "model.weather_dbt.s_fct_astro", "fqn": ["weather_dbt", "020_silver", "s_fct_astro"], "alias": "s_fct_astro", "checksum": {"name": "sha256", "checksum": "5f40c77eb163abbd5636eab89a6c16636522dcb19afb6f70aa6573098a3c7f50"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "The s_fct_astro model provides detailed information about astronomical events such as moon phases, moon illumination, moonrise and moonset times, as well as sunrise and sunset times for different cities across various countries. The model also includes metadata such as the date the data was validated and the date it was extracted or updated. The data is sourced from the wh_weather database, specifically the b_astro table in the dbt_bronze schema and the country_codes table in the dbt_int schema. The model generates a unique key, astro_pk, for each record using the forecast date, country code, and city name.", "columns": {"m_valid_dt": {"name": "m_valid_dt", "description": "This column represents the date when the data was validated. It is important for understanding the timeline of the data and ensuring its accuracy.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "astro_pk": {"name": "astro_pk", "description": "This column is the primary key for the astrological data. It is a unique identifier generated using a hash function. This is used to uniquely identify each row of data.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forecast_dt": {"name": "forecast_dt", "description": "This column represents the date of the forecast. It is used to understand when the forecasted astrological event is expected to occur.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_nm": {"name": "city_nm", "description": "This column represents the name of the city for which the astronomical data is recorded. It is a string type field and can be used to filter or group the data based on specific cities.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_fk": {"name": "city_fk", "description": "A foreign key representing the unique identifier of a city in the `s_dim_city` dimension table. It is used to join forecast data with city-related metadata like county name.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_cd": {"name": "country_cd", "description": "This column represents the code of the country where the city is located. It is a string type field and can be used to filter or group the data based on specific countries. This code is standardized and can be used for joining with other datasets that use the same country coding system.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_nm": {"name": "country_nm", "description": "This column represents the name of the country where the city is located. It is a string type field and can be used to filter or group the data based on specific countries. This field provides a more human-readable form of the country information compared to the country code.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moon_illumination_pct": {"name": "moon_illumination_pct", "description": "This column represents the percentage of the moon's surface that is illuminated by the sun's light at a given time. It is a numerical value ranging from 0 to 100, where 0 indicates a new moon (completely dark) and 100 indicates a full moon (completely illuminated).", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moon_phase_cd": {"name": "moon_phase_cd", "description": "This column contains a code that represents the current phase of the moon. The moon goes through several phases in a month, from new moon to full moon and back again. This code helps to identify which phase the moon is in at a given time.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moonrise_t": {"name": "moonrise_t", "description": "This column indicates the time at which the moon rises above the horizon. The time is represented in the 24-hour format. Please note that the moonrise time can vary significantly depending on the geographical location and the phase of the moon.", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moonset_t": {"name": "moonset_t", "description": "This column represents the time at which the moon sets. It is expressed in local time of the city and country specified in the 'city_nm' and 'country_cd' columns respectively. This information can be useful for planning activities that are dependent on moonlight or for understanding the patterns of natural light in a particular location.", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sunrise_t": {"name": "sunrise_t", "description": "This column indicates the time of sunrise. It is expressed in local time of the city and country specified in the 'city_nm' and 'country_cd' columns respectively. This information can be useful for planning activities that require daylight or for understanding the patterns of natural light in a particular location.", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sunset_t": {"name": "sunset_t", "description": "This column represents the time of sunset. It is expressed in local time of the city and country specified in the 'city_nm' and 'country_cd' columns respectively. This information can be useful for planning activities that require daylight or for understanding the patterns of natural light in a particular location.", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_extracted_at_dttm": {"name": "m_extracted_at_dttm", "description": "This column represents the date and time when the data was extracted from the source system. It is useful for tracking when the data was last refreshed and can help in identifying any potential delays or issues in the data extraction process.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_updated_at_dttm": {"name": "m_updated_at_dttm", "description": "This column indicates the date and time when the data was last updated in the database. It provides a timestamp for the most recent changes or updates made to the data, which can be useful for tracking data changes over time and ensuring data accuracy.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "weather_dbt://models\\020_silver\\s_fct_astro.yml", "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "silver", "materialized": "table"}, "created_at": 1745762657.561431, "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_fct_astro\"", "raw_code": "WITH b_astro AS (\r\n    SELECT \r\n        *\r\n    FROM {{ ref('b_astro') }}\r\n),\r\n\r\ns_dim_country AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_country') }}\r\n),\r\n\r\ns_dim_city AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_city') }}\r\n),\r\n\r\njoin_country_cd AS (\r\n    SELECT\r\n        b_astro.*\r\n        ,s_dim_country.country_cd AS country_cd\r\n    FROM b_astro\r\n    JOIN s_dim_country\r\n    ON b_astro.country_nm = s_dim_country.country_nm\r\n),\r\n\r\n\r\ngen_sk AS (\r\n    SELECT\r\n        *\r\n        ,{{ gen_sk(['m_valid_dt','forecast_dt','country_cd', 'city_nm']) }} AS astro_pk\r\n        ,{{ gen_sk(['country_cd', 'city_nm']) }} AS city_fk\r\n    FROM join_country_cd\r\n),\r\n\r\njoin_county_nm AS (\r\n    SELECT\r\n        gen_sk.*\r\n        ,s_dim_city.county_nm\r\n    FROM gen_sk\r\n    JOIN s_dim_city\r\n    ON gen_sk.city_fk = s_dim_city.city_pk\r\n),\r\n\r\nmissing_astro_times AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,astro_pk\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,country_cd\r\n        ,country_nm\r\n        ,county_nm\r\n        ,moon_illumination_pct\r\n        ,moon_phase_cd\r\n        ,CASE \r\n            WHEN moonrise_t = 'No moonrise' THEN NULL \r\n            ELSE moonrise_t\r\n        END AS moonrise_t\r\n        ,CASE \r\n            WHEN moonset_t = 'No moonset' THEN NULL \r\n            ELSE moonset_t\r\n        END AS moonset_t\r\n        ,CASE \r\n            WHEN sunrise_t = 'No sunrise' THEN NULL \r\n            ELSE sunrise_t\r\n        END AS sunrise_t\r\n        ,CASE \r\n            WHEN sunset_t = 'No sunset' THEN NULL \r\n            ELSE sunset_t\r\n        END AS sunset_t\r\n        ,m_extracted_at_dttm\r\n        ,m_updated_at_dttm\r\n    FROM join_county_nm\r\n),\r\n\r\nreorder AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,astro_pk\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,country_cd\r\n        ,country_nm\r\n        ,county_nm\r\n        ,moon_illumination_pct\r\n        ,moon_phase_cd\r\n        ,CONVERT(TIME(0), moonrise_t) AS moonrise_t\r\n        ,CONVERT(TIME(0), moonset_t) AS moonset_t\r\n        ,CONVERT(TIME(0), sunrise_t) AS sunrise_t\r\n        ,CONVERT(TIME(0), sunset_t) AS sunset_t\r\n        ,m_extracted_at_dttm\r\n        ,m_updated_at_dttm\r\n    FROM missing_astro_times\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "b_astro", "package": null, "version": null}, {"name": "s_dim_country", "package": null, "version": null}, {"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.gen_sk"], "nodes": ["model.weather_dbt.b_astro", "model.weather_dbt.s_dim_country", "model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["astro_pk"], "time_spine": null}, "model.weather_dbt.s_fct_astro_forecast": {"database": "wh_weather", "schema": "dbt_silver", "name": "s_fct_astro_forecast", "resource_type": "model", "package_name": "weather_dbt", "path": "020_silver\\s_fct_astro_forecast.sql", "original_file_path": "models\\020_silver\\s_fct_astro_forecast.sql", "unique_id": "model.weather_dbt.s_fct_astro_forecast", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_forecast"], "alias": "s_fct_astro_forecast", "checksum": {"name": "sha256", "checksum": "7b05047edbcbf6984207a9f5159e26db79a7e91aa67445c8af60520e462bf141"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {"m_valid_dt": {"name": "m_valid_dt", "description": "This column represents the date when the data in the row was validated. It is important for tracking data quality and ensuring that the forecast information is up-to-date.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "astro_forecast_pk": {"name": "astro_forecast_pk", "description": "This is the primary key for the astrological forecast data. It is a unique identifier generated using a combination of the forecast date, country code, and city name. This key is used to uniquely identify each row of data and is essential for data management and integrity.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forecast_dt": {"name": "forecast_dt", "description": "This column contains the date of the forecast. It tells us for which date the astrological forecast is applicable. This is crucial for understanding the timing of the forecast and planning accordingly.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_nm": {"name": "city_nm", "description": "This column represents the name of the city for which the astronomical forecast is provided. It is a string value and can be used to filter the data for specific cities.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_fk": {"name": "city_fk", "description": "A foreign key representing the unique identifier of a city in the `s_dim_city` dimension table. It is used to join forecast data with city-related metadata like county name.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_cd": {"name": "country_cd", "description": "This column represents the country code associated with the city for which the forecast is provided. It is a string value and can be used to group or filter the data by country.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_nm": {"name": "country_nm", "description": "This column represents the name of the country associated with the city for which the forecast is provided. It is a string value and can be used to group or filter the data by country.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moon_up_flg": {"name": "moon_up_flg", "description": "This column indicates whether the moon is up or not. It is a flag that can take two values: '1' if the moon is up and '0' if the moon is not up. This information can be useful for understanding the moon's visibility in a particular location at a specific time.", "meta": {}, "data_type": "bit", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sun_up_flg": {"name": "sun_up_flg", "description": "This column indicates whether the sun is up or not. It is a flag that can take two values: '1' if the sun is up and '0' if the sun is not up. This information can be useful for understanding the sun's visibility in a particular location at a specific time.", "meta": {}, "data_type": "bit", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moon_illumination_pct": {"name": "moon_illumination_pct", "description": "This column represents the moon's illumination level. It is a numerical value that ranges from 0 to 100, where 0 means no illumination (new moon) and 100 means full illumination (full moon). This information can be useful for understanding the moon's phase and its brightness in a particular location at a specific time.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moon_phase_cd": {"name": "moon_phase_cd", "description": "This column represents the code for the current phase of the moon. It is a unique identifier that can be used to understand the moon's current state, such as new moon, first quarter, full moon, or last quarter.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moonrise_t": {"name": "moonrise_t", "description": "This column represents the time at which the moon rises. It is expressed in local time and can be used to understand when the moon will be visible in the sky.", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": [], "granularity": null}, "moonset_t": {"name": "moonset_t", "description": "This column represents the time at which the moon sets. It is expressed in local time and can be used to understand when the moon will no longer be visible in the sky.", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sunrise_t": {"name": "sunrise_t", "description": "This column represents the time of sunrise for a specific location and date. It is crucial for understanding the daylight hours for any given location and can be used in various business scenarios such as planning outdoor events or understanding the impact of daylight on business operations.", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": [], "granularity": null}, "sunset_t": {"name": "sunset_t", "description": "This column represents the time of sunset for a specific location and date. Similar to the sunrise time, it provides valuable information about the daylight hours and can be used to plan business activities that are dependent on daylight.", "meta": {}, "data_type": "time", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_extracted_at_dttm": {"name": "m_extracted_at_dttm", "description": "This column represents the date and time when the data was extracted from the source system. It is important for tracking data lineage and understanding the freshness of the data. Business users can use this information to ensure they are making decisions based on the most recent data.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_updated_at_dttm": {"name": "m_updated_at_dttm", "description": "This column represents the date and time when the forecast data was last updated. It is important for tracking the freshness of the data and understanding when the last changes were made. The format is 'YYYY-MM-DD HH:MI:SS'.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "weather_dbt://models\\020_silver\\s_fct_astro_forecast.yml", "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "silver", "materialized": "table"}, "created_at": 1745762657.5748637, "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"", "raw_code": "WITH b_astro_forecast AS (\r\n    SELECT \r\n        *\r\n    FROM {{ ref('b_astro_forecast') }}\r\n),\r\n\r\ns_dim_country AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_country') }}\r\n),\r\n\r\ns_dim_city AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_city') }}\r\n),\r\n\r\njoin_country_cd AS (\r\n    SELECT\r\n        b_astro_forecast.*\r\n        ,s_dim_country.country_cd AS country_cd\r\n    FROM b_astro_forecast\r\n    JOIN s_dim_country\r\n    ON b_astro_forecast.country_nm = s_dim_country.country_nm\r\n),\r\n\r\ngen_sk AS (\r\n  SELECT\r\n    *\r\n    ,{{ gen_sk(['m_valid_dt','forecast_dt','country_cd', 'city_nm']) }} AS astro_forecast_pk\r\n    ,{{ gen_sk(['country_cd', 'city_nm']) }} AS city_fk\r\n    FROM join_country_cd  \r\n),\r\n\r\njoin_county_nm AS (\r\n    SELECT\r\n        gen_sk.*\r\n        ,s_dim_city.county_nm AS county_nm\r\n    FROM gen_sk\r\n    JOIN s_dim_city\r\n    ON gen_sk.city_fk = s_dim_city.city_pk\r\n),\r\n\r\nmissing_astro_times AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,astro_forecast_pk\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,country_cd\r\n        ,country_nm\r\n        ,county_nm\r\n        ,moon_up_flg\r\n        ,sun_up_flg\r\n        ,moon_illumination_pct\r\n        ,moon_phase_cd\r\n        ,CASE \r\n            WHEN moonrise_t = 'No moonrise' THEN NULL \r\n            ELSE moonrise_t\r\n        END AS moonrise_t\r\n        ,CASE \r\n            WHEN moonset_t = 'No moonset' THEN NULL \r\n            ELSE moonset_t\r\n        END AS moonset_t\r\n        ,CASE \r\n            WHEN sunrise_t = 'No sunrise' THEN NULL \r\n            ELSE sunrise_t\r\n        END AS sunrise_t\r\n        ,CASE \r\n            WHEN sunset_t = 'No sunset' THEN NULL \r\n            ELSE sunset_t\r\n        END AS sunset_t\r\n        ,m_extracted_at_dttm\r\n        ,m_updated_at_dttm\r\n    FROM join_county_nm\r\n),\r\n\r\nreorder AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,astro_forecast_pk\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,country_cd\r\n        ,country_nm\r\n        ,county_nm\r\n        ,moon_up_flg\r\n        ,sun_up_flg\r\n        ,moon_illumination_pct\r\n        ,moon_phase_cd\r\n        ,CONVERT(TIME(0), moonrise_t) AS moonrise_t\r\n        ,CONVERT(TIME(0), moonset_t) AS moonset_t\r\n        ,CONVERT(TIME(0), sunrise_t) AS sunrise_t\r\n        ,CONVERT(TIME(0), sunset_t) AS sunset_t\r\n        ,m_extracted_at_dttm\r\n        ,m_updated_at_dttm\r\n    FROM missing_astro_times\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "b_astro_forecast", "package": null, "version": null}, {"name": "s_dim_country", "package": null, "version": null}, {"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.gen_sk"], "nodes": ["model.weather_dbt.b_astro_forecast", "model.weather_dbt.s_dim_country", "model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["astro_forecast_pk"], "time_spine": null}, "model.weather_dbt.g_dim_city": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_dim_city", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_dim_city.sql", "original_file_path": "models\\030_gold\\g_dim_city.sql", "unique_id": "model.weather_dbt.g_dim_city", "fqn": ["weather_dbt", "030_gold", "g_dim_city"], "alias": "g_dim_city", "checksum": {"name": "sha256", "checksum": "9db3e792dda847ffa751fb9dd7363419e6fef53624b5bec2e7b5bf9d73f4770a"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4332807, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_city\"", "raw_code": "WITH s_dim_city AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_city') }}\r\n)\r\n\r\nSELECT * FROM s_dim_city", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_dim_city_nm": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_dim_city_nm", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_dim_city_nm.sql", "original_file_path": "models\\030_gold\\g_dim_city_nm.sql", "unique_id": "model.weather_dbt.g_dim_city_nm", "fqn": ["weather_dbt", "030_gold", "g_dim_city_nm"], "alias": "g_dim_city_nm", "checksum": {"name": "sha256", "checksum": "750714562220d5f6dec15c008d0ceb29781d6448a85825b4194d2849412722fc"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4347408, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_city_nm\"", "raw_code": "WITH s_dim_city AS (\r\n    SELECT\r\n        city_nm\r\n    FROM {{ ref('s_dim_city') }}\r\n)\r\n\r\nSELECT * FROM s_dim_city", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_dim_country": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_dim_country", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_dim_country.sql", "original_file_path": "models\\030_gold\\g_dim_country.sql", "unique_id": "model.weather_dbt.g_dim_country", "fqn": ["weather_dbt", "030_gold", "g_dim_country"], "alias": "g_dim_country", "checksum": {"name": "sha256", "checksum": "0fa0b9adfecd19cbd674b519212ad845ba6058774f6e4c041393a790eaedd02f"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4347408, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_country\"", "raw_code": "WITH s_dim_country AS (\r\n    SELECT \r\n        *\r\n    FROM {{ ref('s_dim_country') }}\r\n),\r\n\r\nreorder AS (\r\n    SELECT \r\n        country_cd\r\n        ,country_nm\r\n        ,continent_nm\r\n        ,eu_member_flg\r\n        ,currency_cd\r\n        ,iso_alpha_3_cd\r\n    FROM s_dim_country\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "s_dim_country", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_dim_country"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_dim_date": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_dim_date", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_dim_date.sql", "original_file_path": "models\\030_gold\\g_dim_date.sql", "unique_id": "model.weather_dbt.g_dim_date", "fqn": ["weather_dbt", "030_gold", "g_dim_date"], "alias": "g_dim_date", "checksum": {"name": "sha256", "checksum": "ed4e5e0b63bc4e58fe5ef9c9eeaa5ee4ba96a40bbdda744f44a2352a12519873"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4433606, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_date\"", "raw_code": "WITH s_dim_date AS (\r\n    SELECT \r\n        *\r\n    FROM {{ ref('s_dim_date') }}\r\n),\r\n\r\nreorder AS (\r\n    SELECT \r\n        date\r\n        ,date_dttm\r\n        ,year_num\r\n        ,year_txt\r\n        ,quarter_num\r\n        ,quarter_txt\r\n        ,month_num\r\n        ,month_txt\r\n        ,day_num\r\n        ,day_txt\r\n        ,year_quarter_txt\r\n        ,year_month_txt\r\n    FROM s_dim_date\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "s_dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_dim_date"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_dim_m_valid_dt": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_dim_m_valid_dt", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_dim_m_valid_dt.sql", "original_file_path": "models\\030_gold\\g_dim_m_valid_dt.sql", "unique_id": "model.weather_dbt.g_dim_m_valid_dt", "fqn": ["weather_dbt", "030_gold", "g_dim_m_valid_dt"], "alias": "g_dim_m_valid_dt", "checksum": {"name": "sha256", "checksum": "4c6562756eaba7bdc545596978efb4aa67d06ad149f72525b11bcc6b1aaf6131"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4443595, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_m_valid_dt\"", "raw_code": "WITH distinct_m_valid_dt AS (\r\n    SELECT DISTINCT\r\n        m_valid_dt\r\n    FROM {{ ref('s_fct_weather') }}\r\n)\r\n\r\nSELECT * FROM distinct_m_valid_dt", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_fct_astro": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_fct_astro", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_fct_astro.sql", "original_file_path": "models\\030_gold\\g_fct_astro.sql", "unique_id": "model.weather_dbt.g_fct_astro", "fqn": ["weather_dbt", "030_gold", "g_fct_astro"], "alias": "g_fct_astro", "checksum": {"name": "sha256", "checksum": "72dba7a3ad0e9e6b236a63d77fe5c9e5c429bdb0d29460c24c0976fd0d2f8e93"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.445359, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_astro\"", "raw_code": "WITH s_fct_astro AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_fct_astro') }}\r\n)\r\n\r\nSELECT * FROM s_fct_astro", "language": "sql", "refs": [{"name": "s_fct_astro", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_astro"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_fct_astro_avg": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_fct_astro_avg", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_fct_astro_avg.sql", "original_file_path": "models\\030_gold\\g_fct_astro_avg.sql", "unique_id": "model.weather_dbt.g_fct_astro_avg", "fqn": ["weather_dbt", "030_gold", "g_fct_astro_avg"], "alias": "g_fct_astro_avg", "checksum": {"name": "sha256", "checksum": "5166707ac0379e9b08df0e3787d8fae0b77c36cd233d2ed752058cf123d59477"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4473584, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_astro_avg\"", "raw_code": "WITH s_fct_astro AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_fct_astro') }}\r\n),\r\n\r\ndaily_aggregates AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        -- Convert TIME to seconds for averaging\r\n        ,AVG(DATEDIFF(SECOND, '00:00:00', moonrise_t)) AS moonrise_t_avg\r\n        ,AVG(DATEDIFF(SECOND, '00:00:00', moonset_t)) AS moonset_t_avg\r\n        ,AVG(DATEDIFF(SECOND, '00:00:00', sunrise_t)) AS sunrise_t_avg\r\n        ,AVG(DATEDIFF(SECOND, '00:00:00', sunset_t)) AS sunset_t_avg\r\n    FROM s_fct_astro\r\n    GROUP BY m_valid_dt, city_nm, city_fk, county_nm, country_cd\r\n),\r\n\r\nrolling_averages AS (\r\n    SELECT\r\n        city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,m_valid_dt\r\n\r\n        -- Rolling averages (3 days)\r\n        ,AVG(moonrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS moonrise_t_avg_3d\r\n\r\n        ,AVG(moonset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS moonset_t_avg_3d\r\n\r\n        ,AVG(sunset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS sunset_t_avg_3d\r\n\r\n        ,AVG(sunrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS sunrise_t_avg_3d\r\n\r\n        -- Rolling averages (1 week)\r\n        ,AVG(moonrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS moonrise_t_avg_1w\r\n\r\n        ,AVG(moonset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS moonset_t_avg_1w\r\n\r\n        ,AVG(sunset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS sunset_t_avg_1w\r\n\r\n        ,AVG(sunrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS sunrise_t_avg_1w\r\n\r\n        -- Rolling averages (2 weeks = 14 days)\r\n        ,AVG(moonrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS moonrise_t_avg_2w\r\n\r\n        ,AVG(moonset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS moonset_t_avg_2w\r\n\r\n        ,AVG(sunset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS sunset_t_avg_2w\r\n\r\n        ,AVG(sunrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS sunrise_t_avg_2w\r\n\r\n    FROM daily_aggregates\r\n),\r\n\r\nastro_data_to_time AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_3d, '00:00:00') AS TIME(0)) AS moonrise_t_avg_3d\r\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_1w, '00:00:00') AS TIME(0)) AS moonrise_t_avg_1w\r\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_2w, '00:00:00') AS TIME(0)) AS moonrise_t_avg_2w\r\n        ,CAST(DATEADD(SECOND, moonset_t_avg_3d, '00:00:00') AS TIME(0)) AS moonset_t_avg_3d\r\n        ,CAST(DATEADD(SECOND, moonset_t_avg_1w, '00:00:00') AS TIME(0)) AS moonset_t_avg_1w\r\n        ,CAST(DATEADD(SECOND, moonset_t_avg_2w, '00:00:00') AS TIME(0)) AS moonset_t_avg_2w\r\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_3d, '00:00:00') AS TIME(0)) AS sunrise_t_avg_3d\r\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_1w, '00:00:00') AS TIME(0)) AS sunrise_t_avg_1w\r\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_2w, '00:00:00') AS TIME(0)) AS sunrise_t_avg_2w\r\n        ,CAST(DATEADD(SECOND, sunset_t_avg_3d, '00:00:00') AS TIME(0)) AS sunset_t_avg_3d\r\n        ,CAST(DATEADD(SECOND, sunset_t_avg_1w, '00:00:00') AS TIME(0)) AS sunset_t_avg_1w\r\n        ,CAST(DATEADD(SECOND, sunset_t_avg_2w, '00:00:00') AS TIME(0)) AS sunset_t_avg_2w\r\n    FROM rolling_averages\r\n),\r\n\r\nreorder AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,moonrise_t_avg_3d\r\n        ,moonrise_t_avg_1w\r\n        ,moonrise_t_avg_2w\r\n        ,moonset_t_avg_3d\r\n        ,moonset_t_avg_1w\r\n        ,moonset_t_avg_2w\r\n        ,sunrise_t_avg_3d\r\n        ,sunrise_t_avg_1w\r\n        ,sunrise_t_avg_2w\r\n        ,sunset_t_avg_3d\r\n        ,sunset_t_avg_1w\r\n        ,sunset_t_avg_2w\r\n    FROM astro_data_to_time\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "s_fct_astro", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_astro"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_fct_astro_forecast": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_fct_astro_forecast", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_fct_astro_forecast.sql", "original_file_path": "models\\030_gold\\g_fct_astro_forecast.sql", "unique_id": "model.weather_dbt.g_fct_astro_forecast", "fqn": ["weather_dbt", "030_gold", "g_fct_astro_forecast"], "alias": "g_fct_astro_forecast", "checksum": {"name": "sha256", "checksum": "fc573fe16ae527f3d9b5ec833548d6cd7368b1b29c8d019458359cb9fe9ea0b0"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4483588, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_astro_forecast\"", "raw_code": "WITH s_fct_astro_forecast AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_fct_astro_forecast') }}\r\n)\r\n\r\nSELECT * FROM s_fct_astro_forecast", "language": "sql", "refs": [{"name": "s_fct_astro_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_astro_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_fct_astro_forecast_avg": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_fct_astro_forecast_avg", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_fct_astro_forecast_avg.sql", "original_file_path": "models\\030_gold\\g_fct_astro_forecast_avg.sql", "unique_id": "model.weather_dbt.g_fct_astro_forecast_avg", "fqn": ["weather_dbt", "030_gold", "g_fct_astro_forecast_avg"], "alias": "g_fct_astro_forecast_avg", "checksum": {"name": "sha256", "checksum": "2d56062a2ef32b4be9e8e72fdb4099a44303f603289e75f819c6d0237efe4622"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4496484, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_astro_forecast_avg\"", "raw_code": "WITH s_fct_astro_forecast AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,astro_forecast_pk\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,country_nm\r\n        ,moon_illumination_pct\r\n        ,moon_phase_cd\r\n        ,moonrise_t\r\n        ,moonset_t\r\n        ,sunrise_t\r\n        ,sunset_t\r\n    FROM {{ ref('s_fct_astro_forecast') }}\r\n),\r\n\r\ndaily_aggregates AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        -- Convert TIME to seconds for averaging\r\n        ,AVG(DATEDIFF(SECOND, '00:00:00', moonrise_t)) AS moonrise_t_avg\r\n        ,AVG(DATEDIFF(SECOND, '00:00:00', moonset_t)) AS moonset_t_avg\r\n        ,AVG(DATEDIFF(SECOND, '00:00:00', sunrise_t)) AS sunrise_t_avg\r\n        ,AVG(DATEDIFF(SECOND, '00:00:00', sunset_t)) AS sunset_t_avg\r\n    FROM s_fct_astro_forecast\r\n    GROUP BY m_valid_dt, city_nm, city_fk, county_nm, country_cd, forecast_dt\r\n),\r\n\r\n-- Step 2: Calculate rolling averages\r\nrolling_averages AS (\r\n    SELECT\r\n        city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,m_valid_dt\r\n        -- Rolling averages (3 days)\r\n        ,AVG(moonrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS moonrise_t_avg_3d,\r\n\r\n        AVG(moonset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS moonset_t_avg_3d,\r\n\r\n        AVG(sunset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS sunset_t_avg_3d,\r\n\r\n        AVG(sunrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS sunrise_t_avg_3d,\r\n\r\n        -- Rolling averages (1 week = 7 days)\r\n        AVG(moonrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS moonrise_t_avg_1w,\r\n\r\n        AVG(moonset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS moonset_t_avg_1w,\r\n\r\n        AVG(sunset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS sunset_t_avg_1w,\r\n\r\n        AVG(sunrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS sunrise_t_avg_1w,\r\n\r\n        -- Rolling averages (2 weeks = 14 days)\r\n        AVG(moonrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS moonrise_t_avg_2w,\r\n\r\n        AVG(moonset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS moonset_t_avg_2w,\r\n\r\n        AVG(sunset_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS sunset_t_avg_2w,\r\n\r\n        AVG(sunrise_t_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS sunrise_t_avg_2w\r\n    FROM daily_aggregates\r\n),\r\n\r\nastro_data_to_time AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_3d, '00:00:00') AS TIME(0)) AS moonrise_t_avg_3d\r\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_1w, '00:00:00') AS TIME(0)) AS moonrise_t_avg_1w\r\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_2w, '00:00:00') AS TIME(0)) AS moonrise_t_avg_2w\r\n        ,CAST(DATEADD(SECOND, moonset_t_avg_3d, '00:00:00') AS TIME(0)) AS moonset_t_avg_3d\r\n        ,CAST(DATEADD(SECOND, moonset_t_avg_1w, '00:00:00') AS TIME(0)) AS moonset_t_avg_1w\r\n        ,CAST(DATEADD(SECOND, moonset_t_avg_2w, '00:00:00') AS TIME(0)) AS moonset_t_avg_2w\r\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_3d, '00:00:00') AS TIME(0)) AS sunrise_t_avg_3d\r\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_1w, '00:00:00') AS TIME(0)) AS sunrise_t_avg_1w\r\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_2w, '00:00:00') AS TIME(0)) AS sunrise_t_avg_2w\r\n        ,CAST(DATEADD(SECOND, sunset_t_avg_3d, '00:00:00') AS TIME(0)) AS sunset_t_avg_3d\r\n        ,CAST(DATEADD(SECOND, sunset_t_avg_1w, '00:00:00') AS TIME(0)) AS sunset_t_avg_1w\r\n        ,CAST(DATEADD(SECOND, sunset_t_avg_2w, '00:00:00') AS TIME(0)) AS sunset_t_avg_2w\r\n    FROM rolling_averages\r\n),\r\n\r\nreorder AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,moonrise_t_avg_3d\r\n        ,moonrise_t_avg_1w\r\n        ,moonrise_t_avg_2w\r\n        ,moonset_t_avg_3d\r\n        ,moonset_t_avg_1w\r\n        ,moonset_t_avg_2w\r\n        ,sunrise_t_avg_3d\r\n        ,sunrise_t_avg_1w\r\n        ,sunrise_t_avg_2w\r\n        ,sunset_t_avg_3d\r\n        ,sunset_t_avg_1w\r\n        ,sunset_t_avg_2w\r\n    FROM astro_data_to_time\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "s_fct_astro_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_astro_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_fct_weather": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_fct_weather", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_fct_weather.sql", "original_file_path": "models\\030_gold\\g_fct_weather.sql", "unique_id": "model.weather_dbt.g_fct_weather", "fqn": ["weather_dbt", "030_gold", "g_fct_weather"], "alias": "g_fct_weather", "checksum": {"name": "sha256", "checksum": "305bd9ae2c8a17725452aae095043e8d040885cff6d4177918a2463f28b62a63"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762657.4516487, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_weather\"", "raw_code": "WITH s_fct_weather AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_fct_weather') }}\r\n)\r\n\r\nSELECT * FROM s_fct_weather", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_s_dim_city": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_s_dim_city", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_s_dim_city.sql", "original_file_path": "models\\040_dq\\dq_s_dim_city.sql", "unique_id": "model.weather_dbt.dq_s_dim_city", "fqn": ["weather_dbt", "040_dq", "dq_s_dim_city"], "alias": "dq_s_dim_city", "checksum": {"name": "sha256", "checksum": "321fe61688b194a359f3be09b4b1bad0a6134e9e6e5734a5491f4192e4829727"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762657.477888, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_dim_city\"", "raw_code": "WITH s_dim_city_not_null_city_pk AS (\r\n    SELECT\r\n        'city_pk' AS tested_field_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_dim_city_not_null_city_pk') }}\r\n),\r\n\r\n\r\ns_dim_city_unique_city_pk AS (\r\n    SELECT\r\n        'city_pk' AS tested_field_nm\r\n        ,'unique' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_dim_city_unique_city_pk') }}\r\n),\r\n\r\ns_dim_city_accepted_values_country_cd AS (\r\n    SELECT\r\n        'country_cd' AS tested_field_nm\r\n        ,'accepted_values' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_dim_city_accepted_values_country_cd') }}\r\n),\r\n\r\nunion_tests AS (\r\n    SELECT * FROM s_dim_city_not_null_city_pk\r\n    UNION ALL\r\n    SELECT * FROM s_dim_city_unique_city_pk\r\n    UNION ALL\r\n    SELECT * FROM s_dim_city_accepted_values_country_cd\r\n)\r\n\r\nSELECT * FROM union_tests", "language": "sql", "refs": [], "sources": [["dbt_dq_test", "s_dim_city_accepted_values_country_cd"], ["dbt_dq_test", "s_dim_city_not_null_city_pk"], ["dbt_dq_test", "s_dim_city_unique_city_pk"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.dbt_dq_test.s_dim_city_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_dim_city_not_null_city_pk", "source.weather_dbt.dbt_dq_test.s_dim_city_unique_city_pk"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_s_fct_astro": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_s_fct_astro", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_s_fct_astro.sql", "original_file_path": "models\\040_dq\\dq_s_fct_astro.sql", "unique_id": "model.weather_dbt.dq_s_fct_astro", "fqn": ["weather_dbt", "040_dq", "dq_s_fct_astro"], "alias": "dq_s_fct_astro", "checksum": {"name": "sha256", "checksum": "c23cc466369e411667ef83dcc705650076fe3ddaf5045ca316a2b6dae576ff87"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762657.479819, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_fct_astro\"", "raw_code": "WITH s_fct_astro_not_null_astro_pk AS (\r\n    SELECT \r\n        'astro_pk' AS tested_field_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_not_null_astro_pk') }}\r\n),\r\n\r\ns_fct_astro_unique_astro_pk AS (\r\n    SELECT \r\n        'astro_pk' AS tested_field_nm\r\n        ,'unique' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_unique_astro_pk') }}\r\n),\r\n\r\ns_fct_astro_accepted_range_m_valid_dt AS (\r\n    SELECT \r\n        'm_valid_dt' AS tested_field_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_accepted_range_m_valid_dt') }}\r\n),\r\n\r\ns_fct_astro_accepted_values_country_cd AS (\r\n    SELECT \r\n        'country_cd' AS tested_field_nm\r\n        ,'accepted_values' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_accepted_values_country_cd') }}\r\n),\r\n\r\ns_fct_astro_rel_s_dim_city_city_fk AS (\r\n    SELECT\r\n        'city_fk' AS tested_field_nm\r\n        ,'relationships' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_rel_s_dim_city_city_fk') }}  \r\n),\r\n\r\nunion_tests AS (\r\n    SELECT * FROM s_fct_astro_not_null_astro_pk\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_unique_astro_pk\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_accepted_range_m_valid_dt\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_accepted_values_country_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_rel_s_dim_city_city_fk\r\n)\r\n\r\nSELECT * FROM union_tests", "language": "sql", "refs": [], "sources": [["dbt_dq_test", "s_fct_astro_not_null_astro_pk"], ["dbt_dq_test", "s_fct_astro_rel_s_dim_city_city_fk"], ["dbt_dq_test", "s_fct_astro_unique_astro_pk"], ["dbt_dq_test", "s_fct_astro_accepted_range_m_valid_dt"], ["dbt_dq_test", "s_fct_astro_accepted_values_country_cd"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.dbt_dq_test.s_fct_astro_not_null_astro_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_astro_unique_astro_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_values_country_cd"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_s_fct_astro_forecast": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_s_fct_astro_forecast", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_s_fct_astro_forecast.sql", "original_file_path": "models\\040_dq\\dq_s_fct_astro_forecast.sql", "unique_id": "model.weather_dbt.dq_s_fct_astro_forecast", "fqn": ["weather_dbt", "040_dq", "dq_s_fct_astro_forecast"], "alias": "dq_s_fct_astro_forecast", "checksum": {"name": "sha256", "checksum": "ab6617e2ea0a52106f4a3d549a8a960f2b383322028e7443cb358af7f9101188"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762657.4818277, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_fct_astro_forecast\"", "raw_code": "WITH s_fct_astro_forecast_not_null_astro_forecast_pk AS (\r\n    SELECT \r\n        'astro_forecast_pk' AS tested_field_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_forecast_not_null_astro_forecast_pk') }}\r\n),\r\n\r\ns_fct_astro_forecast_unique_astro_forecast_pk AS (\r\n    SELECT \r\n        'astro_forecast_pk' AS tested_field_nm\r\n        ,'unique' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_forecast_unique_astro_forecast_pk') }}\r\n),\r\n\r\ns_fct_astro_forecast_accepted_range_m_valid_dt AS (\r\n    SELECT \r\n        'm_valid_dt' AS tested_field_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_forecast_accepted_range_m_valid_dt') }}\r\n),\r\n\r\ns_fct_astro_forecast_accepted_values_country_cd AS (\r\n    SELECT \r\n        'country_cd' AS tested_field_nm\r\n        ,'accepted_values' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_forecast_accepted_values_country_cd') }}\r\n),\r\n\r\ns_fct_astro_forecast_rel_s_dim_city_city_fk AS (\r\n    SELECT \r\n        'city_fk' AS tested_field_nm\r\n        ,'relationships' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test','s_fct_astro_forecast_rel_s_dim_city_city_fk') }}\r\n),\r\n\r\nunion_tests AS (\r\n    SELECT * FROM s_fct_astro_forecast_not_null_astro_forecast_pk\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_unique_astro_forecast_pk\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_accepted_range_m_valid_dt\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_accepted_values_country_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_rel_s_dim_city_city_fk\r\n)\r\n\r\nSELECT * FROM union_tests", "language": "sql", "refs": [], "sources": [["dbt_dq_test", "s_fct_astro_forecast_accepted_values_country_cd"], ["dbt_dq_test", "s_fct_astro_forecast_not_null_astro_forecast_pk"], ["dbt_dq_test", "s_fct_astro_forecast_accepted_range_m_valid_dt"], ["dbt_dq_test", "s_fct_astro_forecast_unique_astro_forecast_pk"], ["dbt_dq_test", "s_fct_astro_forecast_rel_s_dim_city_city_fk"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_not_null_astro_forecast_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_unique_astro_forecast_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_rel_s_dim_city_city_fk"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_s_fct_weather": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_s_fct_weather", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_s_fct_weather.sql", "original_file_path": "models\\040_dq\\dq_s_fct_weather.sql", "unique_id": "model.weather_dbt.dq_s_fct_weather", "fqn": ["weather_dbt", "040_dq", "dq_s_fct_weather"], "alias": "dq_s_fct_weather", "checksum": {"name": "sha256", "checksum": "9d28781b9fea3089593d567fc0304d9929c651f824009cc9366c29b5b128ec04"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762657.4838245, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_fct_weather\"", "raw_code": "WITH s_fct_weather_not_null_weather_pk AS (\r\n    SELECT\r\n        'weather_pk' AS tested_field_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_not_null_weather_pk') }}\r\n),\r\n\r\ns_fct_weather_unique_weather_pk AS (\r\n    SELECT\r\n        'weather_pk' AS tested_field_nm\r\n        ,'unique' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_unique_weather_pk') }}\r\n),\r\n\r\ns_fct_weather_accepted_range_m_valid_dt AS (\r\n    SELECT\r\n        'm_valid_dt' AS tested_field_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_accepted_range_m_valid_dt') }}\r\n),\r\n\r\ns_fct_weather_accepted_range_temp_c_no AS (\r\n    SELECT\r\n        'temp_c_no' AS tested_field_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_accepted_range_temp_c_no') }}\r\n),\r\n\r\ns_fct_weather_accepted_values_country_cd AS (\r\n    SELECT\r\n        'temp_c_no' AS tested_field_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_accepted_range_temp_c_no') }}\r\n),\r\n\r\ns_fct_weather_invalid_cloud_coverage_cd AS (\r\n    SELECT\r\n        'cloud_coverage_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_cloud_coverage_cd') }}\r\n),\r\n\r\ns_fct_weather_invalid_humidity_cd AS (\r\n    SELECT\r\n        'humidity_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_humidity_cd') }}\r\n),\r\n\r\ns_fct_weather_invalid_rain_chance_cd AS (\r\n    SELECT\r\n        'rain_chance_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_rain_chance_cd') }}\r\n),\r\n\r\ns_fct_weather_invalid_snow_chance_cd AS (\r\n    SELECT\r\n        'snow_chance_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_snow_chance_cd') }}\r\n),\r\n\r\ns_fct_weather_invalid_temp_feelslike_cd AS (\r\n    SELECT\r\n        'temp_feelslike_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_temp_feelslike_cd') }}\r\n),\r\n\r\ns_fct_weather_rel_s_dim_city_city_fk AS (\r\n    SELECT\r\n        'city_fk' AS tested_field_nm\r\n        ,'relationships' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_rel_s_dim_city_city_fk') }}\r\n),\r\n\r\nunion_tests AS (\r\n    SELECT * FROM s_fct_weather_not_null_weather_pk\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_unique_weather_pk\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_accepted_range_m_valid_dt\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_accepted_range_temp_c_no\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_accepted_values_country_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_cloud_coverage_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_humidity_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_rain_chance_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_snow_chance_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_temp_feelslike_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_rel_s_dim_city_city_fk\r\n)\r\n\r\nSELECT * FROM union_tests", "language": "sql", "refs": [], "sources": [["dbt_dq_test", "s_fct_weather_invalid_rain_chance_cd"], ["dbt_dq_test", "s_fct_weather_rel_s_dim_city_city_fk"], ["dbt_dq_test", "s_fct_weather_invalid_humidity_cd"], ["dbt_dq_test", "s_fct_weather_not_null_weather_pk"], ["dbt_dq_test", "s_fct_weather_invalid_temp_feelslike_cd"], ["dbt_dq_test", "s_fct_weather_invalid_cloud_coverage_cd"], ["dbt_dq_test", "s_fct_weather_accepted_range_m_valid_dt"], ["dbt_dq_test", "s_fct_weather_invalid_snow_chance_cd"], ["dbt_dq_test", "s_fct_weather_accepted_range_temp_c_no"], ["dbt_dq_test", "s_fct_weather_unique_weather_pk"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_rain_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_humidity_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_not_null_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_temp_feelslike_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_cloud_coverage_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_snow_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_temp_c_no", "source.weather_dbt.dbt_dq_test.s_fct_weather_unique_weather_pk"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_s_fct_weather_forecast": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_s_fct_weather_forecast", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_s_fct_weather_forecast.sql", "original_file_path": "models\\040_dq\\dq_s_fct_weather_forecast.sql", "unique_id": "model.weather_dbt.dq_s_fct_weather_forecast", "fqn": ["weather_dbt", "040_dq", "dq_s_fct_weather_forecast"], "alias": "dq_s_fct_weather_forecast", "checksum": {"name": "sha256", "checksum": "defc498061c4a27999dd29ae3f2bd746d73dd629699883d0a541b2d6177966ec"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762657.485881, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_fct_weather_forecast\"", "raw_code": "WITH s_fct_weather_forecast_not_null_weather_pk AS (\r\n    SELECT\r\n        'weather_pk' AS tested_field_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_not_null_weather_pk') }}\r\n),\r\n\r\ns_fct_weather_forecast_unique_weather_pk AS (\r\n    SELECT\r\n        'weather_pk' AS tested_field_nm\r\n        ,'unique' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_unique_weather_pk') }}\r\n),\r\n\r\ns_fct_weather_forecast_accepted_range_m_valid_dt AS (\r\n    SELECT\r\n        'm_valid_dt' AS tested_field_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_accepted_range_m_valid_dt') }}\r\n),\r\n\r\ns_fct_weather_forecast_accepted_range_temp_c_no AS (\r\n    SELECT\r\n        'temp_c_no' AS tested_field_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_accepted_range_temp_c_no') }}\r\n),\r\n\r\ns_fct_weather_forecast_accepted_values_country_cd AS (\r\n    SELECT\r\n        'temp_c_no' AS tested_field_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_accepted_range_temp_c_no') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_cloud_coverage_cd AS (\r\n    SELECT\r\n        'cloud_coverage_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_cloud_coverage_cd') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_humidity_cd AS (\r\n    SELECT\r\n        'humidity_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_humidity_cd') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_rain_chance_cd AS (\r\n    SELECT\r\n        'rain_chance_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_rain_chance_cd') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_snow_chance_cd AS (\r\n    SELECT\r\n        'snow_chance_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_snow_chance_cd') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_temp_feelslike_cd AS (\r\n    SELECT\r\n        'temp_feelslike_cd' AS tested_field_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_temp_feelslike_cd') }}\r\n),\r\n\r\ns_fct_weather_forecast_rel_s_dim_city_city_fk AS (\r\n    SELECT\r\n        'city_fk' AS tested_field_nm\r\n        ,'relationships' AS test_type_cd\r\n        ,*\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_rel_s_dim_city_city_fk') }}\r\n\r\n),\r\n\r\nunion_tests AS (\r\n    SELECT * FROM s_fct_weather_forecast_not_null_weather_pk\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_unique_weather_pk\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_accepted_range_m_valid_dt\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_accepted_range_temp_c_no\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_accepted_values_country_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_cloud_coverage_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_humidity_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_rain_chance_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_snow_chance_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_temp_feelslike_cd\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_rel_s_dim_city_city_fk\r\n)\r\n\r\nSELECT * FROM union_tests", "language": "sql", "refs": [], "sources": [["dbt_dq_test", "s_fct_weather_forecast_invalid_temp_feelslike_cd"], ["dbt_dq_test", "s_fct_weather_forecast_invalid_rain_chance_cd"], ["dbt_dq_test", "s_fct_weather_forecast_accepted_range_m_valid_dt"], ["dbt_dq_test", "s_fct_weather_forecast_invalid_humidity_cd"], ["dbt_dq_test", "s_fct_weather_forecast_not_null_weather_pk"], ["dbt_dq_test", "s_fct_weather_forecast_invalid_cloud_coverage_cd"], ["dbt_dq_test", "s_fct_weather_forecast_accepted_range_temp_c_no"], ["dbt_dq_test", "s_fct_weather_forecast_rel_s_dim_city_city_fk"], ["dbt_dq_test", "s_fct_weather_forecast_invalid_snow_chance_cd"], ["dbt_dq_test", "s_fct_weather_forecast_unique_weather_pk"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_temp_feelslike_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_rain_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_humidity_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_not_null_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_cloud_coverage_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_temp_c_no", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_snow_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_unique_weather_pk"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.weather_dbt.s_fct_weather_invalid_cloud_coverage_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_cloud_coverage_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_invalid_cloud_coverage_cd.sql", "original_file_path": "tests\\s_fct_weather_invalid_cloud_coverage_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_invalid_cloud_coverage_cd", "fqn": ["weather_dbt", "s_fct_weather_invalid_cloud_coverage_cd"], "alias": "s_fct_weather_invalid_cloud_coverage_cd", "checksum": {"name": "sha256", "checksum": "7d8660960d69276c39ca9f57743b5f1b62142c3d8db99c4ad97fb6491be64e64"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.503001, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_cloud_coverage_cd\"", "raw_code": "WITH invalid_cloud_coverage_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather') }}\r\n    WHERE \r\n        ( cloud_coverage_pct BETWEEN 0 AND 20 AND cloud_coverage_cd NOT IN ('Clear'))\r\n        OR \r\n        ( cloud_coverage_pct BETWEEN 21 AND 40 AND cloud_coverage_cd NOT IN ('Partly Cloudy'))\r\n        OR \r\n        ( cloud_coverage_pct BETWEEN 41 AND 60 AND cloud_coverage_cd NOT IN ('Cloudy'))\r\n        OR \r\n        ( cloud_coverage_pct BETWEEN 61 AND 80 AND cloud_coverage_cd NOT IN ('Overcast'))\r\n        OR \r\n        ( cloud_coverage_pct BETWEEN 81 AND 100 AND cloud_coverage_cd NOT IN ('Completely Overcast'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_cloud_coverage_cd", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.weather_dbt.s_fct_weather_invalid_humidity_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_humidity_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_invalid_humidity_cd.sql", "original_file_path": "tests\\s_fct_weather_invalid_humidity_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_invalid_humidity_cd", "fqn": ["weather_dbt", "s_fct_weather_invalid_humidity_cd"], "alias": "s_fct_weather_invalid_humidity_cd", "checksum": {"name": "sha256", "checksum": "91e92352be46c2c376c196dd58aac7a6a37c5dbdc468d33dc12231d25e9ea028"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.506037, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_humidity_cd\"", "raw_code": "WITH invalid_humidity_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather') }}\r\n    WHERE \r\n        ( humidity_pct BETWEEN 0 AND 20 AND humidity_cd NOT IN ('Very Low'))\r\n        OR \r\n        ( humidity_pct BETWEEN 21 AND 40 AND humidity_cd NOT IN ('Low'))\r\n        OR \r\n        ( humidity_pct BETWEEN 41 AND 60 AND humidity_cd NOT IN ('Moderate'))\r\n        OR \r\n        ( humidity_pct BETWEEN 61 AND 80 AND humidity_cd NOT IN ('High'))\r\n        OR \r\n        ( humidity_pct BETWEEN 81 AND 100 AND humidity_cd NOT IN ('Very High'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_humidity_cd", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.weather_dbt.s_fct_weather_invalid_rain_chance_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_rain_chance_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_invalid_rain_chance_cd.sql", "original_file_path": "tests\\s_fct_weather_invalid_rain_chance_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_invalid_rain_chance_cd", "fqn": ["weather_dbt", "s_fct_weather_invalid_rain_chance_cd"], "alias": "s_fct_weather_invalid_rain_chance_cd", "checksum": {"name": "sha256", "checksum": "bf853e9fd7b6f0de13578ba25a73dbd0c533f87e1976501c6ef40a89be65abd0"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5094073, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_rain_chance_cd\"", "raw_code": "WITH invalid_rain_chance_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather') }}\r\n    WHERE \r\n        ( rain_chance_pct BETWEEN 0 AND 20 AND rain_chance_cd NOT IN ('Very Low'))\r\n        OR \r\n        ( rain_chance_pct BETWEEN 21 AND 40 AND rain_chance_cd NOT IN ('Low'))\r\n        OR \r\n        ( rain_chance_pct BETWEEN 41 AND 60 AND rain_chance_cd NOT IN ('Moderate'))\r\n        OR \r\n        ( rain_chance_pct BETWEEN 61 AND 80 AND rain_chance_cd NOT IN ('High'))\r\n        OR \r\n        ( rain_chance_pct BETWEEN 81 AND 100 AND rain_chance_cd NOT IN ('Very High'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_rain_chance_cd", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.weather_dbt.s_fct_weather_invalid_snow_chance_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_snow_chance_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_invalid_snow_chance_cd.sql", "original_file_path": "tests\\s_fct_weather_invalid_snow_chance_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_invalid_snow_chance_cd", "fqn": ["weather_dbt", "s_fct_weather_invalid_snow_chance_cd"], "alias": "s_fct_weather_invalid_snow_chance_cd", "checksum": {"name": "sha256", "checksum": "dd70af619910178bd65221390da91e99fabbb1cdb89192cf50dd6013a4b3a969"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5124037, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_snow_chance_cd\"", "raw_code": "WITH invalid_snow_chance_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather') }}\r\n    WHERE \r\n        ( snow_chance_pct BETWEEN 0 AND 20 AND snow_chance_cd NOT IN ('Very Low'))\r\n        OR \r\n        ( snow_chance_pct BETWEEN 21 AND 40 AND snow_chance_cd NOT IN ('Low'))\r\n        OR \r\n        ( snow_chance_pct BETWEEN 41 AND 60 AND snow_chance_cd NOT IN ('Moderate'))\r\n        OR \r\n        ( snow_chance_pct BETWEEN 61 AND 80 AND snow_chance_cd NOT IN ('High'))\r\n        OR \r\n        ( snow_chance_pct BETWEEN 81 AND 100 AND snow_chance_cd NOT IN ('Very High'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_snow_chance_cd", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.weather_dbt.s_fct_weather_invalid_temp_feelslike_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_temp_feelslike_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_invalid_temp_feelslike_cd.sql", "original_file_path": "tests\\s_fct_weather_invalid_temp_feelslike_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_invalid_temp_feelslike_cd", "fqn": ["weather_dbt", "s_fct_weather_invalid_temp_feelslike_cd"], "alias": "s_fct_weather_invalid_temp_feelslike_cd", "checksum": {"name": "sha256", "checksum": "c22e6c92de4432fa3c26a7d3f078c6d4ef11bc825e9df9dbcb6d1716930922d2"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5144107, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_temp_feelslike_cd\"", "raw_code": "WITH invalid_temp_feelslike_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather') }}\r\n    WHERE \r\n        ( temp_feelslike_no <= 0 AND temp_feelslike_cd NOT IN ('Very Cold'))\r\n        OR \r\n        ( temp_feelslike_no BETWEEN 1 AND 10 AND temp_feelslike_cd NOT IN ('Cold'))\r\n        OR \r\n        ( temp_feelslike_no BETWEEN 11 AND 20 AND temp_feelslike_cd NOT IN ('Cool'))\r\n        OR \r\n        ( temp_feelslike_no BETWEEN 21 AND 30 AND temp_feelslike_cd NOT IN ('Warm'))\r\n        OR \r\n        ( temp_feelslike_no BETWEEN 31 AND 40 AND temp_feelslike_cd NOT IN ('Hot'))\r\n        OR \r\n        ( temp_feelslike_no > 41 AND temp_feelslike_cd NOT IN ('Very Hot'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_temp_feelslike_cd", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.weather_dbt.city": {"database": "wh_weather", "schema": "dbt", "name": "city", "resource_type": "seed", "package_name": "weather_dbt", "path": "city.csv", "original_file_path": "seeds\\city.csv", "unique_id": "seed.weather_dbt.city", "fqn": ["weather_dbt", "city"], "alias": "city", "checksum": {"name": "sha256", "checksum": "b53daaf83c2a508f783d035962cdff2364e56cce21e6579706f1561f6236a6e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1745762657.5199878, "relation_name": "\"wh_weather\".\"dbt\".\"city\"", "raw_code": "", "root_path": "c:\\Users\\D\u00e1vidDobos\\szakdoga\\weather_dbt", "depends_on": {"macros": []}}, "seed.weather_dbt.country": {"database": "wh_weather", "schema": "dbt", "name": "country", "resource_type": "seed", "package_name": "weather_dbt", "path": "country.csv", "original_file_path": "seeds\\country.csv", "unique_id": "seed.weather_dbt.country", "fqn": ["weather_dbt", "country"], "alias": "country", "checksum": {"name": "sha256", "checksum": "541165f8f9bac1a14c5533ad3cc561f244b147919695dfa36bf1d302f9db6981"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1745762657.5199878, "relation_name": "\"wh_weather\".\"dbt\".\"country\"", "raw_code": "", "root_path": "c:\\Users\\D\u00e1vidDobos\\szakdoga\\weather_dbt", "depends_on": {"macros": []}}, "test.weather_dbt.s_dim_city_not_null_city_pk.eb2d764e4c": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_dim_city_not_null_city_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_dim_city_not_null_city_pk.sql", "original_file_path": "models\\020_silver\\s_dim_city.yml", "unique_id": "test.weather_dbt.s_dim_city_not_null_city_pk.eb2d764e4c", "fqn": ["weather_dbt", "020_silver", "s_dim_city_not_null_city_pk"], "alias": "s_dim_city_not_null_city_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5516784, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_not_null_city_pk\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city_pk", "file_key_name": "models.s_dim_city", "attached_node": "model.weather_dbt.s_dim_city", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "city_pk", "model": "{{ get_where_subquery(ref('s_dim_city')) }}"}, "namespace": null}}, "test.weather_dbt.s_dim_city_unique_city_pk.5d1fec09e8": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_dim_city_unique_city_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_dim_city_unique_city_pk.sql", "original_file_path": "models\\020_silver\\s_dim_city.yml", "unique_id": "test.weather_dbt.s_dim_city_unique_city_pk.5d1fec09e8", "fqn": ["weather_dbt", "020_silver", "s_dim_city_unique_city_pk"], "alias": "s_dim_city_unique_city_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5516784, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_unique_city_pk\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city_pk", "file_key_name": "models.s_dim_city", "attached_node": "model.weather_dbt.s_dim_city", "test_metadata": {"name": "unique", "kwargs": {"column_name": "city_pk", "model": "{{ get_where_subquery(ref('s_dim_city')) }}"}, "namespace": null}}, "test.weather_dbt.s_dim_city_accepted_values_country_cd.8db2de7442": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_dim_city_accepted_values_country_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_dim_city_accepted_values_country_cd.sql", "original_file_path": "models\\020_silver\\s_dim_city.yml", "unique_id": "test.weather_dbt.s_dim_city_accepted_values_country_cd.8db2de7442", "fqn": ["weather_dbt", "020_silver", "s_dim_city_accepted_values_country_cd"], "alias": "s_dim_city_accepted_values_country_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.559261, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_accepted_values_country_cd\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_cd", "file_key_name": "models.s_dim_city", "attached_node": "model.weather_dbt.s_dim_city", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HU"], "column_name": "country_cd", "model": "{{ get_where_subquery(ref('s_dim_city')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_astro_accepted_range_m_valid_dt.ce54645416": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_accepted_range_m_valid_dt", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_accepted_range_m_valid_dt.sql", "original_file_path": "models\\020_silver\\s_fct_astro.yml", "unique_id": "test.weather_dbt.s_fct_astro_accepted_range_m_valid_dt.ce54645416", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_accepted_range_m_valid_dt"], "alias": "s_fct_astro_accepted_range_m_valid_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5624292, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_range_m_valid_dt\"", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_astro", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_astro"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "m_valid_dt", "file_key_name": "models.s_fct_astro", "attached_node": "model.weather_dbt.s_fct_astro", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "CAST(DATEFROMPARTS(YEAR(GETDATE()), 1, 1) AS DATE)", "max_value": "CAST(DATEFROMPARTS(YEAR(GETDATE()), 12, 31) AS DATE)", "column_name": "m_valid_dt", "model": "{{ get_where_subquery(ref('s_fct_astro')) }}"}, "namespace": "dbt_utils"}}, "test.weather_dbt.s_fct_astro_not_null_astro_pk.bc7a6a8275": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_not_null_astro_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_not_null_astro_pk.sql", "original_file_path": "models\\020_silver\\s_fct_astro.yml", "unique_id": "test.weather_dbt.s_fct_astro_not_null_astro_pk.bc7a6a8275", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_not_null_astro_pk"], "alias": "s_fct_astro_not_null_astro_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5644329, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_not_null_astro_pk\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_astro", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_astro"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "astro_pk", "file_key_name": "models.s_fct_astro", "attached_node": "model.weather_dbt.s_fct_astro", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "astro_pk", "model": "{{ get_where_subquery(ref('s_fct_astro')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_astro_unique_astro_pk.ae4a162f31": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_unique_astro_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_unique_astro_pk.sql", "original_file_path": "models\\020_silver\\s_fct_astro.yml", "unique_id": "test.weather_dbt.s_fct_astro_unique_astro_pk.ae4a162f31", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_unique_astro_pk"], "alias": "s_fct_astro_unique_astro_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5697277, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_unique_astro_pk\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_astro", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_astro"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "astro_pk", "file_key_name": "models.s_fct_astro", "attached_node": "model.weather_dbt.s_fct_astro", "test_metadata": {"name": "unique", "kwargs": {"column_name": "astro_pk", "model": "{{ get_where_subquery(ref('s_fct_astro')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_astro_rel_s_dim_city_city_fk.bbbc0c2336": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_rel_s_dim_city_city_fk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_rel_s_dim_city_city_fk.sql", "original_file_path": "models\\020_silver\\s_fct_astro.yml", "unique_id": "test.weather_dbt.s_fct_astro_rel_s_dim_city_city_fk.bbbc0c2336", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_rel_s_dim_city_city_fk"], "alias": "s_fct_astro_rel_s_dim_city_city_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5717165, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_rel_s_dim_city_city_fk\"", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}, {"name": "s_fct_astro", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_astro"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city_fk", "file_key_name": "models.s_fct_astro", "attached_node": "model.weather_dbt.s_fct_astro", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('s_dim_city')", "field": "city_pk", "column_name": "city_fk", "model": "{{ get_where_subquery(ref('s_fct_astro')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_astro_accepted_values_country_cd.acc57e5fe8": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_accepted_values_country_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_accepted_values_country_cd.sql", "original_file_path": "models\\020_silver\\s_fct_astro.yml", "unique_id": "test.weather_dbt.s_fct_astro_accepted_values_country_cd.acc57e5fe8", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_accepted_values_country_cd"], "alias": "s_fct_astro_accepted_values_country_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5748637, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_values_country_cd\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_astro", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_astro"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_cd", "file_key_name": "models.s_fct_astro", "attached_node": "model.weather_dbt.s_fct_astro", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HU"], "column_name": "country_cd", "model": "{{ get_where_subquery(ref('s_fct_astro')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_astro_forecast_accepted_range_m_valid_dt.6b23ed4e3a": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_accepted_range_m_valid_dt", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_forecast_accepted_range_m_valid_dt.sql", "original_file_path": "models\\020_silver\\s_fct_astro_forecast.yml", "unique_id": "test.weather_dbt.s_fct_astro_forecast_accepted_range_m_valid_dt.6b23ed4e3a", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_forecast_accepted_range_m_valid_dt"], "alias": "s_fct_astro_forecast_accepted_range_m_valid_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5748637, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_range_m_valid_dt\"", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_astro_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_astro_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "m_valid_dt", "file_key_name": "models.s_fct_astro_forecast", "attached_node": "model.weather_dbt.s_fct_astro_forecast", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "CAST(DATEFROMPARTS(YEAR(GETDATE()), 1, 1) AS DATE)", "max_value": "CAST(DATEFROMPARTS(YEAR(GETDATE()), 12, 31) AS DATE)", "column_name": "m_valid_dt", "model": "{{ get_where_subquery(ref('s_fct_astro_forecast')) }}"}, "namespace": "dbt_utils"}}, "test.weather_dbt.s_fct_astro_forecast_not_null_astro_forecast_pk.04e9609d7f": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_not_null_astro_forecast_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_forecast_not_null_astro_forecast_pk.sql", "original_file_path": "models\\020_silver\\s_fct_astro_forecast.yml", "unique_id": "test.weather_dbt.s_fct_astro_forecast_not_null_astro_forecast_pk.04e9609d7f", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_forecast_not_null_astro_forecast_pk"], "alias": "s_fct_astro_forecast_not_null_astro_forecast_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5748637, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_not_null_astro_forecast_pk\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_astro_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_astro_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "astro_forecast_pk", "file_key_name": "models.s_fct_astro_forecast", "attached_node": "model.weather_dbt.s_fct_astro_forecast", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "astro_forecast_pk", "model": "{{ get_where_subquery(ref('s_fct_astro_forecast')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_astro_forecast_unique_astro_forecast_pk.24e6af2a60": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_unique_astro_forecast_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_forecast_unique_astro_forecast_pk.sql", "original_file_path": "models\\020_silver\\s_fct_astro_forecast.yml", "unique_id": "test.weather_dbt.s_fct_astro_forecast_unique_astro_forecast_pk.24e6af2a60", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_forecast_unique_astro_forecast_pk"], "alias": "s_fct_astro_forecast_unique_astro_forecast_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5837111, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_unique_astro_forecast_pk\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_astro_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_astro_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "astro_forecast_pk", "file_key_name": "models.s_fct_astro_forecast", "attached_node": "model.weather_dbt.s_fct_astro_forecast", "test_metadata": {"name": "unique", "kwargs": {"column_name": "astro_forecast_pk", "model": "{{ get_where_subquery(ref('s_fct_astro_forecast')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_astro_forecast_rel_s_dim_city_city_fk.40ba732794": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_rel_s_dim_city_city_fk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_forecast_rel_s_dim_city_city_fk.sql", "original_file_path": "models\\020_silver\\s_fct_astro_forecast.yml", "unique_id": "test.weather_dbt.s_fct_astro_forecast_rel_s_dim_city_city_fk.40ba732794", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_forecast_rel_s_dim_city_city_fk"], "alias": "s_fct_astro_forecast_rel_s_dim_city_city_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5837111, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_rel_s_dim_city_city_fk\"", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}, {"name": "s_fct_astro_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_astro_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city_fk", "file_key_name": "models.s_fct_astro_forecast", "attached_node": "model.weather_dbt.s_fct_astro_forecast", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('s_dim_city')", "field": "city_pk", "column_name": "city_fk", "model": "{{ get_where_subquery(ref('s_fct_astro_forecast')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_astro_forecast_accepted_values_country_cd.1e90bc9c48": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_accepted_values_country_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_astro_forecast_accepted_values_country_cd.sql", "original_file_path": "models\\020_silver\\s_fct_astro_forecast.yml", "unique_id": "test.weather_dbt.s_fct_astro_forecast_accepted_values_country_cd.1e90bc9c48", "fqn": ["weather_dbt", "020_silver", "s_fct_astro_forecast_accepted_values_country_cd"], "alias": "s_fct_astro_forecast_accepted_values_country_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762657.5837111, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_values_country_cd\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_astro_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_astro_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_cd", "file_key_name": "models.s_fct_astro_forecast", "attached_node": "model.weather_dbt.s_fct_astro_forecast", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HU"], "column_name": "country_cd", "model": "{{ get_where_subquery(ref('s_fct_astro_forecast')) }}"}, "namespace": null}}, "model.weather_dbt.g_fct_weather_avg": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_fct_weather_avg", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_fct_weather_avg.sql", "original_file_path": "models\\030_gold\\g_fct_weather_avg.sql", "unique_id": "model.weather_dbt.g_fct_weather_avg", "fqn": ["weather_dbt", "030_gold", "g_fct_weather_avg"], "alias": "g_fct_weather_avg", "checksum": {"name": "sha256", "checksum": "1cf0ef343c8069d2769a8c67ff5ecfebb886fd6fec2319e1968ff3f6918c63bd"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762887.7389755, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_weather_avg\"", "raw_code": "WITH s_fct_weather AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,weather_pk\r\n        ,city_nm\r\n        ,city_fk\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        -- Group to the start of the month\r\n--       ,CAST(YEAR(forecast_dt) AS VARCHAR) + '-' + RIGHT('0' + CAST(MONTH(forecast_dt) AS VARCHAR), 2) + '-01' AS month_dt\r\n        ,temp_c_no\r\n        ,temp_feelslike_no\r\n        ,cloud_coverage_pct\r\n        ,precip_mm_no\r\n        ,humidity_pct\r\n        ,gust_kph_no\r\n        ,heatindex_c_no\r\n        ,wind_kph_no\r\n        ,windchill_c_no\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\n-- Step 1: Pre-aggregate by city, country, and m_valid_dt\r\ndaily_aggregates AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,AVG(temp_c_no) AS temp_c_avg\r\n        ,AVG(cloud_coverage_pct) AS cloud_coverage_avg\r\n        ,AVG(precip_mm_no) AS precipitation_mm_avg\r\n        ,AVG(humidity_pct) AS humidity_avg\r\n        ,AVG(gust_kph_no) AS gust_kph_avg\r\n        ,AVG(heatindex_c_no) AS heatindex_c_no_avg\r\n        ,AVG(wind_kph_no) AS wind_kph_no_avg\r\n        ,AVG(windchill_c_no) AS windchill_c_no_avg\r\n    FROM s_fct_weather\r\n    GROUP BY m_valid_dt, city_nm, city_fk, county_nm, country_cd\r\n),\r\n\r\n-- Step 2: Calculate rolling averages\r\nrolling_averages AS (\r\n    SELECT\r\n        city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,m_valid_dt\r\n        -- Rolling averages (3 days)\r\n        ,AVG(temp_c_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS temperature_c_avg_3d\r\n\r\n        ,AVG(cloud_coverage_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS cloud_coverage_avg_3d\r\n\r\n        ,AVG(precipitation_mm_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS precipitation_mm_avg_3d\r\n\r\n        ,AVG(humidity_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS humidity_avg_3d\r\n\r\n        ,AVG(gust_kph_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS gust_kph_avg_3d\r\n\r\n        ,AVG(heatindex_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS heatindex_c_no_avg_3d\r\n\r\n        ,AVG(wind_kph_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS wind_kph_no_avg_3d\r\n\r\n        ,AVG(windchill_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS windchill_c_no_avg_3d\r\n\r\n-- Rolling averages (1 week = 7 days)\r\n        ,AVG(temp_c_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS temperature_c_avg_1w\r\n\r\n        ,AVG(cloud_coverage_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS cloud_coverage_avg_1w\r\n\r\n        ,AVG(precipitation_mm_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS precipitation_mm_avg_1w\r\n\r\n        ,AVG(humidity_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS humidity_avg_1w\r\n\r\n        ,AVG(gust_kph_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS gust_kph_avg_1w\r\n\r\n        ,AVG(heatindex_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS heatindex_c_no_avg_1w\r\n\r\n        ,AVG(wind_kph_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS wind_kph_no_avg_1w\r\n\r\n        ,AVG(windchill_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS windchill_c_no_avg_1w\r\n\r\n-- Rolling averages (2 weeks = 14 days)\r\n        ,AVG(temp_c_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS temperature_c_avg_2w\r\n\r\n        ,AVG(cloud_coverage_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS cloud_coverage_avg_2w\r\n\r\n        ,AVG(precipitation_mm_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS precipitation_mm_avg_2w\r\n\r\n        ,AVG(humidity_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS humidity_avg_2w\r\n\r\n        ,AVG(gust_kph_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS gust_kph_avg_2w\r\n\r\n        ,AVG(heatindex_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS heatindex_c_no_avg_2w\r\n\r\n        ,AVG(wind_kph_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS wind_kph_no_avg_2w\r\n\r\n        ,AVG(windchill_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS windchill_c_no_avg_2w\r\n    FROM daily_aggregates\r\n),\r\n\r\nunit_conversion AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,{{ add_unit_conversions_to_cels('temperature_c_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_cels('temperature_c_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_cels('temperature_c_avg_2w') }}\r\n        ,cloud_coverage_avg_3d\r\n        ,cloud_coverage_avg_1w\r\n        ,cloud_coverage_avg_2w\r\n        ,precipitation_mm_avg_3d\r\n        ,precipitation_mm_avg_1w\r\n        ,precipitation_mm_avg_2w\r\n        ,humidity_avg_3d\r\n        ,humidity_avg_1w\r\n        ,humidity_avg_2w\r\n        ,{{ add_unit_conversions_to_km('gust_kph_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_km('gust_kph_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_km('gust_kph_avg_2w') }}\r\n        ,{{ add_unit_conversions_to_cels('heatindex_c_no_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_cels('heatindex_c_no_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_cels('heatindex_c_no_avg_2w') }}\r\n        ,{{ add_unit_conversions_to_km('wind_kph_no_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_km('wind_kph_no_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_km('wind_kph_no_avg_2w') }}\r\n        ,{{ add_unit_conversions_to_cels('windchill_c_no_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_cels('windchill_c_no_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_cels('windchill_c_no_avg_2w') }}\r\n    FROM rolling_averages\r\n)\r\n\r\nSELECT * FROM unit_conversion", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.add_unit_conversions_to_cels", "macro.weather_dbt.add_unit_conversions_to_km"], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_fct_weather_forecast_avg": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_fct_weather_forecast_avg", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_fct_weather_forecast_avg.sql", "original_file_path": "models\\030_gold\\g_fct_weather_forecast_avg.sql", "unique_id": "model.weather_dbt.g_fct_weather_forecast_avg", "fqn": ["weather_dbt", "030_gold", "g_fct_weather_forecast_avg"], "alias": "g_fct_weather_forecast_avg", "checksum": {"name": "sha256", "checksum": "7a229b6ea27e0674db46fd860664a2932385de420c033201d239369b07aaf5a3"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762887.759274, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_weather_forecast_avg\"", "raw_code": "WITH s_fct_weather_forecast AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,weather_pk\r\n        ,city_nm\r\n        ,city_fk\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        -- Group to the start of the month\r\n--       ,CAST(YEAR(forecast_dt) AS VARCHAR) + '-' + RIGHT('0' + CAST(MONTH(forecast_dt) AS VARCHAR), 2) + '-01' AS month_dt\r\n        ,temp_c_no\r\n        ,temp_feelslike_no\r\n        ,cloud_coverage_pct\r\n        ,precip_mm_no\r\n        ,humidity_pct\r\n        ,gust_kph_no\r\n        ,heatindex_c_no\r\n        ,wind_kph_no\r\n        ,windchill_c_no\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\n-- Step 1: Pre-aggregate by city, country, and m_valid_dt\r\ndaily_aggregates AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,AVG(temp_c_no) AS temp_c_avg\r\n        ,AVG(cloud_coverage_pct) AS cloud_coverage_avg\r\n        ,AVG(precip_mm_no) AS precipitation_mm_avg\r\n        ,AVG(humidity_pct) AS humidity_avg\r\n        ,AVG(gust_kph_no) AS gust_kph_avg\r\n        ,AVG(heatindex_c_no) AS heatindex_c_no_avg\r\n        ,AVG(wind_kph_no) AS wind_kph_no_avg\r\n        ,AVG(windchill_c_no) AS windchill_c_no_avg\r\n    FROM s_fct_weather_forecast\r\n    GROUP BY m_valid_dt, city_nm, city_fk, county_nm, country_cd, forecast_dt\r\n),\r\n\r\n-- Step 2: Calculate rolling averages\r\nrolling_averages AS (\r\n    SELECT\r\n        city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,m_valid_dt\r\n        -- Rolling averages (3 days)\r\n        ,AVG(temp_c_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS temperature_c_avg_3d\r\n\r\n        ,AVG(cloud_coverage_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS cloud_coverage_avg_3d\r\n\r\n        ,AVG(precipitation_mm_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS precipitation_mm_avg_3d\r\n\r\n        ,AVG(humidity_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS humidity_avg_3d\r\n\r\n        ,AVG(gust_kph_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS gust_kph_avg_3d\r\n\r\n        ,AVG(heatindex_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS heatindex_c_no_avg_3d\r\n\r\n        ,AVG(wind_kph_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS wind_kph_no_avg_3d\r\n\r\n        ,AVG(windchill_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\r\n        ) AS windchill_c_no_avg_3d\r\n-- Rolling averages (1 week = 7 days)\r\n        ,AVG(temp_c_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS temperature_c_avg_1w\r\n\r\n        ,AVG(cloud_coverage_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS cloud_coverage_avg_1w\r\n\r\n        ,AVG(precipitation_mm_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS precipitation_mm_avg_1w\r\n\r\n        ,AVG(humidity_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS humidity_avg_1w\r\n\r\n        ,AVG(gust_kph_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS gust_kph_avg_1w\r\n\r\n        ,AVG(heatindex_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS heatindex_c_no_avg_1w\r\n\r\n        ,AVG(wind_kph_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS wind_kph_no_avg_1w\r\n\r\n        ,AVG(windchill_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\r\n        ) AS windchill_c_no_avg_1w\r\n-- Rolling averages (2 weeks = 14 days)\r\n        ,AVG(temp_c_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS temperature_c_avg_2w\r\n\r\n        ,AVG(cloud_coverage_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS cloud_coverage_avg_2w\r\n\r\n        ,AVG(precipitation_mm_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS precipitation_mm_avg_2w\r\n\r\n        ,AVG(humidity_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS humidity_avg_2w\r\n\r\n        ,AVG(gust_kph_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS gust_kph_avg_2w\r\n\r\n        ,AVG(heatindex_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS heatindex_c_no_avg_2w\r\n\r\n        ,AVG(wind_kph_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS wind_kph_no_avg_2w\r\n\r\n        ,AVG(windchill_c_no_avg) OVER (\r\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\r\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\r\n        ) AS windchill_c_no_avg_2w\r\n    FROM daily_aggregates\r\n),\r\n\r\nunit_conversion AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,county_nm\r\n        ,country_cd\r\n        ,{{ add_unit_conversions_to_cels('temperature_c_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_cels('temperature_c_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_cels('temperature_c_avg_2w') }}\r\n        ,cloud_coverage_avg_3d\r\n        ,cloud_coverage_avg_1w\r\n        ,cloud_coverage_avg_2w\r\n        ,precipitation_mm_avg_3d\r\n        ,precipitation_mm_avg_1w\r\n        ,precipitation_mm_avg_2w\r\n        ,humidity_avg_3d\r\n        ,humidity_avg_1w\r\n        ,humidity_avg_2w\r\n        ,{{ add_unit_conversions_to_km('gust_kph_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_km('gust_kph_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_km('gust_kph_avg_2w') }}\r\n        ,{{ add_unit_conversions_to_cels('heatindex_c_no_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_cels('heatindex_c_no_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_cels('heatindex_c_no_avg_2w') }}\r\n        ,{{ add_unit_conversions_to_km('wind_kph_no_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_km('wind_kph_no_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_km('wind_kph_no_avg_2w') }}\r\n        ,{{ add_unit_conversions_to_cels('windchill_c_no_avg_3d') }}\r\n        ,{{ add_unit_conversions_to_cels('windchill_c_no_avg_1w') }}\r\n        ,{{ add_unit_conversions_to_cels('windchill_c_no_avg_2w') }}\r\n    FROM rolling_averages\r\n)\r\n\r\nSELECT * FROM unit_conversion", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.add_unit_conversions_to_cels", "macro.weather_dbt.add_unit_conversions_to_km"], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_business_tests_summary": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_business_tests_summary", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_business_tests_summary.sql", "original_file_path": "models\\040_dq\\dq_business_tests_summary.sql", "unique_id": "model.weather_dbt.dq_business_tests_summary", "fqn": ["weather_dbt", "040_dq", "dq_business_tests_summary"], "alias": "dq_business_tests_summary", "checksum": {"name": "sha256", "checksum": "e15a6cbb680accd9d9957c6397acb9652bff924af48356271bf72c1f5ba48625"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762887.765543, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_business_tests_summary\"", "raw_code": "WITH dq_business_tests AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('dq_business_tests') }}\r\n),\r\n\r\nunique_tests AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,table_nm\r\n        ,test_type_cd\r\n        ,tested_field_nm\r\n        ,SUM(failed_record_cnt) AS failed_records_cnt\r\n    FROM dq_business_tests\r\n    GROUP BY m_valid_dt, table_nm, test_type_cd, tested_field_nm\r\n),\r\n\r\nsummary AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,test_type_cd\r\n        ,COUNT(*) AS test_cnt \r\n        ,SUM(CASE WHEN failed_records_cnt > 0 THEN 1 ELSE 0 END) AS failed_test_cnt\r\n        ,SUM(CASE WHEN failed_records_cnt = 0 THEN 1 ELSE 0 END) AS passed_test_cnt\r\n        ,SUM(failed_records_cnt) AS failed_records_cnt \r\n    FROM unique_tests\r\n    GROUP BY m_valid_dt, test_type_cd\r\n)\r\nSELECT * \r\nFROM summary", "language": "sql", "refs": [{"name": "dq_business_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.dq_business_tests"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_dim_table_nm": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_dim_table_nm", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_dim_table_nm.sql", "original_file_path": "models\\040_dq\\dq_dim_table_nm.sql", "unique_id": "model.weather_dbt.dq_dim_table_nm", "fqn": ["weather_dbt", "040_dq", "dq_dim_table_nm"], "alias": "dq_dim_table_nm", "checksum": {"name": "sha256", "checksum": "5c8b9426ba6d51ce9e2584d5ecc08c454d62c5106bcaa0face1c8d9d08f2cd83"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762887.767628, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_dim_table_nm\"", "raw_code": "WITH dq_standard_tests AS (\r\n    SELECT DISTINCT \r\n        table_nm\r\n    FROM {{ ref('dq_standard_tests') }}\r\n),\r\n\r\ndq_business_tests AS (\r\n    SELECT DISTINCT \r\n        table_nm\r\n    FROM {{ ref('dq_business_tests') }}\r\n)\r\n\r\nSELECT * FROM dq_standard_tests\r\nUNION\r\nSELECT * FROM dq_business_tests", "language": "sql", "refs": [{"name": "dq_standard_tests", "package": null, "version": null}, {"name": "dq_business_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.dq_standard_tests", "model.weather_dbt.dq_business_tests"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_business_tests": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_business_tests", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_business_tests.sql", "original_file_path": "models\\040_dq\\dq_business_tests.sql", "unique_id": "model.weather_dbt.dq_business_tests", "fqn": ["weather_dbt", "040_dq", "dq_business_tests"], "alias": "dq_business_tests", "checksum": {"name": "sha256", "checksum": "8456555fa81332d4bd6ebe452ee7a0c5bf906ba9fe6849021370a9e526b8ee86"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762887.7702281, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_business_tests\"", "raw_code": "WITH s_fct_weather_forecast_invalid_cloud_coverage_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'cloud_coverage_cd' AS tested_field_nm\r\n        ,'Records where \"cloud_coverage_cd\" does not appropriately match \"cloud_coverage_pct\"' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n\r\n),\r\n\r\ns_fct_weather_forecast_invalid_cloud_coverage_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_cloud_coverage_cd') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_cloud_coverage_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_invalid_cloud_coverage_cd_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_invalid_cloud_coverage_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n\r\n),\r\n\r\ns_dim_city_accepted_values_country_cd_base AS (\r\n    SELECT\r\n        NULL AS m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,NULL AS forecast_dt\r\n        ,'s_dim_city' AS table_nm\r\n        ,'accepted_values' AS test_type_cd\r\n        ,'country_cd' AS tested_field_nm\r\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\r\n    FROM {{ ref('s_dim_city') }}\r\n\r\n),\r\n\r\ns_dim_city_accepted_values_country_cd_cnt AS (\r\n    SELECT\r\n        NULL AS m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,NULL AS forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_dim_city_accepted_values_country_cd') }}\r\n    GROUP BY\r\n        --m_valid_dt\r\n        country_cd\r\n        ,county_nm\r\n        --,forecast_dt\r\n),\r\n\r\ns_dim_city_accepted_values_country_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_dim_city_accepted_values_country_cd_base AS base\r\n    LEFT JOIN s_dim_city_accepted_values_country_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\n\r\ns_fct_astro_accepted_range_m_valid_dt_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro' AS table_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,'m_valid_dt' AS tested_field_nm\r\n        ,'Records where the \"m_valid_dt\" is out of range' AS description\r\n    FROM {{ ref('s_fct_astro') }}\r\n\r\n),\r\n\r\ns_fct_astro_accepted_range_m_valid_dt_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_accepted_range_m_valid_dt') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_accepted_range_m_valid_dt_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_accepted_range_m_valid_dt_base AS base\r\n    LEFT JOIN s_fct_astro_accepted_range_m_valid_dt_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_astro_accepted_values_country_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro' AS table_nm\r\n        ,'accepted_values' AS test_type_cd\r\n        ,'country_cd' AS tested_field_nm\r\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\r\n    FROM {{ ref('s_fct_astro') }}\r\n\r\n),\r\n\r\ns_fct_astro_accepted_values_country_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_accepted_range_m_valid_dt') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_accepted_values_country_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_accepted_values_country_cd_base AS base\r\n    LEFT JOIN s_fct_astro_accepted_values_country_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_astro_forecast_accepted_range_m_valid_dt_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro_forecast' AS table_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,'m_valid_dt' AS tested_field_nm\r\n        ,'Records where the \"m_valid_dt\" is out of range' AS description\r\n    FROM {{ ref('s_fct_astro') }}\r\n),\r\n\r\ns_fct_astro_forecast_accepted_range_m_valid_dt_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_forecast_accepted_range_m_valid_dt') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_forecast_accepted_range_m_valid_dt_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_forecast_accepted_range_m_valid_dt_base AS base\r\n    LEFT JOIN s_fct_astro_forecast_accepted_range_m_valid_dt_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_astro_forecast_accepted_values_country_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro_forecast' AS table_nm\r\n        ,'accepted_values' AS test_type_cd\r\n        ,'country_cd' AS tested_field_nm\r\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\r\n    FROM {{ ref('s_fct_astro_forecast') }}\r\n),\r\n\r\ns_fct_astro_forecast_accepted_values_country_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_forecast_accepted_values_country_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_forecast_accepted_values_country_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_forecast_accepted_values_country_cd_base AS base\r\n    LEFT JOIN s_fct_astro_forecast_accepted_values_country_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_accepted_range_m_valid_dt_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,'m_valid_dt' AS tested_field_nm\r\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_accepted_range_m_valid_dt_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_accepted_range_m_valid_dt') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n\r\n),\r\n\r\ns_fct_weather_accepted_range_m_valid_dt_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_accepted_range_m_valid_dt_base AS base\r\n    LEFT JOIN s_fct_weather_accepted_range_m_valid_dt_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_accepted_range_temp_c_no_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,'temp_c_no' AS tested_field_nm\r\n        ,'Records where the \"temp_c_no\" is out of range' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_accepted_range_temp_c_no_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_accepted_range_temp_c_no') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_accepted_range_temp_c_no_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_accepted_range_temp_c_no_base AS base\r\n    LEFT JOIN s_fct_weather_accepted_range_temp_c_no_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_accepted_values_country_cd_base AS (\r\n        SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'accepted_values' AS test_type_cd\r\n        ,'country_cd' AS tested_field_nm\r\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_accepted_values_country_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_accepted_values_country_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_accepted_values_country_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_accepted_values_country_cd_base AS base\r\n    LEFT JOIN s_fct_weather_accepted_values_country_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_accepted_range_m_valid_dt_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,'m_valid_dt' AS tested_field_nm\r\n        ,'Records where the \"m_valid_dt\" is out of range' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_accepted_range_m_valid_dt_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_accepted_range_m_valid_dt') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_accepted_range_m_valid_dt_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_accepted_range_m_valid_dt_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_accepted_range_m_valid_dt_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_accepted_range_temp_c_no_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'accepted_range' AS test_type_cd\r\n        ,'temp_c_no' AS tested_field_nm\r\n        ,'Records where the \"temp_c_no\" is out of range' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_accepted_range_temp_c_no_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_accepted_range_temp_c_no') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_accepted_range_temp_c_no_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_accepted_range_temp_c_no_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_accepted_range_temp_c_no_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_accepted_values_country_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'accepted_values' AS test_type_cd\r\n        ,'country_cd' AS tested_field_nm\r\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_accepted_values_country_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_accepted_values_country_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_accepted_values_country_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_accepted_values_country_cd_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_accepted_values_country_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_humidity_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'humidity_cd' AS tested_field_nm\r\n        ,'Records where \"humnidity_cd\" does not appropriately match \"humidity_pct\"' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_humidity_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_humidity_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_humidity_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_invalid_humidity_cd_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_invalid_humidity_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_rain_chance_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'rain_chance_cd' AS tested_field_nm\r\n        ,'Records where \"rain_chance_cd\" does not appropriately match \"rain_chance_pct\"' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_rain_chance_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_rain_chance_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_rain_chance_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_invalid_rain_chance_cd_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_invalid_rain_chance_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_snow_chance_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'snow_chance_cd' AS tested_field_nm\r\n        ,'Records where \"snow_chance_cd\" does not appropriately match \"snow_chance_pct\"' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_snow_chance_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_snow_chance_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_snow_chance_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_invalid_snow_chance_cd_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_invalid_snow_chance_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_temp_feelslike_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'snow_chance_cd' AS tested_field_nm\r\n        ,'Records where \"feels_like_cd\" does not appropriately match \"feels_like_no\"' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_invalid_temp_feelslike_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_invalid_temp_feelslike_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_invalid_temp_feelslike_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_invalid_temp_feelslike_cd_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_invalid_temp_feelslike_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_cloud_coverage_cd_base AS (\r\n        SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'cloud_coverage_cd' AS tested_field_nm\r\n        ,'Records where \"cloud_coverage_cd\" does not appropriately match \"cloud_coverage_pct\"' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_invalid_cloud_coverage_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_cloud_coverage_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_cloud_coverage_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_invalid_cloud_coverage_cd_base AS base\r\n    LEFT JOIN s_fct_weather_invalid_cloud_coverage_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_humidity_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'humidity_cd' AS tested_field_nm\r\n        ,'Records where \"humidity_cd\" does not appropriately match \"humidity_pct\"' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_invalid_humidity_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_humidity_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_humidity_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_invalid_humidity_cd_base AS base\r\n    LEFT JOIN s_fct_weather_invalid_humidity_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_rain_chance_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'rain_chance_cd' AS tested_field_nm\r\n        ,'Records where \"rain_chance_cd\" does not appropriately match \"rain_chance_pct\"' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_invalid_rain_chance_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_rain_chance_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_rain_chance_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_invalid_rain_chance_cd_base AS base\r\n    LEFT JOIN s_fct_weather_invalid_rain_chance_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_snow_chance_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'snow_chance_cd' AS tested_field_nm\r\n        ,'Records where \"snow_chance_cd\" does not appropriately match \"snow_chance_pct\"' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_invalid_snow_chance_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_snow_chance_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_snow_chance_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_invalid_snow_chance_cd_base AS base\r\n    LEFT JOIN s_fct_weather_invalid_snow_chance_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_temp_feelslike_cd_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'invalid' AS test_type_cd\r\n        ,'temp_feelslike_cd' AS tested_field_nm\r\n        ,'Records where \"temp_feelslike_cd\" does not appropriately match \"temp_feelslike_no\"' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_invalid_temp_feelslike_cd_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_invalid_temp_feelslike_cd') }}\r\n    GROUP BY\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_invalid_temp_feelslike_cd_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_invalid_temp_feelslike_cd_base AS base\r\n    LEFT JOIN s_fct_weather_invalid_temp_feelslike_cd_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\nunion_tests AS (\r\n    SELECT * FROM s_fct_weather_forecast_invalid_cloud_coverage_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_dim_city_accepted_values_country_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_accepted_range_m_valid_dt_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_accepted_values_country_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_accepted_range_m_valid_dt_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_accepted_values_country_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_accepted_range_m_valid_dt_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_accepted_range_temp_c_no_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_accepted_values_country_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_accepted_range_m_valid_dt_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_accepted_range_temp_c_no_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_accepted_values_country_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_cloud_coverage_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_humidity_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_rain_chance_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_snow_chance_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_invalid_temp_feelslike_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_cloud_coverage_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_humidity_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_rain_chance_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_snow_chance_cd_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_invalid_temp_feelslike_cd_joined\r\n),\r\n\r\nfailed_record_cnt_fixed AS (\r\n    SELECT \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,table_nm\r\n        ,test_type_cd\r\n        ,tested_field_nm\r\n        ,description\r\n        ,failed_record_cnt\r\n        ,CASE WHEN failed_record_cnt is NULL THEN 0 ELSE failed_record_cnt END AS failed_record_cnt_fixed\r\n    FROM union_tests\r\n),\r\n\r\nreorder AS (\r\n    SELECT \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,table_nm\r\n        ,test_type_cd\r\n        ,tested_field_nm\r\n        ,description\r\n        ,failed_record_cnt_fixed as failed_record_cnt\r\n    FROM failed_record_cnt_fixed\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_dim_city", "package": null, "version": null}, {"name": "s_fct_astro", "package": null, "version": null}, {"name": "s_fct_astro", "package": null, "version": null}, {"name": "s_fct_astro", "package": null, "version": null}, {"name": "s_fct_astro_forecast", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}], "sources": [["dbt_dq_test", "s_fct_weather_forecast_invalid_rain_chance_cd"], ["dbt_dq_test", "s_fct_weather_accepted_values_country_cd"], ["dbt_dq_test", "s_fct_weather_accepted_range_temp_c_no"], ["dbt_dq_test", "s_fct_weather_forecast_invalid_temp_feelslike_cd"], ["dbt_dq_test", "s_fct_weather_invalid_rain_chance_cd"], ["dbt_dq_test", "s_fct_astro_accepted_range_m_valid_dt"], ["dbt_dq_test", "s_fct_weather_accepted_range_m_valid_dt"], ["dbt_dq_test", "s_fct_astro_forecast_accepted_range_m_valid_dt"], ["dbt_dq_test", "s_fct_weather_forecast_invalid_snow_chance_cd"], ["dbt_dq_test", "s_fct_weather_invalid_snow_chance_cd"], ["dbt_dq_test", "s_fct_weather_forecast_accepted_range_temp_c_no"], ["dbt_dq_test", "s_dim_city_accepted_values_country_cd"], ["dbt_dq_test", "s_fct_weather_forecast_invalid_humidity_cd"], ["dbt_dq_test", "s_fct_weather_invalid_cloud_coverage_cd"], ["dbt_dq_test", "s_fct_astro_forecast_accepted_values_country_cd"], ["dbt_dq_test", "s_fct_weather_invalid_humidity_cd"], ["dbt_dq_test", "s_fct_weather_invalid_temp_feelslike_cd"], ["dbt_dq_test", "s_fct_weather_forecast_accepted_range_m_valid_dt"], ["dbt_dq_test", "s_fct_weather_forecast_accepted_values_country_cd"], ["dbt_dq_test", "s_fct_weather_forecast_invalid_cloud_coverage_cd"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_rain_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_temp_c_no", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_temp_feelslike_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_rain_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_snow_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_snow_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_temp_c_no", "source.weather_dbt.dbt_dq_test.s_dim_city_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_humidity_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_cloud_coverage_cd", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_humidity_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_temp_feelslike_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_cloud_coverage_cd", "model.weather_dbt.s_fct_weather_forecast", "model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_standard_tests_summary": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_standard_tests_summary", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_standard_tests_summary.sql", "original_file_path": "models\\040_dq\\dq_standard_tests_summary.sql", "unique_id": "model.weather_dbt.dq_standard_tests_summary", "fqn": ["weather_dbt", "040_dq", "dq_standard_tests_summary"], "alias": "dq_standard_tests_summary", "checksum": {"name": "sha256", "checksum": "9108f09e1efbec0ddea759e8b90749d50115db4d7cbe15c5768f3ede39e2203d"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762887.7736208, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_standard_tests_summary\"", "raw_code": "WITH dq_standard_tests AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('dq_standard_tests') }}\r\n),\r\n\r\nunique_tests AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,table_nm\r\n        ,test_type_cd\r\n        ,tested_field_nm\r\n        ,SUM(failed_record_cnt) AS failed_records_cnt\r\n    FROM dq_standard_tests\r\n    GROUP BY m_valid_dt, table_nm, test_type_cd, tested_field_nm\r\n),\r\n\r\nsummary AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,test_type_cd\r\n        ,COUNT(*) AS test_cnt \r\n        ,SUM(CASE WHEN failed_records_cnt > 0 THEN 1 ELSE 0 END) AS failed_test_cnt\r\n        ,SUM(CASE WHEN failed_records_cnt = 0 THEN 1 ELSE 0 END) AS passed_test_cnt\r\n        ,SUM(failed_records_cnt) AS failed_records_cnt \r\n    FROM unique_tests\r\n    GROUP BY m_valid_dt, test_type_cd\r\n)\r\nSELECT * \r\nFROM summary", "language": "sql", "refs": [{"name": "dq_standard_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.dq_standard_tests"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.dq_standard_tests": {"database": "wh_weather", "schema": "dbt_dq", "name": "dq_standard_tests", "resource_type": "model", "package_name": "weather_dbt", "path": "040_dq\\dq_standard_tests.sql", "original_file_path": "models\\040_dq\\dq_standard_tests.sql", "unique_id": "model.weather_dbt.dq_standard_tests", "fqn": ["weather_dbt", "040_dq", "dq_standard_tests"], "alias": "dq_standard_tests", "checksum": {"name": "sha256", "checksum": "5e9392e82bf971778e0b1f25e6498fc9a5850bedc80fd0bf56a1f84e4a59ae25"}, "config": {"enabled": true, "alias": null, "schema": "dq", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "dq", "materialized": "table"}, "created_at": 1745762887.7747583, "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_standard_tests\"", "raw_code": "WITH s_dim_city_not_null_city_pk_base AS (\r\n    SELECT\r\n        NULL AS m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,NULL AS forecast_dt\r\n        ,'s_dim_city' AS table_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,'city_pk' AS tested_field_nm\r\n        ,'Records where the \"city_pk\" is null' AS description\r\n    FROM {{ ref('s_dim_city') }}\r\n),\r\n\r\ns_dim_city_not_null_city_pk_cnt AS (\r\n    SELECT\r\n        NULL AS m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,NULL AS forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_dim_city_not_null_city_pk') }}\r\n    GROUP BY \r\n        country_cd\r\n        ,county_nm\r\n),\r\n\r\ns_dim_city_not_null_city_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_dim_city_not_null_city_pk_base AS base\r\n    LEFT JOIN s_dim_city_not_null_city_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_astro_forecast_not_null_astro_forecast_pk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro' AS table_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,'forecast_pk' AS tested_field_nm\r\n        ,'Records where the \"forecast_pk\" is null' AS description\r\n    FROM {{ ref('s_fct_astro_forecast') }}\r\n),\r\n\r\ns_fct_astro_forecast_not_null_astro_forecast_pk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_forecast_not_null_astro_forecast_pk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_forecast_not_null_astro_forecast_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_forecast_not_null_astro_forecast_pk_base AS base\r\n    LEFT JOIN s_fct_astro_forecast_not_null_astro_forecast_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_astro_not_null_astro_pk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro' AS table_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,'astro_pk' AS tested_field_nm\r\n        ,'Records where the \"astro_pk\" is null' AS description\r\n    FROM {{ ref('s_fct_astro') }}\r\n),\r\n\r\ns_fct_astro_not_null_astro_pk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_not_null_astro_pk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_not_null_astro_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_not_null_astro_pk_base AS base\r\n    LEFT JOIN s_fct_astro_not_null_astro_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_not_null_weather_pk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,'weather_pk' AS tested_field_nm\r\n        ,'Records where the \"weather_pk\" is null' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_not_null_weather_pk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_not_null_weather_pk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_not_null_weather_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_not_null_weather_pk_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_not_null_weather_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_not_null_weather_pk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'not_null' AS test_type_cd\r\n        ,'weather_pk' AS tested_field_nm\r\n        ,'Records where the \"weather_pk\" is null' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_not_null_weather_pk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_not_null_weather_pk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_not_null_weather_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_not_null_weather_pk_base AS base\r\n    LEFT JOIN s_fct_weather_not_null_weather_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_dim_city_unique_city_pk_base AS (\r\n    SELECT\r\n        NULL AS m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,NULL AS forecast_dt\r\n        ,'s_dim_city' AS table_nm\r\n        ,'unique' AS test_type_cd\r\n        ,'city_pk' AS tested_field_nm\r\n        ,'Records where the \"city_pk\" is duplicated' AS description\r\n    FROM {{ ref('s_dim_city') }}\r\n),\r\n\r\ns_dim_city_unique_city_pk_cnt AS (\r\n    SELECT\r\n        NULL AS m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,NULL AS forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_dim_city_unique_city_pk') }}\r\n    GROUP BY \r\n        country_cd\r\n        ,county_nm\r\n),\r\n\r\ns_dim_city_unique_city_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_dim_city_unique_city_pk_base AS base\r\n    LEFT JOIN s_dim_city_unique_city_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\n\r\ns_fct_astro_forecast_unique_astro_forecast_pk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro_forecast' AS table_nm\r\n        ,'unique' AS test_type_cd\r\n        ,'astro_forecast_pk' AS tested_field_nm\r\n        ,'Records where the \"astro_forecast_pk\" is duplicated' AS description\r\n    FROM {{ ref('s_fct_astro_forecast') }}\r\n),\r\n\r\ns_fct_astro_forecast_unique_astro_forecast_pk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_forecast_unique_astro_forecast_pk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_forecast_unique_astro_forecast_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_forecast_unique_astro_forecast_pk_base AS base\r\n    LEFT JOIN s_fct_astro_forecast_unique_astro_forecast_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_astro_unique_astro_pk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro' AS table_nm\r\n        ,'unique' AS test_type_cd\r\n        ,'astro_pk' AS tested_field_nm\r\n        ,'Records where the \"astro_pk\" is duplicated' AS description\r\n    FROM {{ ref('s_fct_astro') }}\r\n),\r\n\r\ns_fct_astro_unique_astro_pk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_unique_astro_pk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_unique_astro_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_unique_astro_pk_base AS base\r\n    LEFT JOIN s_fct_astro_unique_astro_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_unique_weather_pk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'unique' AS test_type_cd\r\n        ,'weather_pk' AS tested_field_nm\r\n        ,'Records where the \"weather_pk\" is duplicated' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_unique_weather_pk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_unique_weather_pk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_unique_weather_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_unique_weather_pk_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_unique_weather_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_unique_weather_pk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'unique' AS test_type_cd\r\n        ,'weather_pk' AS tested_field_nm\r\n        ,'Records where the \"weather_pk\" is duplicated' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_unique_weather_pk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_unique_weather_pk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_unique_weather_pk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_unique_weather_pk_base AS base\r\n    LEFT JOIN s_fct_weather_unique_weather_pk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n), \r\n\r\ns_fct_astro_forecast_rel_s_dim_city_city_fk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro_forecast' AS table_nm\r\n        ,'relationships' AS test_type_cd\r\n        ,'city_fk' AS tested_field_nm\r\n        ,'Records where the \"city_fk\" does not have a matching entry in the \"s_dim_city\" dimension table' AS description\r\n    FROM {{ ref('s_fct_astro_forecast') }}\r\n),\r\n\r\ns_fct_astro_forecast_rel_s_dim_city_city_fk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_forecast_rel_s_dim_city_city_fk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_forecast_rel_s_dim_city_city_fk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_forecast_rel_s_dim_city_city_fk_base AS base\r\n    LEFT JOIN s_fct_astro_forecast_rel_s_dim_city_city_fk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\n\r\ns_fct_astro_rel_s_dim_city_city_fk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_astro' AS table_nm\r\n        ,'relationships' AS test_type_cd\r\n        ,'city_fk' AS tested_field_nm\r\n        ,'Records where the \"city_fk\" does not have a matching entry in the \"s_dim_city\" dimension table' AS description\r\n    FROM {{ ref('s_fct_astro') }}\r\n),\r\n\r\ns_fct_astro_rel_s_dim_city_city_fk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_astro_rel_s_dim_city_city_fk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_astro_rel_s_dim_city_city_fk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_astro_rel_s_dim_city_city_fk_base AS base\r\n    LEFT JOIN s_fct_astro_rel_s_dim_city_city_fk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_rel_s_dim_city_city_fk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather_forecast' AS table_nm\r\n        ,'relationships' AS test_type_cd\r\n        ,'city_fk' AS tested_field_nm\r\n        ,'Records where the \"city_fk\" does not have a matching entry in the \"s_dim_city\" dimension table' AS description\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\ns_fct_weather_forecast_rel_s_dim_city_city_fk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_forecast_rel_s_dim_city_city_fk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_forecast_rel_s_dim_city_city_fk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_forecast_rel_s_dim_city_city_fk_base AS base\r\n    LEFT JOIN s_fct_weather_forecast_rel_s_dim_city_city_fk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\ns_fct_weather_rel_s_dim_city_city_fk_base AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,'s_fct_weather' AS table_nm\r\n        ,'relationships' AS test_type_cd\r\n        ,'city_fk' AS tested_field_nm\r\n        ,'Records where the \"city_fk\" does not have a matching entry in the \"s_dim_city\" dimension table' AS description\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_rel_s_dim_city_city_fk_cnt AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n        ,COUNT(*) AS failed_record_cnt\r\n    FROM {{ source('dbt_dq_test', 's_fct_weather_rel_s_dim_city_city_fk') }}\r\n    GROUP BY \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,county_nm\r\n        ,forecast_dt\r\n),\r\n\r\ns_fct_weather_rel_s_dim_city_city_fk_joined AS (\r\n    SELECT\r\n        base.m_valid_dt\r\n        ,base.country_cd\r\n        ,base.county_nm\r\n        ,base.forecast_dt\r\n        ,base.table_nm\r\n        ,base.test_type_cd\r\n        ,base.tested_field_nm\r\n        ,base.description\r\n        ,cnt_records.failed_record_cnt\r\n    FROM s_fct_weather_rel_s_dim_city_city_fk_base AS base\r\n    LEFT JOIN s_fct_weather_rel_s_dim_city_city_fk_cnt AS cnt_records\r\n    ON base.m_valid_dt = cnt_records.m_valid_dt\r\n    AND base.country_cd = cnt_records.country_cd\r\n    AND base.county_nm = cnt_records.county_nm\r\n    AND base.forecast_dt = cnt_records.forecast_dt\r\n),\r\n\r\nunion_tests AS (\r\n    SELECT * FROM s_dim_city_not_null_city_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_not_null_astro_forecast_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_not_null_astro_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_not_null_weather_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_not_null_weather_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_dim_city_unique_city_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_unique_astro_forecast_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_unique_astro_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_unique_weather_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_unique_weather_pk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_forecast_rel_s_dim_city_city_fk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_astro_rel_s_dim_city_city_fk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_forecast_rel_s_dim_city_city_fk_joined\r\n    UNION ALL\r\n    SELECT * FROM s_fct_weather_rel_s_dim_city_city_fk_joined\r\n),\r\n\r\nfailed_record_cnt_fixed AS (\r\n    SELECT \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,table_nm\r\n        ,test_type_cd\r\n        ,tested_field_nm\r\n        ,description\r\n        ,failed_record_cnt\r\n        ,CASE WHEN failed_record_cnt is NULL THEN 0 ELSE failed_record_cnt END AS failed_record_cnt_fixed\r\n    FROM union_tests\r\n),\r\n\r\nreorder AS (\r\n    SELECT \r\n        m_valid_dt\r\n        ,country_cd\r\n        ,table_nm\r\n        ,test_type_cd\r\n        ,tested_field_nm\r\n        ,description\r\n        ,failed_record_cnt_fixed as failed_record_cnt\r\n    FROM failed_record_cnt_fixed\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}, {"name": "s_fct_astro_forecast", "package": null, "version": null}, {"name": "s_fct_astro", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_dim_city", "package": null, "version": null}, {"name": "s_fct_astro_forecast", "package": null, "version": null}, {"name": "s_fct_astro", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_astro_forecast", "package": null, "version": null}, {"name": "s_fct_astro", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}], "sources": [["dbt_dq_test", "s_fct_astro_not_null_astro_pk"], ["dbt_dq_test", "s_fct_astro_rel_s_dim_city_city_fk"], ["dbt_dq_test", "s_fct_weather_rel_s_dim_city_city_fk"], ["dbt_dq_test", "s_fct_astro_unique_astro_pk"], ["dbt_dq_test", "s_fct_weather_not_null_weather_pk"], ["dbt_dq_test", "s_fct_astro_forecast_not_null_astro_forecast_pk"], ["dbt_dq_test", "s_fct_weather_forecast_not_null_weather_pk"], ["dbt_dq_test", "s_fct_weather_unique_weather_pk"], ["dbt_dq_test", "s_dim_city_unique_city_pk"], ["dbt_dq_test", "s_fct_astro_forecast_unique_astro_forecast_pk"], ["dbt_dq_test", "s_fct_weather_forecast_rel_s_dim_city_city_fk"], ["dbt_dq_test", "s_dim_city_not_null_city_pk"], ["dbt_dq_test", "s_fct_weather_forecast_unique_weather_pk"], ["dbt_dq_test", "s_fct_astro_forecast_rel_s_dim_city_city_fk"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.weather_dbt.dbt_dq_test.s_fct_astro_not_null_astro_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_weather_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_astro_unique_astro_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_not_null_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_not_null_astro_forecast_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_not_null_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_unique_weather_pk", "source.weather_dbt.dbt_dq_test.s_dim_city_unique_city_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_unique_astro_forecast_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_dim_city_not_null_city_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_unique_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_rel_s_dim_city_city_fk", "model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_weather_forecast", "model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_dim_country_cd": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_dim_country_cd", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_dim_country_cd.sql", "original_file_path": "models\\030_gold\\g_dim_country_cd.sql", "unique_id": "model.weather_dbt.g_dim_country_cd", "fqn": ["weather_dbt", "030_gold", "g_dim_country_cd"], "alias": "g_dim_country_cd", "checksum": {"name": "sha256", "checksum": "9457d7de61890187e81cd71023382bd0bf75cdf54cea8fa2979452c115868b74"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762887.7764854, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_country_cd\"", "raw_code": "WITH s_fct_astro AS (\r\n    SELECT DISTINCT\r\n        country_cd\r\n    FROM {{ ref('s_fct_astro') }}\r\n),\r\n\r\ns_fct_astro_forecast AS (\r\n    SELECT DISTINCT\r\n        country_cd\r\n    FROM {{ ref('s_fct_astro_forecast') }}\r\n),\r\n\r\ns_fct_weather AS (\r\n    SELECT DISTINCT\r\n        country_cd\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_forecast AS (\r\n    SELECT DISTINCT\r\n        country_cd\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\nunion_select AS (\r\n    SELECT * FROM s_fct_astro\r\n    UNION\r\n    SELECT * FROM s_fct_astro_forecast\r\n    UNION\r\n    SELECT * FROM s_fct_weather\r\n    UNION\r\n    SELECT * FROM s_fct_weather_forecast\r\n)\r\n\r\nSELECT * FROM union_select", "language": "sql", "refs": [{"name": "s_fct_astro", "package": null, "version": null}, {"name": "s_fct_astro_forecast", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather", "model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_dim_county_nm": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_dim_county_nm", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_dim_county_nm.sql", "original_file_path": "models\\030_gold\\g_dim_county_nm.sql", "unique_id": "model.weather_dbt.g_dim_county_nm", "fqn": ["weather_dbt", "030_gold", "g_dim_county_nm"], "alias": "g_dim_county_nm", "checksum": {"name": "sha256", "checksum": "b47f9391b482da2c35185da851606bb1efa78148feae6ec7d7326decd202d7ce"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762887.7764854, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_county_nm\"", "raw_code": "WITH s_fct_astro AS (\r\n    SELECT DISTINCT\r\n        county_nm\r\n    FROM {{ ref('s_fct_astro') }}\r\n),\r\n\r\ns_fct_astro_forecast AS (\r\n    SELECT DISTINCT\r\n        county_nm\r\n    FROM {{ ref('s_fct_astro_forecast') }}\r\n),\r\n\r\ns_fct_weather AS (\r\n    SELECT DISTINCT\r\n        county_nm\r\n    FROM {{ ref('s_fct_weather') }}\r\n),\r\n\r\ns_fct_weather_forecast AS (\r\n    SELECT DISTINCT\r\n        county_nm\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n),\r\n\r\nunion_select AS (\r\n    SELECT * FROM s_fct_astro\r\n    UNION\r\n    SELECT * FROM s_fct_astro_forecast\r\n    UNION\r\n    SELECT * FROM s_fct_weather\r\n    UNION\r\n    SELECT * FROM s_fct_weather_forecast\r\n)\r\n\r\nSELECT * FROM union_select", "language": "sql", "refs": [{"name": "s_fct_astro", "package": null, "version": null}, {"name": "s_fct_astro_forecast", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather", "model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.weather_dbt.g_fct_weather_forecast": {"database": "wh_weather", "schema": "dbt_gold", "name": "g_fct_weather_forecast", "resource_type": "model", "package_name": "weather_dbt", "path": "030_gold\\g_fct_weather_forecast.sql", "original_file_path": "models\\030_gold\\g_fct_weather_forecast.sql", "unique_id": "model.weather_dbt.g_fct_weather_forecast", "fqn": ["weather_dbt", "030_gold", "g_fct_weather_forecast"], "alias": "g_fct_weather_forecast", "checksum": {"name": "sha256", "checksum": "9fa16fdeac952f7ff9e69e23023a74f686a94fd88a29258ba18e81e5ae4f4148"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "gold", "materialized": "table"}, "created_at": 1745762887.781503, "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_weather_forecast\"", "raw_code": "WITH s_fct_weather_forecast AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n)\r\n\r\nSELECT * FROM s_fct_weather_forecast", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "test.weather_dbt.s_fct_weather_forecast_invalid_cloud_coverage_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_cloud_coverage_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_invalid_cloud_coverage_cd.sql", "original_file_path": "tests\\s_fct_weather_forecast_invalid_cloud_coverage_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_cloud_coverage_cd", "fqn": ["weather_dbt", "s_fct_weather_forecast_invalid_cloud_coverage_cd"], "alias": "s_fct_weather_forecast_invalid_cloud_coverage_cd", "checksum": {"name": "sha256", "checksum": "2a03610f19b5f0c89acf32bac4f44c331edca7ed147762ba069442693c17a377"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762887.79098, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_cloud_coverage_cd\"", "raw_code": "WITH invalid_cloud_coverage_cd AS (\r\n    SELECT \r\n    *\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n    WHERE \r\n        ( cloud_coverage_pct BETWEEN 0 AND 20 AND cloud_coverage_cd NOT IN ('Clear'))\r\n        OR \r\n        ( cloud_coverage_pct BETWEEN 21 AND 40 AND cloud_coverage_cd NOT IN ('Partly Cloudy'))\r\n        OR \r\n        ( cloud_coverage_pct BETWEEN 41 AND 60 AND cloud_coverage_cd NOT IN ('Cloudy'))\r\n        OR \r\n        ( cloud_coverage_pct BETWEEN 61 AND 80 AND cloud_coverage_cd NOT IN ('Overcast'))\r\n        OR \r\n        ( cloud_coverage_pct BETWEEN 81 AND 100 AND cloud_coverage_cd NOT IN ('Completely Overcast'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_cloud_coverage_cd", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.weather_dbt.s_fct_weather_forecast_invalid_humidity_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_humidity_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_invalid_humidity_cd.sql", "original_file_path": "tests\\s_fct_weather_forecast_invalid_humidity_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_humidity_cd", "fqn": ["weather_dbt", "s_fct_weather_forecast_invalid_humidity_cd"], "alias": "s_fct_weather_forecast_invalid_humidity_cd", "checksum": {"name": "sha256", "checksum": "60c90b8c7654d325ce15bf6c9c204dfbf27af63b28cbe44d9d3d85137a036b96"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762887.7931004, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_humidity_cd\"", "raw_code": "WITH invalid_humidity_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n    WHERE \r\n        ( humidity_pct BETWEEN 0 AND 20 AND humidity_cd NOT IN ('Very Low'))\r\n        OR \r\n        ( humidity_pct BETWEEN 21 AND 40 AND humidity_cd NOT IN ('Low'))\r\n        OR \r\n        ( humidity_pct BETWEEN 41 AND 60 AND humidity_cd NOT IN ('Moderate'))\r\n        OR \r\n        ( humidity_pct BETWEEN 61 AND 80 AND humidity_cd NOT IN ('High'))\r\n        OR \r\n        ( humidity_pct BETWEEN 81 AND 100 AND humidity_cd NOT IN ('Very High'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_humidity_cd", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.weather_dbt.s_fct_weather_forecast_invalid_rain_chance_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_rain_chance_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_invalid_rain_chance_cd.sql", "original_file_path": "tests\\s_fct_weather_forecast_invalid_rain_chance_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_rain_chance_cd", "fqn": ["weather_dbt", "s_fct_weather_forecast_invalid_rain_chance_cd"], "alias": "s_fct_weather_forecast_invalid_rain_chance_cd", "checksum": {"name": "sha256", "checksum": "e871b15f6d904885af55a6cf89873c57a55a48572a2a8736a9a2b792bef17624"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762887.7960844, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_rain_chance_cd\"", "raw_code": "WITH invalid_rain_chance_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n    WHERE \r\n        ( rain_chance_pct BETWEEN 0 AND 20 AND rain_chance_cd NOT IN ('Very Low'))\r\n        OR \r\n        ( rain_chance_pct BETWEEN 21 AND 40 AND rain_chance_cd NOT IN ('Low'))\r\n        OR \r\n        ( rain_chance_pct BETWEEN 41 AND 60 AND rain_chance_cd NOT IN ('Moderate'))\r\n        OR \r\n        ( rain_chance_pct BETWEEN 61 AND 80 AND rain_chance_cd NOT IN ('High'))\r\n        OR \r\n        ( rain_chance_pct BETWEEN 81 AND 100 AND rain_chance_cd NOT IN ('Very High'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_rain_chance_cd", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.weather_dbt.s_fct_weather_forecast_invalid_snow_chance_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_snow_chance_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_invalid_snow_chance_cd.sql", "original_file_path": "tests\\s_fct_weather_forecast_invalid_snow_chance_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_snow_chance_cd", "fqn": ["weather_dbt", "s_fct_weather_forecast_invalid_snow_chance_cd"], "alias": "s_fct_weather_forecast_invalid_snow_chance_cd", "checksum": {"name": "sha256", "checksum": "d3a03ffdc3fb0fa9d1ad28bdb5f0063e9d83f311ba974687dafda6e6e0fec238"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762887.7979367, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_snow_chance_cd\"", "raw_code": "WITH invalid_snow_chance_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n    WHERE \r\n        ( snow_chance_pct BETWEEN 0 AND 20 AND snow_chance_cd NOT IN ('Very Low'))\r\n        OR \r\n        ( snow_chance_pct BETWEEN 21 AND 40 AND snow_chance_cd NOT IN ('Low'))\r\n        OR \r\n        ( snow_chance_pct BETWEEN 41 AND 60 AND snow_chance_cd NOT IN ('Moderate'))\r\n        OR \r\n        ( snow_chance_pct BETWEEN 61 AND 80 AND snow_chance_cd NOT IN ('High'))\r\n        OR \r\n        ( snow_chance_pct BETWEEN 81 AND 100 AND snow_chance_cd NOT IN ('Very High'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_snow_chance_cd", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.weather_dbt.s_fct_weather_forecast_invalid_temp_feelslike_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_temp_feelslike_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_invalid_temp_feelslike_cd.sql", "original_file_path": "tests\\s_fct_weather_forecast_invalid_temp_feelslike_cd.sql", "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_temp_feelslike_cd", "fqn": ["weather_dbt", "s_fct_weather_forecast_invalid_temp_feelslike_cd"], "alias": "s_fct_weather_forecast_invalid_temp_feelslike_cd", "checksum": {"name": "sha256", "checksum": "b7c00f90e853eab783a6ddd734962d6451f43c69e84078cdf6a5346038b2dd0c"}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745762887.7979367, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_temp_feelslike_cd\"", "raw_code": "WITH invalid_temp_feelslike_cd AS (\r\n    SELECT *\r\n    FROM {{ ref('s_fct_weather_forecast') }}\r\n    WHERE \r\n        ( temp_feelslike_no <= 0 AND temp_feelslike_cd NOT IN ('Very Cold'))\r\n        OR \r\n        ( temp_feelslike_no BETWEEN 1 AND 10 AND temp_feelslike_cd NOT IN ('Cold'))\r\n        OR \r\n        ( temp_feelslike_no BETWEEN 11 AND 20 AND temp_feelslike_cd NOT IN ('Cool'))\r\n        OR \r\n        ( temp_feelslike_no BETWEEN 21 AND 30 AND temp_feelslike_cd NOT IN ('Warm'))\r\n        OR \r\n        ( temp_feelslike_no BETWEEN 31 AND 40 AND temp_feelslike_cd NOT IN ('Hot'))\r\n        OR \r\n        ( temp_feelslike_no > 41 AND temp_feelslike_cd NOT IN ('Very Hot'))\r\n)\r\n\r\nSELECT *\r\nFROM invalid_temp_feelslike_cd", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "model.weather_dbt.s_fct_weather_forecast": {"database": "wh_weather", "schema": "dbt_silver", "name": "s_fct_weather_forecast", "resource_type": "model", "package_name": "weather_dbt", "path": "020_silver\\s_fct_weather_forecast.sql", "original_file_path": "models\\020_silver\\s_fct_weather_forecast.sql", "unique_id": "model.weather_dbt.s_fct_weather_forecast", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_forecast"], "alias": "s_fct_weather_forecast", "checksum": {"name": "sha256", "checksum": "986a3b88d1116ddb415b24e029449b4e9bfdf1975fa02ba2fea3a4348baa6928"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "The s_fct_weather_forecast model provides a comprehensive view of weather forecasts. It includes details such as the date of the forecast, the city and country for which the forecast is made, and various weather parameters like temperature, humidity, wind speed, and chances of rain or snow. The model also categorizes these parameters into understandable terms like 'Very Low', 'Low', 'Moderate', 'High', and 'Very High' for chances of rain or snow, and 'Clear', 'Partly Cloudy', 'Cloudy', 'Overcast', and 'Completely Overcast' for cloud coverage. It also provides a feel of the temperature with categories like 'Very Cold', 'Cold', 'Cool', 'Warm', 'Hot', and 'Very Hot'. The model is updated regularly to provide the most accurate and up-to-date weather forecasts.", "columns": {"m_valid_dt": {"name": "m_valid_dt", "description": "This column represents the date and time when the weather forecast data was validated. It is in the format of YYYY-MM-DD HH:MM:SS. This information is crucial for understanding the timeliness and relevance of the forecast data.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "weather_pk": {"name": "weather_pk", "description": "This column is the unique identifier for each weather forecast record. It is generated using a hash function on the forecast date, country code, and city name. This identifier is used to uniquely identify each weather forecast and is essential for data management and tracking.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forecast_dt": {"name": "forecast_dt", "description": "This column represents the date and time for which the weather forecast is applicable. It is in the format of YYYY-MM-DD HH:MM:SS. This information is important for understanding when the forecasted weather conditions are expected to occur.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_nm": {"name": "city_nm", "description": "This column represents the name of the city for which the weather forecast is provided. It is a string data type and can be used to filter or group the data based on specific cities.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_fk": {"name": "city_fk", "description": "A foreign key representing the unique identifier of a city in the `s_dim_city` dimension table. It is used to join forecast data with city-related metadata like county name.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_cd": {"name": "country_cd", "description": "This column represents the country code associated with the city for which the weather forecast is provided. It is a string data type and can be used to filter or group the data based on specific countries.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_nm": {"name": "country_nm", "description": "This column represents the name of the country associated with the city for which the weather forecast is provided. It is a string data type and can be used to filter or group the data based on specific countries.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_coverage_pct": {"name": "cloud_coverage_pct", "description": "This column represents the percentage of the sky covered by clouds. It is a numerical value ranging from 0 to 100, where 0 indicates a clear sky and 100 indicates a completely overcast sky.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_coverage_cd": {"name": "cloud_coverage_cd", "description": "This column categorizes the cloud coverage into different levels based on the percentage of the sky covered by clouds. The categories include 'Clear' (0-20%), 'Partly Cloudy' (21-40%), 'Cloudy' (41-60%), 'Overcast' (61-80%), and 'Completely Overcast' (81-100%).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gust_kph_no": {"name": "gust_kph_no", "description": "This column represents the speed of the wind gusts in kilometers per hour. Wind gusts are brief increases in the speed of the wind, typically lasting just a few seconds.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gust_miph_no": {"name": "gust_miph_no", "description": "This column represents the speed of the gusts of wind in miles per hour. It is derived from the 'gust_kph_no' column by converting kilometers per hour to miles per hour. This information is crucial for understanding the intensity of wind gusts in a particular region, which can impact various business operations such as logistics, construction, and outdoor events.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "heatindex_c_no": {"name": "heatindex_c_no", "description": "This column represents the heat index in degrees Celsius. The heat index is a measure that combines air temperature and relative humidity to determine an apparent temperature \u2014 how hot it actually feels. This information is important for businesses in sectors like tourism, event planning, and agriculture, where weather conditions significantly impact operations.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "heatindex_f_no": {"name": "heatindex_f_no", "description": "This column represents the heat index in degrees Fahrenheit. It is derived from the 'heatindex_c_no' column by converting degrees Celsius to Fahrenheit. This information is crucial for businesses operating in regions using Fahrenheit as the standard unit of temperature. It helps in understanding the perceived temperature, which can influence customer behavior and business operations.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "heatindex_k_no": {"name": "heatindex_k_no", "description": "This column represents the heat index value in Kelvin. The heat index is a measure of how hot it feels when relative humidity is factored in with the actual air temperature. This value is particularly useful for understanding the perceived temperature in different weather conditions.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "humidity_pct": {"name": "humidity_pct", "description": "This column represents the humidity level as a numerical value. Humidity is the concentration of water vapor present in the air. This value is important for understanding the moisture content in the air, which can affect various weather conditions and human comfort.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "humidity_cd": {"name": "humidity_cd", "description": "This column categorizes the humidity level into different categories such as 'Very Low', 'Low', 'Moderate', 'High', and 'Very High'. This categorization provides a more intuitive understanding of the humidity conditions.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_day_flg": {"name": "is_day_flg", "description": "This column indicates whether the forecast is for daytime or nighttime. A value of '1' means it's a daytime forecast, while '0' indicates a nighttime forecast.", "meta": {}, "data_type": "bit", "constraints": [], "quote": null, "tags": [], "granularity": null}, "precip_mm_no": {"name": "precip_mm_no", "description": "This column represents the amount of precipitation forecasted, measured in millimeters. This includes any form of water, liquid or solid, that falls from the atmosphere and reaches the ground.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pressure_mb_no": {"name": "pressure_mb_no", "description": "This column represents the atmospheric pressure forecasted, measured in millibars. Atmospheric pressure is an indicator of weather changes. When the pressure drops, it usually signals that a storm is coming.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_c_no": {"name": "temp_c_no", "description": "This column represents the temperature in Celsius. It is a numerical value that indicates the current temperature of the location in Celsius degrees. This is a key metric for understanding the current weather conditions.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_f_no": {"name": "temp_f_no", "description": "This column represents the temperature in Fahrenheit. It is a numerical value that indicates the current temperature of the location in Fahrenheit degrees. This is particularly useful for users who are more familiar with the Fahrenheit scale.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_k_no": {"name": "temp_k_no", "description": "This column represents the temperature in Kelvin. It is a numerical value that indicates the current temperature of the location in Kelvin. This is often used in scientific contexts and provides another perspective on the current temperature.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_feelslike_no": {"name": "temp_feelslike_no", "description": "This column represents the temperature that it actually feels like outside, taking into account factors such as wind and humidity. The value is in degrees Celsius.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_feels_like_cd": {"name": "temp_feels_like_cd", "description": "This column categorizes the 'feels like' temperature into various categories such as 'Very Cold', 'Cold', 'Cool', 'Warm', 'Hot', and 'Very Hot'. This provides a more intuitive understanding of the temperature conditions.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "date_dtt": {"name": "date_dtt", "description": "This column represents the date and time of the weather forecast. It is in the format of YYYY-MM-DD HH:MM:SS, which allows for precise tracking of weather conditions.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}, "time_epoch": {"name": "time_epoch", "description": "This column represents the time of the weather forecast in epoch format. Epoch time, also known as Unix time, is the number of seconds that have elapsed since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970, not counting leap seconds. It is a system for describing instants in time, defined as the number of seconds that have elapsed since the Unix epoch. This format is useful for storing or comparing dates and times in a database or in a program.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rain_chance_pct": {"name": "rain_chance_pct", "description": "This column represents the numerical probability of rain occurring, expressed as a percentage. It is calculated based on various weather factors and gives an indication of the likelihood of rain. A higher number indicates a higher chance of rain. This information can be useful for planning outdoor activities or events.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rain_chance_cd": {"name": "rain_chance_cd", "description": "This column categorizes the chance of rain into different levels such as 'Very Low', 'Low', 'Moderate', 'High', and 'Very High'. This is based on the 'rain_chance_pct' column. This categorical representation can be easier to understand and interpret for some users, and can be useful for making decisions based on the likelihood of rain.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "snow_chance_pct": {"name": "snow_chance_pct", "description": "This column represents the numerical probability of snowfall in a given area. The value ranges from 0 to 100, where 0 indicates no chance of snowfall and 100 indicates a very high chance of snowfall.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "snow_chance_cd": {"name": "snow_chance_cd", "description": "This column categorizes the chance of snowfall into different levels based on the 'snow_chance_pct' value. The categories are 'Very Low', 'Low', 'Moderate', 'High', 'Very High', and 'Unknown'.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "uv_no": {"name": "uv_no", "description": "This column represents the Ultraviolet (UV) Index for a given area. The UV Index is a measure of the intensity of the sun's ultraviolet radiation. Higher values indicate stronger UV radiation, which can be harmful to the skin and eyes.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "vis_km_no": {"name": "vis_km_no", "description": "This column represents the visibility in kilometers. It is a numerical value that indicates how far one can see in clear weather conditions. Higher values indicate better visibility.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "vis_mi_no": {"name": "vis_mi_no", "description": "This column represents the visibility in miles. It is a numerical value that indicates how far one can see in clear weather conditions. Higher values indicate better visibility. This is the same as 'vis_km_no' but converted to miles for ease of understanding for users familiar with the imperial system.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wind_dir_cd": {"name": "wind_dir_cd", "description": "This column represents the wind direction. It is a categorical value that indicates the direction from which the wind is coming. The values are represented as abbreviations of the cardinal directions (e.g., 'N' for North, 'S' for South, 'E' for East, 'W' for West, 'NE' for Northeast, etc.).", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wind_kph_no": {"name": "wind_kph_no", "description": "This column represents the speed of the wind in kilometers per hour. It is a numerical value that provides information about the intensity of the wind at a specific location and time.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wind_miph_no": {"name": "wind_miph_no", "description": "This column represents the speed of the wind in miles per hour. It is a numerical value that provides information about the intensity of the wind at a specific location and time, converted from kilometers per hour to miles per hour for ease of understanding for users familiar with the imperial system.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "windchill_c_no": {"name": "windchill_c_no", "description": "This column represents the wind chill factor in degrees Celsius. It is a numerical value that indicates how much colder the wind makes a human feel compared to the actual air temperature. This is a crucial factor to consider when assessing the weather conditions, especially in cold climates.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "windchill_f_no": {"name": "windchill_f_no", "description": "This column represents the wind chill factor in Fahrenheit. The wind chill factor is a measure of how cold it feels when considering the rate of heat loss from the human body resulting from the combined effect of low temperature and wind. As wind speed increases, it can carry heat away from your body much more quickly, causing skin temperature to decrease and making the surroundings feel colder.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "windchill_k_no": {"name": "windchill_k_no", "description": "This column represents the wind chill factor in Kelvin. The wind chill factor is a measure of how cold it feels when considering the rate of heat loss from the human body resulting from the combined effect of low temperature and wind. As wind speed increases, it can carry heat away from your body much more quickly, causing skin temperature to decrease and making the surroundings feel colder.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_extracted_at_dttm": {"name": "m_extracted_at_dttm", "description": "This column represents the date and time at which the weather forecast data was extracted from the source system. This timestamp is useful for tracking data lineage and understanding when the data was last updated in the source system.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_updated_at_dttm": {"name": "m_updated_at_dttm", "description": "This column represents the date and time when the weather forecast data was last updated. It is important for business users to understand the recency of the data they are working with, as weather conditions can change rapidly and impact business operations.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "weather_dbt://models\\020_silver\\s_fct_weather_forecast.yml", "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "silver", "materialized": "table"}, "created_at": 1745764019.9991827, "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"", "raw_code": "WITH b_weather_forecast AS (\r\n    SELECT \r\n        *\r\n    FROM {{ref('b_weather_forecast') }}\r\n),\r\n\r\ns_dim_country AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_country') }}\r\n),\r\n\r\ns_dim_city AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_city') }}\r\n),\r\n\r\njoin_country_cd AS (\r\n    SELECT\r\n        b_weather_forecast.*\r\n        ,s_dim_country.country_cd AS country_cd\r\n    FROM b_weather_forecast\r\n    JOIN s_dim_country\r\n    ON b_weather_forecast.country_nm = s_dim_country.country_nm\r\n),\r\n\r\ngen_sk AS (\r\n    SELECT\r\n        *\r\n        ,{{ gen_sk(['m_valid_dt','forecast_dt','country_cd', 'city_nm', 'time_epoch']) }} AS weather_pk\r\n        ,{{ gen_sk(['country_cd', 'city_nm']) }} AS city_fk\r\n    FROM join_country_cd\r\n),\r\n\r\njoin_county_nm AS (\r\n    SELECT\r\n        gen_sk.*\r\n        ,s_dim_city.county_nm\r\n    FROM gen_sk\r\n    JOIN s_dim_city\r\n    ON gen_sk.city_fk = s_dim_city.city_pk\r\n),\r\n\r\nunit_conversion AS (\r\n    SELECT\r\n        *\r\n        ,{{ add_unit_conversions_to_kph('gust_kph_no') }}\r\n        ,{{ add_unit_conversions_to_cels('temp_c_no') }}\r\n        ,{{ add_unit_conversions_to_cels('heatindex_c_no') }}\r\n        ,vis_km_no * {{ var('v_km_to_mi') }} AS vis_mi_no\r\n        ,{{ add_unit_conversions_to_kph('wind_kph_no') }}\r\n        ,{{ add_unit_conversions_to_cels('windchill_c_no') }}\r\n    FROM join_county_nm\r\n),\r\n\r\nweather_categories AS (\r\n    SELECT\r\n        *\r\n        -- Rain Chance Category\r\n        ,CASE\r\n            WHEN rain_chance_pct BETWEEN 0 AND 20 THEN 'Very Low'\r\n            WHEN rain_chance_pct BETWEEN 21 AND 40 THEN 'Low'\r\n            WHEN rain_chance_pct BETWEEN 41 AND 60 THEN 'Moderate'\r\n            WHEN rain_chance_pct BETWEEN 61 AND 80 THEN 'High'\r\n            WHEN rain_chance_pct BETWEEN 81 AND 100 THEN 'Very High'\r\n            ELSE 'Unknown'\r\n        END AS rain_chance_cd\r\n\r\n        -- Snow Chance Category\r\n        ,CASE\r\n            WHEN snow_chance_pct BETWEEN 0 AND 20 THEN 'Very Low'\r\n            WHEN snow_chance_pct BETWEEN 21 AND 40 THEN 'Low'\r\n            WHEN snow_chance_pct BETWEEN 41 AND 60 THEN 'Moderate'\r\n            WHEN snow_chance_pct BETWEEN 61 AND 80 THEN 'High'\r\n            WHEN snow_chance_pct BETWEEN 81 AND 100 THEN 'Very High'\r\n            ELSE 'Unknown'\r\n        END AS snow_chance_cd\r\n\r\n        -- Cloud Coverage Category\r\n        ,CASE\r\n            WHEN cloud_coverage_pct BETWEEN 0 AND 20 THEN 'Clear'\r\n            WHEN cloud_coverage_pct BETWEEN 21 AND 40 THEN 'Partly Cloudy'\r\n            WHEN cloud_coverage_pct BETWEEN 41 AND 60 THEN 'Cloudy'\r\n            WHEN cloud_coverage_pct BETWEEN 61 AND 80 THEN 'Overcast'\r\n            WHEN cloud_coverage_pct BETWEEN 81 AND 100 THEN 'Completely Overcast'\r\n            ELSE 'Unknown'\r\n        END AS cloud_coverage_cd\r\n        -- Temperature Category - Cels\r\n        ,CASE\r\n            WHEN temp_c_no <= 0 THEN 'Very Cold'\r\n            WHEN temp_c_no BETWEEN 1 AND 10 THEN 'Cold'\r\n            WHEN temp_c_no BETWEEN 11 AND 20 THEN 'Cool'\r\n            WHEN temp_c_no BETWEEN 21 AND 30 THEN 'Warm'\r\n            WHEN temp_c_no BETWEEN 31 AND 40 THEN 'Hot'\r\n            WHEN temp_c_no > 40 THEN 'Very Hot'\r\n            ELSE 'Unknown'\r\n        END AS temp_c_cd\r\n        -- Temperature Category - Kelvin\r\n        ,CASE\r\n            WHEN temp_k_no <= 273.15 THEN 'Very Cold'              -- 0\u00b0C\r\n            WHEN temp_k_no BETWEEN 274 AND 283 THEN 'Cold'          -- 1-10\u00b0C\r\n            WHEN temp_k_no BETWEEN 284 AND 293 THEN 'Cool'          -- 11-20\u00b0C\r\n            WHEN temp_k_no BETWEEN 294 AND 303 THEN 'Warm'          -- 21-30\u00b0C\r\n            WHEN temp_k_no BETWEEN 304 AND 313 THEN 'Hot'           -- 31-40\u00b0C\r\n            WHEN temp_k_no > 313 THEN 'Very Hot'                    -- >40\u00b0C\r\n            ELSE 'Unknown'\r\n        END AS temp_k_cd\r\n        -- Temperature Category - Fahr\r\n        ,CASE\r\n            WHEN temp_f_no <= 32 THEN 'Very Cold'                  -- 0\u00b0C = 32\u00b0F\r\n            WHEN temp_f_no BETWEEN 33 AND 50 THEN 'Cold'            -- 1-10\u00b0C \u2248 33-50\u00b0F\r\n            WHEN temp_f_no BETWEEN 51 AND 68 THEN 'Cool'            -- 11-20\u00b0C \u2248 51-68\u00b0F\r\n            WHEN temp_f_no BETWEEN 69 AND 86 THEN 'Warm'            -- 21-30\u00b0C \u2248 69-86\u00b0F\r\n            WHEN temp_f_no BETWEEN 87 AND 104 THEN 'Hot'            -- 31-40\u00b0C \u2248 87-104\u00b0F\r\n            WHEN temp_f_no > 104 THEN 'Very Hot'                    -- >40\u00b0C \u2248 >104\u00b0F\r\n            ELSE 'Unknown'\r\n        END AS temp_f_cd\r\n        -- Humidity Category\r\n        ,CASE\r\n            WHEN humidity_pct BETWEEN 0 AND 20 THEN 'Very Low'\r\n            WHEN humidity_pct BETWEEN 21 AND 40 THEN 'Low'\r\n            WHEN humidity_pct BETWEEN 41 AND 60 THEN 'Moderate'\r\n            WHEN humidity_pct BETWEEN 61 AND 80 THEN 'High'\r\n            WHEN humidity_pct BETWEEN 81 AND 100 THEN 'Very High'\r\n            ELSE 'Unknown'\r\n        END AS humidity_cd\r\n        -- Wind Category - kph\r\n        ,CASE\r\n            WHEN wind_kph_no BETWEEN 0 AND 10 THEN 'Calm'\r\n            WHEN wind_kph_no BETWEEN 11 AND 20 THEN 'Light Breeze'\r\n            WHEN wind_kph_no BETWEEN 21 AND 40 THEN 'Moderate Breeze'\r\n            WHEN wind_kph_no BETWEEN 41 AND 60 THEN 'Strong Breeze'\r\n            WHEN wind_kph_no BETWEEN 61 AND 80 THEN 'Gale'\r\n            WHEN wind_kph_no BETWEEN 81 AND 100 THEN 'Strong Gale'\r\n            WHEN wind_kph_no > 100 THEN 'Storm'\r\n            ELSE 'Unknown'\r\n        END AS wind_kph_cd\r\n        -- Wind Category - miph\r\n        ,CASE\r\n            WHEN wind_miph_no BETWEEN 0 AND 6 THEN 'Calm'\r\n            WHEN wind_miph_no BETWEEN 7 AND 12 THEN 'Light Breeze'\r\n            WHEN wind_miph_no BETWEEN 13 AND 25 THEN 'Moderate Breeze'\r\n            WHEN wind_miph_no BETWEEN 26 AND 37 THEN 'Strong Breeze'\r\n            WHEN wind_miph_no BETWEEN 38 AND 50 THEN 'Gale'\r\n            WHEN wind_miph_no BETWEEN 51 AND 62 THEN 'Strong Gale'\r\n            WHEN wind_miph_no > 62 THEN 'Storm'\r\n            ELSE 'Unknown'\r\n        END AS wind_miph_cd\r\n        -- Precip Category - mm\r\n        ,CASE\r\n            WHEN precip_mm_no = 0 THEN 'No Rain'\r\n            WHEN precip_mm_no BETWEEN 0.1 AND 2 THEN 'Light Rain'\r\n            WHEN precip_mm_no BETWEEN 2.1 AND 10 THEN 'Moderate Rain'\r\n            WHEN precip_mm_no BETWEEN 10.1 AND 30 THEN 'Heavy Rain'\r\n            WHEN precip_mm_no BETWEEN 30.1 AND 60 THEN 'Very Heavy Rain'\r\n            WHEN precip_mm_no > 60 THEN 'Extreme Rain'\r\n            ELSE 'Unknown'\r\n        END AS precip_mm_cd\r\n    FROM unit_conversion\r\n),\r\n\r\nreorder AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,weather_pk\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,country_cd\r\n        ,country_nm\r\n        ,county_nm\r\n        ,cloud_coverage_pct\r\n        ,cloud_coverage_cd\r\n        ,gust_kph_no\r\n        ,gust_miph_no\r\n        ,heatindex_c_no\r\n        ,heatindex_f_no\r\n        ,heatindex_k_no\r\n        ,humidity_pct\r\n        ,humidity_cd\r\n        ,is_day_flg\r\n        ,precip_mm_no\r\n        ,precip_mm_cd\r\n        ,pressure_mb_no\r\n        ,temp_c_no\r\n        ,temp_c_cd\r\n        ,temp_f_no\r\n        ,temp_f_cd\r\n        ,temp_k_no\r\n        ,temp_k_cd\r\n        ,temp_feelslike_no\r\n        ,date_dtt\r\n        ,time_epoch\r\n        ,rain_chance_pct\r\n        ,rain_chance_cd\r\n        ,snow_chance_pct\r\n        ,snow_chance_cd\r\n        ,uv_no\r\n        ,vis_km_no\r\n        ,vis_mi_no\r\n        ,wind_dir_cd\r\n        ,wind_kph_no\r\n        ,wind_kph_cd\r\n        ,wind_miph_no\r\n        ,wind_miph_cd\r\n        ,windchill_c_no\r\n        ,windchill_f_no\r\n        ,windchill_k_no\r\n        ,m_extracted_at_dttm\r\n        ,m_updated_at_dttm\r\n    FROM weather_categories\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "b_weather_forecast", "package": null, "version": null}, {"name": "s_dim_country", "package": null, "version": null}, {"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.gen_sk", "macro.weather_dbt.add_unit_conversions_to_cels"], "nodes": ["model.weather_dbt.b_weather_forecast", "model.weather_dbt.s_dim_country", "model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["weather_pk"], "time_spine": null}, "test.weather_dbt.s_fct_weather_forecast_accepted_range_m_valid_dt.6eae96b50b": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_accepted_range_m_valid_dt", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_accepted_range_m_valid_dt.sql", "original_file_path": "models\\020_silver\\s_fct_weather_forecast.yml", "unique_id": "test.weather_dbt.s_fct_weather_forecast_accepted_range_m_valid_dt.6eae96b50b", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_forecast_accepted_range_m_valid_dt"], "alias": "s_fct_weather_forecast_accepted_range_m_valid_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764019.9991827, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_m_valid_dt\"", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "m_valid_dt", "file_key_name": "models.s_fct_weather_forecast", "attached_node": "model.weather_dbt.s_fct_weather_forecast", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "CAST(DATEFROMPARTS(YEAR(GETDATE()), 1, 1) AS DATE)", "max_value": "CAST(DATEFROMPARTS(YEAR(GETDATE()), 12, 31) AS DATE)", "column_name": "m_valid_dt", "model": "{{ get_where_subquery(ref('s_fct_weather_forecast')) }}"}, "namespace": "dbt_utils"}}, "test.weather_dbt.s_fct_weather_forecast_not_null_weather_pk.795c9765d2": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_not_null_weather_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_not_null_weather_pk.sql", "original_file_path": "models\\020_silver\\s_fct_weather_forecast.yml", "unique_id": "test.weather_dbt.s_fct_weather_forecast_not_null_weather_pk.795c9765d2", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_forecast_not_null_weather_pk"], "alias": "s_fct_weather_forecast_not_null_weather_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764020.0102806, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_not_null_weather_pk\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weather_pk", "file_key_name": "models.s_fct_weather_forecast", "attached_node": "model.weather_dbt.s_fct_weather_forecast", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "weather_pk", "model": "{{ get_where_subquery(ref('s_fct_weather_forecast')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_weather_forecast_unique_weather_pk.c44d1db974": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_unique_weather_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_unique_weather_pk.sql", "original_file_path": "models\\020_silver\\s_fct_weather_forecast.yml", "unique_id": "test.weather_dbt.s_fct_weather_forecast_unique_weather_pk.c44d1db974", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_forecast_unique_weather_pk"], "alias": "s_fct_weather_forecast_unique_weather_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764020.0148625, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_unique_weather_pk\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weather_pk", "file_key_name": "models.s_fct_weather_forecast", "attached_node": "model.weather_dbt.s_fct_weather_forecast", "test_metadata": {"name": "unique", "kwargs": {"column_name": "weather_pk", "model": "{{ get_where_subquery(ref('s_fct_weather_forecast')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_weather_forecast_rel_s_dim_city_city_fk.7e448c69a1": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_rel_s_dim_city_city_fk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_rel_s_dim_city_city_fk.sql", "original_file_path": "models\\020_silver\\s_fct_weather_forecast.yml", "unique_id": "test.weather_dbt.s_fct_weather_forecast_rel_s_dim_city_city_fk.7e448c69a1", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_forecast_rel_s_dim_city_city_fk"], "alias": "s_fct_weather_forecast_rel_s_dim_city_city_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764020.0168176, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_rel_s_dim_city_city_fk\"", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}, {"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city_fk", "file_key_name": "models.s_fct_weather_forecast", "attached_node": "model.weather_dbt.s_fct_weather_forecast", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('s_dim_city')", "field": "city_pk", "column_name": "city_fk", "model": "{{ get_where_subquery(ref('s_fct_weather_forecast')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_weather_forecast_accepted_values_country_cd.df0ff2d172": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_accepted_values_country_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_accepted_values_country_cd.sql", "original_file_path": "models\\020_silver\\s_fct_weather_forecast.yml", "unique_id": "test.weather_dbt.s_fct_weather_forecast_accepted_values_country_cd.df0ff2d172", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_forecast_accepted_values_country_cd"], "alias": "s_fct_weather_forecast_accepted_values_country_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764020.0230024, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_values_country_cd\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_cd", "file_key_name": "models.s_fct_weather_forecast", "attached_node": "model.weather_dbt.s_fct_weather_forecast", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HU"], "column_name": "country_cd", "model": "{{ get_where_subquery(ref('s_fct_weather_forecast')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_weather_forecast_accepted_range_temp_c_no.e74a655f7c": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_accepted_range_temp_c_no", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_forecast_accepted_range_temp_c_no.sql", "original_file_path": "models\\020_silver\\s_fct_weather_forecast.yml", "unique_id": "test.weather_dbt.s_fct_weather_forecast_accepted_range_temp_c_no.e74a655f7c", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_forecast_accepted_range_temp_c_no"], "alias": "s_fct_weather_forecast_accepted_range_temp_c_no", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764020.0268526, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_temp_c_no\"", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather_forecast", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather_forecast"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "temp_c_no", "file_key_name": "models.s_fct_weather_forecast", "attached_node": "model.weather_dbt.s_fct_weather_forecast", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('v_min_temperature') }}", "max_value": "{{ var('v_max_temperature') }}", "column_name": "temp_c_no", "model": "{{ get_where_subquery(ref('s_fct_weather_forecast')) }}"}, "namespace": "dbt_utils"}}, "model.weather_dbt.s_fct_weather": {"database": "wh_weather", "schema": "dbt_silver", "name": "s_fct_weather", "resource_type": "model", "package_name": "weather_dbt", "path": "020_silver\\s_fct_weather.sql", "original_file_path": "models\\020_silver\\s_fct_weather.sql", "unique_id": "model.weather_dbt.s_fct_weather", "fqn": ["weather_dbt", "020_silver", "s_fct_weather"], "alias": "s_fct_weather", "checksum": {"name": "sha256", "checksum": "a124eb3ab47abd9a2ec23ebf0f2a6bb1e9c6b80142b2f81dfd713257a955fa18"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "The s_weather model provides a comprehensive view of weather data for various cities and countries. It includes details such as the date and time of the forecast, city and country names, cloud coverage, wind speed, heat index, humidity, precipitation, pressure, temperature, UV index, visibility, wind direction, and wind chill. The model also includes calculated fields for rain and snow chances, as well as categorical descriptions for cloud coverage, temperature feel, and humidity levels. The data is sourced from the wh_weather database, specifically the b_weather table in the dbt_bronze schema and the country_codes table in the dbt_int schema.", "columns": {"weather_pk": {"name": "weather_pk", "description": "This is the unique identifier or primary key for each weather record. It is a combination of the forecast date, country code, and city name. This identifier is used to uniquely identify each weather record in the database.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_valid_dt": {"name": "m_valid_dt", "description": "This column represents the date when the weather data was validated and considered accurate. It is in the date format (YYYY-MM-DD).", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "forecast_dt": {"name": "forecast_dt", "description": "This column represents the date for which the weather forecast is applicable. It is in the date format (YYYY-MM-DD).", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_nm": {"name": "city_nm", "description": "This column represents the name of the city for which the weather data is recorded. It is a string data type and can be used to filter or group the data based on specific cities.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "city_fk": {"name": "city_fk", "description": "A foreign key representing the unique identifier of a city in the `s_dim_city` dimension table. It is used to join forecast data with city-related metadata like county name.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_cd": {"name": "country_cd", "description": "This column represents the country code associated with the city for which the weather data is recorded. It is a string data type and can be used to filter or group the data based on specific countries using their codes.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "country_nm": {"name": "country_nm", "description": "This column represents the name of the country associated with the city for which the weather data is recorded. It is a string data type and can be used to filter or group the data based on specific countries.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_coverage_pct": {"name": "cloud_coverage_pct", "description": "This column represents the percentage of cloud coverage in the sky. It is an integer value ranging from 0 to 100, where 0 indicates a clear sky and 100 indicates a completely overcast sky.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "cloud_coverage_cd": {"name": "cloud_coverage_cd", "description": "This column provides a descriptive category for the cloud coverage. It is based on the 'cloud_coverage_pct' column and categorizes the cloud coverage into 'Clear', 'Partly Cloudy', 'Cloudy', 'Overcast', and 'Completely Overcast'.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gust_kph_no": {"name": "gust_kph_no", "description": "This column represents the speed of wind gusts in kilometers per hour. Wind gusts are brief increases in the speed of the wind, and this column provides a measure of how strong these gusts are.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "gust_miph_no": {"name": "gust_miph_no", "description": "This column represents the speed of the gusts of wind in miles per hour. It is derived from the 'gust_kph_no' column by converting kilometers per hour to miles per hour. This information can be useful for understanding the intensity of wind gusts in a particular location and time.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "heatindex_c_no": {"name": "heatindex_c_no", "description": "This column represents the heat index in degrees Celsius. The heat index is a measure that combines air temperature and relative humidity to determine an apparent temperature \u2014 how hot it actually feels. This information can be useful for understanding the perceived temperature in a particular location and time.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "heatindex_f_no": {"name": "heatindex_f_no", "description": "This column represents the heat index in degrees Fahrenheit. It is derived from the 'heatindex_c_no' column by converting degrees Celsius to degrees Fahrenheit. This information can be useful for understanding the perceived temperature in a particular location and time, especially for users more familiar with the Fahrenheit scale.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "heatindex_k_no": {"name": "heatindex_k_no", "description": "This column represents the heat index value in Kelvin. The heat index is a measure of how hot it feels when relative humidity is factored in with the actual air temperature. This value is particularly useful for understanding the perceived temperature in different weather conditions.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "humidity_pct": {"name": "humidity_pct", "description": "This column represents the humidity level as a percentage. Humidity is the concentration of water vapor present in the air. This value can help us understand the moisture content in the air for a particular day and location.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "humidity_cd": {"name": "humidity_cd", "description": "This column categorizes the humidity level into different categories such as 'Very Low', 'Low', 'Moderate', 'High', and 'Very High'. This categorization is based on the humidity percentage and provides a more user-friendly way to understand the humidity conditions.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "is_day_flg": {"name": "is_day_flg", "description": "This field indicates whether the weather data corresponds to day time or not. If the value is 1, it means the data is for day time. If the value is 0, it means the data is for night time.", "meta": {}, "data_type": "bit", "constraints": [], "quote": null, "tags": [], "granularity": null}, "precip_mm_no": {"name": "precip_mm_no", "description": "This field represents the amount of precipitation in millimeters. It gives an idea about the rainfall level for the given date and location.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "pressure_mb_no": {"name": "pressure_mb_no", "description": "This field represents the atmospheric pressure in millibars. It is a key indicator of weather conditions. High pressure often leads to clear and sunny weather, while low pressure is often associated with cloudy and rainy weather.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_c_no": {"name": "temp_c_no", "description": "This column represents the temperature in Celsius. It is a decimal number that indicates the current temperature of the location specified in the 'city_nm' and 'country_nm' columns.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_f_no": {"name": "temp_f_no", "description": "This column represents the temperature in Fahrenheit. It is a numeric value that is derived from the 'temp_c_no' column by applying the formula for converting Celsius to Fahrenheit. This provides a temperature reading that may be more familiar to users in countries that use the Fahrenheit scale.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_k_no": {"name": "temp_k_no", "description": "This column represents the temperature in Kelvin. It is a numeric value that is derived from the 'temp_c_no' column by applying the formula for converting Celsius to Kelvin. This provides a temperature reading that is used in scientific contexts.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_feelslike_no": {"name": "temp_feelslike_no", "description": "This column represents the temperature that it actually feels like outside, taking into account factors such as wind and humidity. The value is represented in degrees Celsius.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "temp_feels_like_cd": {"name": "temp_feels_like_cd", "description": "This column categorizes the 'feels like' temperature into various categories such as 'Very Cold', 'Cold', 'Cool', 'Warm', 'Hot', and 'Very Hot'. This provides a more intuitive understanding of the temperature conditions.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "date_dtt": {"name": "date_dtt", "description": "This column represents the date and time when the weather data was recorded. It is in the datetime2 format, which includes the date followed by the time (hours, minutes, seconds, and fractional seconds).", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}, "time_epoch": {"name": "time_epoch", "description": "This column represents the time at which the weather data was recorded, in the form of an epoch timestamp. An epoch timestamp is a way to track time as a running total of seconds. This count starts at the Unix Epoch on January 1st, 1970. Therefore, the timestamp is a representation of the number of seconds between a particular date and the Unix Epoch. It's a concise way to represent time and is widely used in data systems.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rain_chance_pct": {"name": "rain_chance_pct", "description": "This column represents the probability of rainfall for a particular day and location, expressed as a percentage. The value ranges from 0 to 100, where 0 indicates no chance of rain and 100 indicates a certainty of rain. This data can be used to understand the likelihood of precipitation and plan activities accordingly.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "rain_chance_cd": {"name": "rain_chance_cd", "description": "This column categorizes the chance of rain into different levels for easier understanding. The categories are 'Very Low', 'Low', 'Moderate', 'High', 'Very High', and 'Unknown'. These categories are derived from the 'rain_chance_pct' column. This categorical representation can be used for quick and easy interpretation of the likelihood of rain.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "snow_chance_pct": {"name": "snow_chance_pct", "description": "This column represents the numerical probability of snowfall in a particular location on a given day. The values range from 0 to 100, where 0 indicates no chance of snowfall and 100 indicates a very high chance of snowfall.", "meta": {}, "data_type": "int", "constraints": [], "quote": null, "tags": [], "granularity": null}, "snow_chance_cd": {"name": "snow_chance_cd", "description": "This column categorizes the chance of snowfall into different levels based on the 'snow_chance_pct' column. The categories include 'Very Low', 'Low', 'Moderate', 'High', 'Very High', and 'Unknown'. This provides a more user-friendly way to understand the likelihood of snowfall.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "uv_no": {"name": "uv_no", "description": "This column represents the Ultraviolet (UV) Index for a particular location on a given day. The UV Index is a measure of the intensity of the sun's ultraviolet radiation. Higher values indicate stronger UV radiation, which can be harmful to the skin and eyes if proper protection is not used.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "vis_km_no": {"name": "vis_km_no", "description": "This column represents the visibility in kilometers. It is a measure of the distance at which an object or light can be clearly discerned.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "vis_mi_no": {"name": "vis_mi_no", "description": "This column represents the visibility in miles. It is a measure of the distance at which an object or light can be clearly discerned.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wind_dir_cd": {"name": "wind_dir_cd", "description": "This column represents the wind direction. It is a measure of the direction from which the wind is coming. The value is represented as a code, for example, 'N' for North, 'S' for South, 'E' for East, and 'W' for West.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wind_kph_no": {"name": "wind_kph_no", "description": "This column represents the speed of the wind in kilometers per hour. It is a key indicator of weather conditions and can be used to understand the intensity of the wind in a particular location at a given time.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "wind_miph_no": {"name": "wind_miph_no", "description": "This column represents the speed of the wind in miles per hour. This is a conversion from the original kilometers per hour measurement, providing a more familiar unit of measurement for users in countries that use the imperial system.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "windchill_c_no": {"name": "windchill_c_no", "description": "This column represents the wind chill factor in degrees Celsius. The wind chill factor is a calculated value that represents how much colder the wind makes a human feel. This is a crucial measure for understanding real feel temperature, especially in colder climates.", "meta": {}, "data_type": "decimal", "constraints": [], "quote": null, "tags": [], "granularity": null}, "windchill_f_no": {"name": "windchill_f_no", "description": "This column represents the wind chill factor in Fahrenheit. The wind chill factor is a measure of how cold it feels when considering the rate of heat loss from the human body resulting from the combined effect of low temperature and wind. As wind speed increases, it can carry heat away from your body much more quickly, causing skin temperature to decrease and making the surroundings feel colder.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "windchill_k_no": {"name": "windchill_k_no", "description": "This column represents the wind chill factor in Kelvin. The wind chill factor is a measure of how cold it feels when considering the rate of heat loss from the human body resulting from the combined effect of low temperature and wind. As wind speed increases, it can carry heat away from your body much more quickly, causing skin temperature to decrease and making the surroundings feel colder.", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_extracted_at_dttm": {"name": "m_extracted_at_dttm", "description": "This column represents the date and time at which the weather data was extracted from the source system. This timestamp is useful for tracking data lineage and understanding when the data was last updated in the database.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}, "m_updated_at_dttm": {"name": "m_updated_at_dttm", "description": "This column represents the date and time when the weather data was last updated. It is useful for tracking the freshness of the data and understanding when the latest changes were made.", "meta": {}, "data_type": "datetime2", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "weather_dbt://models\\020_silver\\s_fct_weather.yml", "build_path": null, "unrendered_config": {"on_schema_change": "sync_all_columns", "schema": "silver", "materialized": "table"}, "created_at": 1745764063.4801908, "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_fct_weather\"", "raw_code": "WITH b_weather AS (\r\n    SELECT \r\n        *\r\n    FROM {{ref('b_weather') }}\r\n),\r\n\r\ns_dim_country AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_country') }}\r\n),\r\n\r\ns_dim_city AS (\r\n    SELECT\r\n        *\r\n    FROM {{ ref('s_dim_city') }}\r\n),\r\n\r\njoin_country_cd AS (\r\n    SELECT\r\n        b_weather.*\r\n        ,s_dim_country.country_cd AS country_cd\r\n    FROM b_weather\r\n    JOIN s_dim_country\r\n    ON b_weather.country_nm = s_dim_country.country_nm\r\n),\r\n\r\ngen_sk AS (\r\n    SELECT\r\n        *\r\n        ,{{ gen_sk(['m_valid_dt', 'forecast_dt', 'country_cd', 'city_nm', 'time_epoch']) }} AS weather_pk\r\n        ,{{ gen_sk(['country_cd', 'city_nm']) }} AS city_fk\r\n    FROM join_country_cd\r\n),\r\n\r\njoin_county_nm AS (\r\n    SELECT\r\n        gen_sk.*\r\n        ,s_dim_city.county_nm\r\n    FROM gen_sk\r\n    JOIN s_dim_city\r\n    ON gen_sk.city_fk = s_dim_city.city_pk\r\n),\r\n\r\nunit_conversion AS (\r\n    SELECT\r\n        *\r\n        ,{{ add_unit_conversions_to_kph('gust_kph_no') }}\r\n        ,{{ add_unit_conversions_to_cels('temp_c_no') }}\r\n        ,{{ add_unit_conversions_to_cels('heatindex_c_no') }}\r\n        ,vis_km_no * {{ var('v_km_to_mi') }} AS vis_mi_no\r\n        ,{{ add_unit_conversions_to_kph('wind_kph_no') }}\r\n        ,{{ add_unit_conversions_to_cels('windchill_c_no') }}\r\n    FROM join_county_nm\r\n),\r\n\r\nweather_categories AS (\r\n    SELECT\r\n        *\r\n        -- Rain Chance Category\r\n        ,CASE\r\n            WHEN rain_chance_pct BETWEEN 0 AND 20 THEN 'Very Low'\r\n            WHEN rain_chance_pct BETWEEN 21 AND 40 THEN 'Low'\r\n            WHEN rain_chance_pct BETWEEN 41 AND 60 THEN 'Moderate'\r\n            WHEN rain_chance_pct BETWEEN 61 AND 80 THEN 'High'\r\n            WHEN rain_chance_pct BETWEEN 81 AND 100 THEN 'Very High'\r\n            ELSE 'Unknown'\r\n        END AS rain_chance_cd\r\n\r\n        -- Snow Chance Category\r\n        ,CASE\r\n            WHEN snow_chance_pct BETWEEN 0 AND 20 THEN 'Very Low'\r\n            WHEN snow_chance_pct BETWEEN 21 AND 40 THEN 'Low'\r\n            WHEN snow_chance_pct BETWEEN 41 AND 60 THEN 'Moderate'\r\n            WHEN snow_chance_pct BETWEEN 61 AND 80 THEN 'High'\r\n            WHEN snow_chance_pct BETWEEN 81 AND 100 THEN 'Very High'\r\n            ELSE 'Unknown'\r\n        END AS snow_chance_cd\r\n\r\n        -- Cloud Coverage Category\r\n        ,CASE\r\n            WHEN cloud_coverage_pct BETWEEN 0 AND 20 THEN 'Clear'\r\n            WHEN cloud_coverage_pct BETWEEN 21 AND 40 THEN 'Partly Cloudy'\r\n            WHEN cloud_coverage_pct BETWEEN 41 AND 60 THEN 'Cloudy'\r\n            WHEN cloud_coverage_pct BETWEEN 61 AND 80 THEN 'Overcast'\r\n            WHEN cloud_coverage_pct BETWEEN 81 AND 100 THEN 'Completely Overcast'\r\n            ELSE 'Unknown'\r\n        END AS cloud_coverage_cd\r\n        -- Temperature Category - Cels\r\n        ,CASE\r\n            WHEN temp_c_no <= 0 THEN 'Very Cold'\r\n            WHEN temp_c_no BETWEEN 1 AND 10 THEN 'Cold'\r\n            WHEN temp_c_no BETWEEN 11 AND 20 THEN 'Cool'\r\n            WHEN temp_c_no BETWEEN 21 AND 30 THEN 'Warm'\r\n            WHEN temp_c_no BETWEEN 31 AND 40 THEN 'Hot'\r\n            WHEN temp_c_no > 40 THEN 'Very Hot'\r\n            ELSE 'Unknown'\r\n        END AS temp_c_cd\r\n        -- Temperature Category - Kelvin\r\n        ,CASE\r\n            WHEN temp_k_no <= 273.15 THEN 'Very Cold'              -- 0\u00b0C\r\n            WHEN temp_k_no BETWEEN 274 AND 283 THEN 'Cold'          -- 1-10\u00b0C\r\n            WHEN temp_k_no BETWEEN 284 AND 293 THEN 'Cool'          -- 11-20\u00b0C\r\n            WHEN temp_k_no BETWEEN 294 AND 303 THEN 'Warm'          -- 21-30\u00b0C\r\n            WHEN temp_k_no BETWEEN 304 AND 313 THEN 'Hot'           -- 31-40\u00b0C\r\n            WHEN temp_k_no > 313 THEN 'Very Hot'                    -- >40\u00b0C\r\n            ELSE 'Unknown'\r\n        END AS temp_k_cd\r\n        -- Temperature Category - Fahr\r\n        ,CASE\r\n            WHEN temp_f_no <= 32 THEN 'Very Cold'                  -- 0\u00b0C = 32\u00b0F\r\n            WHEN temp_f_no BETWEEN 33 AND 50 THEN 'Cold'            -- 1-10\u00b0C \u2248 33-50\u00b0F\r\n            WHEN temp_f_no BETWEEN 51 AND 68 THEN 'Cool'            -- 11-20\u00b0C \u2248 51-68\u00b0F\r\n            WHEN temp_f_no BETWEEN 69 AND 86 THEN 'Warm'            -- 21-30\u00b0C \u2248 69-86\u00b0F\r\n            WHEN temp_f_no BETWEEN 87 AND 104 THEN 'Hot'            -- 31-40\u00b0C \u2248 87-104\u00b0F\r\n            WHEN temp_f_no > 104 THEN 'Very Hot'                    -- >40\u00b0C \u2248 >104\u00b0F\r\n            ELSE 'Unknown'\r\n        END AS temp_f_cd\r\n        -- Humidity Category\r\n        ,CASE\r\n            WHEN humidity_pct BETWEEN 0 AND 20 THEN 'Very Low'\r\n            WHEN humidity_pct BETWEEN 21 AND 40 THEN 'Low'\r\n            WHEN humidity_pct BETWEEN 41 AND 60 THEN 'Moderate'\r\n            WHEN humidity_pct BETWEEN 61 AND 80 THEN 'High'\r\n            WHEN humidity_pct BETWEEN 81 AND 100 THEN 'Very High'\r\n            ELSE 'Unknown'\r\n        END AS humidity_cd\r\n        -- Wind Category - kph\r\n        ,CASE\r\n            WHEN wind_kph_no BETWEEN 0 AND 10 THEN 'Calm'\r\n            WHEN wind_kph_no BETWEEN 11 AND 20 THEN 'Light Breeze'\r\n            WHEN wind_kph_no BETWEEN 21 AND 40 THEN 'Moderate Breeze'\r\n            WHEN wind_kph_no BETWEEN 41 AND 60 THEN 'Strong Breeze'\r\n            WHEN wind_kph_no BETWEEN 61 AND 80 THEN 'Gale'\r\n            WHEN wind_kph_no BETWEEN 81 AND 100 THEN 'Strong Gale'\r\n            WHEN wind_kph_no > 100 THEN 'Storm'\r\n            ELSE 'Unknown'\r\n        END AS wind_kph_cd\r\n         -- Wind Category - miph\r\n        ,CASE\r\n            WHEN wind_miph_no BETWEEN 0 AND 6 THEN 'Calm'\r\n            WHEN wind_miph_no BETWEEN 7 AND 12 THEN 'Light Breeze'\r\n            WHEN wind_miph_no BETWEEN 13 AND 25 THEN 'Moderate Breeze'\r\n            WHEN wind_miph_no BETWEEN 26 AND 37 THEN 'Strong Breeze'\r\n            WHEN wind_miph_no BETWEEN 38 AND 50 THEN 'Gale'\r\n            WHEN wind_miph_no BETWEEN 51 AND 62 THEN 'Strong Gale'\r\n            WHEN wind_miph_no > 62 THEN 'Storm'\r\n            ELSE 'Unknown'\r\n        END AS wind_miph_cd\r\n        -- Precip Category - mm\r\n        ,CASE\r\n            WHEN precip_mm_no = 0 THEN 'No Rain'\r\n            WHEN precip_mm_no BETWEEN 0.1 AND 2 THEN 'Light Rain'\r\n            WHEN precip_mm_no BETWEEN 2.1 AND 10 THEN 'Moderate Rain'\r\n            WHEN precip_mm_no BETWEEN 10.1 AND 30 THEN 'Heavy Rain'\r\n            WHEN precip_mm_no BETWEEN 30.1 AND 60 THEN 'Very Heavy Rain'\r\n            WHEN precip_mm_no > 60 THEN 'Extreme Rain'\r\n            ELSE 'Unknown'\r\n        END AS precip_mm_cd\r\n    FROM unit_conversion\r\n),\r\n\r\nreorder AS (\r\n    SELECT\r\n        m_valid_dt\r\n        ,weather_pk\r\n        ,forecast_dt\r\n        ,city_nm\r\n        ,city_fk\r\n        ,country_cd\r\n        ,country_nm\r\n        ,county_nm\r\n        ,cloud_coverage_pct\r\n        ,cloud_coverage_cd\r\n        ,gust_kph_no\r\n        ,gust_miph_no\r\n        ,heatindex_c_no\r\n        ,heatindex_f_no\r\n        ,heatindex_k_no\r\n        ,humidity_pct\r\n        ,humidity_cd\r\n        ,is_day_flg\r\n        ,precip_mm_no\r\n        ,precip_mm_cd\r\n        ,pressure_mb_no\r\n        ,temp_c_no\r\n        ,temp_c_cd\r\n        ,temp_f_no\r\n        ,temp_f_cd\r\n        ,temp_k_no\r\n        ,temp_k_cd\r\n        ,temp_feelslike_no\r\n        ,date_dtt\r\n        ,time_epoch\r\n        ,rain_chance_pct\r\n        ,rain_chance_cd\r\n        ,snow_chance_pct\r\n        ,snow_chance_cd\r\n        ,uv_no\r\n        ,vis_km_no\r\n        ,vis_mi_no\r\n        ,wind_dir_cd\r\n        ,wind_kph_no\r\n        ,wind_kph_cd\r\n        ,wind_miph_no\r\n        ,wind_miph_cd\r\n        ,windchill_c_no\r\n        ,windchill_f_no\r\n        ,windchill_k_no\r\n        ,m_extracted_at_dttm\r\n        ,m_updated_at_dttm\r\n    FROM weather_categories\r\n)\r\n\r\nSELECT * FROM reorder", "language": "sql", "refs": [{"name": "b_weather", "package": null, "version": null}, {"name": "s_dim_country", "package": null, "version": null}, {"name": "s_dim_city", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.gen_sk", "macro.weather_dbt.add_unit_conversions_to_cels"], "nodes": ["model.weather_dbt.b_weather", "model.weather_dbt.s_dim_country", "model.weather_dbt.s_dim_city"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["weather_pk"], "time_spine": null}, "test.weather_dbt.s_fct_weather_not_null_weather_pk.e318eddf85": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_not_null_weather_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_not_null_weather_pk.sql", "original_file_path": "models\\020_silver\\s_fct_weather.yml", "unique_id": "test.weather_dbt.s_fct_weather_not_null_weather_pk.e318eddf85", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_not_null_weather_pk"], "alias": "s_fct_weather_not_null_weather_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764063.4810383, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_not_null_weather_pk\"", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weather_pk", "file_key_name": "models.s_fct_weather", "attached_node": "model.weather_dbt.s_fct_weather", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "weather_pk", "model": "{{ get_where_subquery(ref('s_fct_weather')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_weather_unique_weather_pk.6c57758345": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_unique_weather_pk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_unique_weather_pk.sql", "original_file_path": "models\\020_silver\\s_fct_weather.yml", "unique_id": "test.weather_dbt.s_fct_weather_unique_weather_pk.6c57758345", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_unique_weather_pk"], "alias": "s_fct_weather_unique_weather_pk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764063.4842696, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_unique_weather_pk\"", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "weather_pk", "file_key_name": "models.s_fct_weather", "attached_node": "model.weather_dbt.s_fct_weather", "test_metadata": {"name": "unique", "kwargs": {"column_name": "weather_pk", "model": "{{ get_where_subquery(ref('s_fct_weather')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_weather_accepted_range_m_valid_dt.737ef6dc96": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_accepted_range_m_valid_dt", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_accepted_range_m_valid_dt.sql", "original_file_path": "models\\020_silver\\s_fct_weather.yml", "unique_id": "test.weather_dbt.s_fct_weather_accepted_range_m_valid_dt.737ef6dc96", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_accepted_range_m_valid_dt"], "alias": "s_fct_weather_accepted_range_m_valid_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764063.4871607, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_m_valid_dt\"", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "m_valid_dt", "file_key_name": "models.s_fct_weather", "attached_node": "model.weather_dbt.s_fct_weather", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "CAST(DATEFROMPARTS(YEAR(GETDATE()), 1, 1) AS DATE)", "max_value": "CAST(DATEFROMPARTS(YEAR(GETDATE()), 12, 31) AS DATE)", "column_name": "m_valid_dt", "model": "{{ get_where_subquery(ref('s_fct_weather')) }}"}, "namespace": "dbt_utils"}}, "test.weather_dbt.s_fct_weather_rel_s_dim_city_city_fk.38d9746afc": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_rel_s_dim_city_city_fk", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_rel_s_dim_city_city_fk.sql", "original_file_path": "models\\020_silver\\s_fct_weather.yml", "unique_id": "test.weather_dbt.s_fct_weather_rel_s_dim_city_city_fk.38d9746afc", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_rel_s_dim_city_city_fk"], "alias": "s_fct_weather_rel_s_dim_city_city_fk", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764063.4902604, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_rel_s_dim_city_city_fk\"", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_dim_city", "package": null, "version": null}, {"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city_fk", "file_key_name": "models.s_fct_weather", "attached_node": "model.weather_dbt.s_fct_weather", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('s_dim_city')", "field": "city_pk", "column_name": "city_fk", "model": "{{ get_where_subquery(ref('s_fct_weather')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_weather_accepted_values_country_cd.7da73a434d": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_accepted_values_country_cd", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_accepted_values_country_cd.sql", "original_file_path": "models\\020_silver\\s_fct_weather.yml", "unique_id": "test.weather_dbt.s_fct_weather_accepted_values_country_cd.7da73a434d", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_accepted_values_country_cd"], "alias": "s_fct_weather_accepted_values_country_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764063.4931583, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_values_country_cd\"", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.weather_dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_cd", "file_key_name": "models.s_fct_weather", "attached_node": "model.weather_dbt.s_fct_weather", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HU"], "column_name": "country_cd", "model": "{{ get_where_subquery(ref('s_fct_weather')) }}"}, "namespace": null}}, "test.weather_dbt.s_fct_weather_accepted_range_temp_c_no.4ab123a254": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_accepted_range_temp_c_no", "resource_type": "test", "package_name": "weather_dbt", "path": "s_fct_weather_accepted_range_temp_c_no.sql", "original_file_path": "models\\020_silver\\s_fct_weather.yml", "unique_id": "test.weather_dbt.s_fct_weather_accepted_range_temp_c_no.4ab123a254", "fqn": ["weather_dbt", "020_silver", "s_fct_weather_accepted_range_temp_c_no"], "alias": "s_fct_weather_accepted_range_temp_c_no", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dq_test", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "schema": "dq_test", "store_failures_as": "table"}, "created_at": 1745764063.497179, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_temp_c_no\"", "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "s_fct_weather", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.weather_dbt.s_fct_weather"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "temp_c_no", "file_key_name": "models.s_fct_weather", "attached_node": "model.weather_dbt.s_fct_weather", "test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('v_min_temperature') }}", "max_value": "{{ var('v_max_temperature') }}", "column_name": "temp_c_no", "model": "{{ get_where_subquery(ref('s_fct_weather')) }}"}, "namespace": "dbt_utils"}}}, "sources": {"source.weather_dbt.landing_delta.city": {"database": "lh_weather", "schema": "dbo", "name": "city", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.landing_delta.city", "fqn": ["weather_dbt", "000_sources", "landing_delta", "city"], "source_name": "landing_delta", "source_description": "", "loader": "", "identifier": "city", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"lh_weather\".\"dbo\".\"city\"", "created_at": 1745762657.6335678, "unrendered_database": "lh_weather", "unrendered_schema": "dbo"}, "source.weather_dbt.landing_delta.ld_date": {"database": "lh_weather", "schema": "dbo", "name": "ld_date", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.landing_delta.ld_date", "fqn": ["weather_dbt", "000_sources", "landing_delta", "ld_date"], "source_name": "landing_delta", "source_description": "", "loader": "", "identifier": "ld_date", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"lh_weather\".\"dbo\".\"ld_date\"", "created_at": 1745762657.6335678, "unrendered_database": "lh_weather", "unrendered_schema": "dbo"}, "source.weather_dbt.landing_delta.ld_weather_astro": {"database": "lh_weather", "schema": "dbo", "name": "ld_weather_astro", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.landing_delta.ld_weather_astro", "fqn": ["weather_dbt", "000_sources", "landing_delta", "ld_weather_astro"], "source_name": "landing_delta", "source_description": "", "loader": "", "identifier": "ld_weather_astro", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"lh_weather\".\"dbo\".\"ld_weather_astro\"", "created_at": 1745762657.6335678, "unrendered_database": "lh_weather", "unrendered_schema": "dbo"}, "source.weather_dbt.landing_delta.ld_weather_astro_forecast": {"database": "lh_weather", "schema": "dbo", "name": "ld_weather_astro_forecast", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.landing_delta.ld_weather_astro_forecast", "fqn": ["weather_dbt", "000_sources", "landing_delta", "ld_weather_astro_forecast"], "source_name": "landing_delta", "source_description": "", "loader": "", "identifier": "ld_weather_astro_forecast", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"lh_weather\".\"dbo\".\"ld_weather_astro_forecast\"", "created_at": 1745762657.6335678, "unrendered_database": "lh_weather", "unrendered_schema": "dbo"}, "source.weather_dbt.landing_delta.ld_weather_forecast": {"database": "lh_weather", "schema": "dbo", "name": "ld_weather_forecast", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.landing_delta.ld_weather_forecast", "fqn": ["weather_dbt", "000_sources", "landing_delta", "ld_weather_forecast"], "source_name": "landing_delta", "source_description": "", "loader": "", "identifier": "ld_weather_forecast", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"lh_weather\".\"dbo\".\"ld_weather_forecast\"", "created_at": 1745762657.6335678, "unrendered_database": "lh_weather", "unrendered_schema": "dbo"}, "source.weather_dbt.landing_delta.ld_weather_measure": {"database": "lh_weather", "schema": "dbo", "name": "ld_weather_measure", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.landing_delta.ld_weather_measure", "fqn": ["weather_dbt", "000_sources", "landing_delta", "ld_weather_measure"], "source_name": "landing_delta", "source_description": "", "loader": "", "identifier": "ld_weather_measure", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"lh_weather\".\"dbo\".\"ld_weather_measure\"", "created_at": 1745762657.6335678, "unrendered_database": "lh_weather", "unrendered_schema": "dbo"}, "source.weather_dbt.seed.city": {"database": "wh_weather", "schema": "dbt", "name": "city", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.seed.city", "fqn": ["weather_dbt", "000_sources", "seed", "city"], "source_name": "seed", "source_description": "", "loader": "", "identifier": "city", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt\".\"city\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt"}, "source.weather_dbt.seed.country": {"database": "wh_weather", "schema": "dbt", "name": "country", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.seed.country", "fqn": ["weather_dbt", "000_sources", "seed", "country"], "source_name": "seed", "source_description": "", "loader": "", "identifier": "country", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt\".\"country\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_cloud_coverage_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_cloud_coverage_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_cloud_coverage_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_invalid_cloud_coverage_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_invalid_cloud_coverage_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_cloud_coverage_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_dim_city_accepted_values_country_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_dim_city_accepted_values_country_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_dim_city_accepted_values_country_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_dim_city_accepted_values_country_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_dim_city_accepted_values_country_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_accepted_values_country_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_dim_city_not_null_city_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_dim_city_not_null_city_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_dim_city_not_null_city_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_dim_city_not_null_city_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_dim_city_not_null_city_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_not_null_city_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_dim_city_unique_city_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_dim_city_unique_city_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_dim_city_unique_city_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_dim_city_unique_city_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_dim_city_unique_city_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_unique_city_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_range_m_valid_dt": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_accepted_range_m_valid_dt", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_range_m_valid_dt", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_accepted_range_m_valid_dt"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_accepted_range_m_valid_dt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_range_m_valid_dt\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_values_country_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_accepted_values_country_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_values_country_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_accepted_values_country_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_accepted_values_country_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_values_country_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_range_m_valid_dt": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_accepted_range_m_valid_dt", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_range_m_valid_dt", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_forecast_accepted_range_m_valid_dt"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_forecast_accepted_range_m_valid_dt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_range_m_valid_dt\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_values_country_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_accepted_values_country_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_values_country_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_forecast_accepted_values_country_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_forecast_accepted_values_country_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_values_country_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_not_null_astro_forecast_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_not_null_astro_forecast_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_not_null_astro_forecast_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_forecast_not_null_astro_forecast_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_forecast_not_null_astro_forecast_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_not_null_astro_forecast_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_unique_astro_forecast_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_unique_astro_forecast_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_unique_astro_forecast_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_forecast_unique_astro_forecast_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_forecast_unique_astro_forecast_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_unique_astro_forecast_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_not_null_astro_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_not_null_astro_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_not_null_astro_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_not_null_astro_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_not_null_astro_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_not_null_astro_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_unique_astro_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_unique_astro_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_unique_astro_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_unique_astro_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_unique_astro_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_unique_astro_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_m_valid_dt": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_accepted_range_m_valid_dt", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_m_valid_dt", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_accepted_range_m_valid_dt"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_accepted_range_m_valid_dt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_m_valid_dt\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_temp_c_no": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_accepted_range_temp_c_no", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_temp_c_no", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_accepted_range_temp_c_no"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_accepted_range_temp_c_no", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_temp_c_no\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_values_country_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_accepted_values_country_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_values_country_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_accepted_values_country_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_accepted_values_country_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_values_country_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_m_valid_dt": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_accepted_range_m_valid_dt", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_m_valid_dt", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_accepted_range_m_valid_dt"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_accepted_range_m_valid_dt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_m_valid_dt\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_temp_c_no": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_accepted_range_temp_c_no", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_temp_c_no", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_accepted_range_temp_c_no"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_accepted_range_temp_c_no", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_temp_c_no\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_values_country_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_accepted_values_country_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_values_country_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_accepted_values_country_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_accepted_values_country_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_values_country_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_humidity_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_humidity_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_humidity_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_invalid_humidity_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_invalid_humidity_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_humidity_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_rain_chance_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_rain_chance_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_rain_chance_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_invalid_rain_chance_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_invalid_rain_chance_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_rain_chance_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_snow_chance_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_snow_chance_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_snow_chance_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_invalid_snow_chance_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_invalid_snow_chance_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_snow_chance_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_temp_feelslike_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_invalid_temp_feelslike_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_temp_feelslike_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_invalid_temp_feelslike_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_invalid_temp_feelslike_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_temp_feelslike_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_not_null_weather_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_not_null_weather_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_not_null_weather_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_not_null_weather_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_not_null_weather_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_not_null_weather_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_unique_weather_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_unique_weather_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_unique_weather_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_unique_weather_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_unique_weather_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_unique_weather_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_cloud_coverage_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_cloud_coverage_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_cloud_coverage_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_invalid_cloud_coverage_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_invalid_cloud_coverage_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_cloud_coverage_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_humidity_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_humidity_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_humidity_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_invalid_humidity_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_invalid_humidity_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_humidity_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_rain_chance_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_rain_chance_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_rain_chance_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_invalid_rain_chance_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_invalid_rain_chance_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_rain_chance_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_snow_chance_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_snow_chance_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_snow_chance_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_invalid_snow_chance_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_invalid_snow_chance_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_snow_chance_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_temp_feelslike_cd": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_invalid_temp_feelslike_cd", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_temp_feelslike_cd", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_invalid_temp_feelslike_cd"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_invalid_temp_feelslike_cd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_temp_feelslike_cd\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_not_null_weather_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_not_null_weather_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_not_null_weather_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_not_null_weather_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_not_null_weather_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_not_null_weather_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_unique_weather_pk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_unique_weather_pk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_unique_weather_pk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_unique_weather_pk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_unique_weather_pk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_unique_weather_pk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_rel_s_dim_city_city_fk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_forecast_rel_s_dim_city_city_fk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_rel_s_dim_city_city_fk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_forecast_rel_s_dim_city_city_fk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_forecast_rel_s_dim_city_city_fk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_rel_s_dim_city_city_fk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_astro_rel_s_dim_city_city_fk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_astro_rel_s_dim_city_city_fk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_astro_rel_s_dim_city_city_fk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_astro_rel_s_dim_city_city_fk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_astro_rel_s_dim_city_city_fk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_rel_s_dim_city_city_fk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_rel_s_dim_city_city_fk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_forecast_rel_s_dim_city_city_fk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_rel_s_dim_city_city_fk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_forecast_rel_s_dim_city_city_fk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_forecast_rel_s_dim_city_city_fk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_rel_s_dim_city_city_fk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}, "source.weather_dbt.dbt_dq_test.s_fct_weather_rel_s_dim_city_city_fk": {"database": "wh_weather", "schema": "dbt_dq_test", "name": "s_fct_weather_rel_s_dim_city_city_fk", "resource_type": "source", "package_name": "weather_dbt", "path": "models\\000_sources\\sources.yml", "original_file_path": "models\\000_sources\\sources.yml", "unique_id": "source.weather_dbt.dbt_dq_test.s_fct_weather_rel_s_dim_city_city_fk", "fqn": ["weather_dbt", "000_sources", "dbt_dq_test", "s_fct_weather_rel_s_dim_city_city_fk"], "source_name": "dbt_dq_test", "source_description": "", "loader": "", "identifier": "s_fct_weather_rel_s_dim_city_city_fk", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_rel_s_dim_city_city_fk\"", "created_at": 1745762657.6335678, "unrendered_database": "wh_weather", "unrendered_schema": "dbt_dq_test"}}, "macros": {"macro.weather_dbt.gen_sk": {"name": "gen_sk", "resource_type": "macro", "package_name": "weather_dbt", "path": "macros\\gen_sk.sql", "original_file_path": "macros\\gen_sk.sql", "unique_id": "macro.weather_dbt.gen_sk", "macro_sql": "{%- macro gen_sk(field_list, max_varchar_string_length=64) -%}\r\n\r\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\r\n    {%- set default_null_value = \"\" -%}\r\n{%- else -%}\r\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\r\n{%- endif -%}\r\n\r\n{%- set fields = [] -%}\r\n\r\n{%- for field in field_list -%}\r\n    {%- if max_varchar_string_length == null -%}\r\n        {%- do fields.append(\r\n            \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\r\n        ) -%}\r\n    {%- else -%}\r\n        {%- do fields.append(\r\n            \"coalesce(cast(\" ~ field ~ \" as VARCHAR(\" ~ max_varchar_string_length ~ \")), '\" ~ default_null_value  ~\"')\"\r\n        ) -%}\r\n    {%- endif -%}\r\n\r\n    {%- if not loop.last %}\r\n        {%- do fields.append(\"'-'\") -%}\r\n    {%- endif -%}\r\n\r\n{%- endfor -%}\r\n\r\n{%- set concatenated_string = dbt.concat(fields) -%}\r\n\r\nlower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), {{ concatenated_string }}), '')), 2))\r\n{# {{ dbt.hash(concatenated_string) }} #}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5198956, "supported_languages": null}, "macro.weather_dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "weather_dbt", "path": "tests\\generic\\test_accepted_values.sql", "original_file_path": "tests\\generic\\test_accepted_values.sql", "unique_id": "macro.weather_dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values) %}\r\n\r\nwith validation as (\r\n    select *\r\n    from {{ model }}\r\n    where {{ column_name }} not in \r\n        {{ '(' }}\r\n\r\n        {% for val in values %}\r\n            '{{ val }}'{% if not loop.last %}, {% endif %}\r\n        {% endfor %}\r\n   {{ ')' }}\r\n)\r\n\r\nselect * from validation\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5198956, "supported_languages": null}, "macro.weather_dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "weather_dbt", "path": "tests\\generic\\test_not_null.sql", "original_file_path": "tests\\generic\\test_not_null.sql", "unique_id": "macro.weather_dbt.test_not_null", "macro_sql": "{% test not_null (model, column_name) %}\r\n\r\nwith validation as (\r\n    SELECT\r\n        *\r\n    FROM {{ model }}\r\n    WHERE {{ column_name }} IS NULL\r\n)\r\n\r\nselect * from validation\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5198956, "supported_languages": null}, "macro.weather_dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "weather_dbt", "path": "tests\\generic\\test_relationships.sql", "original_file_path": "tests\\generic\\test_relationships.sql", "unique_id": "macro.weather_dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\r\n    with validation as (\r\n\r\n        -- Find all records in the child model where the foreign key does not exist in the parent model\r\n        select child.*\r\n        from {{ model }} as child\r\n        left join {{ to }} as parent\r\n        on child.{{ column_name }} = parent.{{ field }}\r\n        where parent.{{ field }} is null and child.{{ column_name }} is not null\r\n    )\r\n\r\n    -- Return all records from the child model that have unmatched foreign keys\r\n    select *\r\n    from validation\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5198956, "supported_languages": null}, "macro.weather_dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "weather_dbt", "path": "tests\\generic\\test_unique.sql", "original_file_path": "tests\\generic\\test_unique.sql", "unique_id": "macro.weather_dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\r\n    with validation as (\r\n        -- Find all values of the column that appear more than once\r\n        select {{ column_name }}\r\n        from {{ model }}\r\n        group by {{ column_name }}\r\n        having count(*) > 1\r\n    )\r\n\r\n    -- Return the full records for rows that have duplicate values\r\n    select *\r\n    from {{ model }}\r\n    where {{ column_name }} in (select {{ column_name }} from validation)\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5198956, "supported_languages": null}, "macro.dbt_fabric.fabric__get_show_grant_sql": {"name": "fabric__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_show_grant_sql", "macro_sql": "{% macro fabric__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES {{ information_schema_hints() }}\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5198956, "supported_languages": null}, "macro.dbt_fabric.fabric__get_grant_sql": {"name": "fabric__get_grant_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_grant_sql", "macro_sql": "\n\n\n{%- macro fabric__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5198956, "supported_languages": null}, "macro.dbt_fabric.fabric__get_revoke_sql": {"name": "fabric__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__get_revoke_sql", "macro_sql": "{%- macro fabric__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5198956, "supported_languages": null}, "macro.dbt_fabric.get_provision_sql": {"name": "get_provision_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.get_provision_sql", "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5247388, "supported_languages": null}, "macro.dbt_fabric.fabric__apply_grants": {"name": "fabric__apply_grants", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_fabric.fabric__apply_grants", "macro_sql": "{% macro fabric__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5257266, "supported_languages": null}, "macro.dbt_fabric.fabric__get_catalog": {"name": "fabric__get_catalog", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\catalog.sql", "original_file_path": "macros\\adapters\\catalog.sql", "unique_id": "macro.dbt_fabric.fabric__get_catalog", "macro_sql": "{% macro fabric__get_catalog(information_schemas, schemas) -%}\n\n    {% set query_label = apply_label() %}\n    {%- call statement('catalog', fetch_result=True) -%}\n        {{ get_use_database_sql(information_schemas.database) }}\n        with\n        principals as (\n            select\n                name as principal_name,\n                principal_id as principal_id\n            from\n                sys.database_principals {{ information_schema_hints() }}\n        ),\n\n        schemas as (\n            select\n                name as schema_name,\n                schema_id as schema_id,\n                principal_id as principal_id\n            from\n                sys.schemas {{ information_schema_hints() }}\n        ),\n\n        tables as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'BASE TABLE' as table_type\n            from\n                sys.tables {{ information_schema_hints() }}\n        ),\n\n        tables_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                tables\n            join schemas on tables.schema_id = schemas.schema_id\n        ),\n\n        views as (\n            select\n                object_id,\n                name as table_name,\n                schema_id as schema_id,\n                principal_id as principal_id,\n                'VIEW' as table_type\n            from\n                sys.views {{ information_schema_hints() }}\n        ),\n\n        views_with_metadata as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n                table_type\n            from\n                views\n            join schemas on views.schema_id = schemas.schema_id\n        ),\n\n        tables_and_views as (\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                tables_with_metadata\n            join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n            union all\n            select\n                object_id,\n                table_name,\n                schema_name,\n                principal_name,\n                table_type\n            from\n                views_with_metadata\n            join principals on views_with_metadata.owner_principal_id = principals.principal_id\n        ),\n\n        cols as (\n\n            select\n                c.object_id,\n                c.name as column_name,\n                c.column_id as column_index,\n                t.name as column_type\n            from sys.columns as c {{ information_schema_hints() }}\n            left join sys.types as t on c.system_type_id = t.system_type_id\n        )\n\n        select\n            DB_NAME() as table_database,\n            tv.schema_name as table_schema,\n            tv.table_name,\n            tv.table_type,\n            null as table_comment,\n            tv.principal_name as table_owner,\n            cols.column_name,\n            cols.column_index,\n            cols.column_type,\n            null as column_comment\n        from tables_and_views tv\n        join cols on tv.object_id = cols.object_id\n        where ({%- for schema in schemas -%}\n            upper(tv.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%})\n\n        order by column_index\n        {{ query_label }}\n\n        {%- endcall -%}\n\n    {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5281088, "supported_languages": null}, "macro.dbt_fabric.fabric__get_catalog_relations": {"name": "fabric__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\catalog.sql", "original_file_path": "macros\\adapters\\catalog.sql", "unique_id": "macro.dbt_fabric.fabric__get_catalog_relations", "macro_sql": "{% macro fabric__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query_label = apply_label() %}\n    {%- set distinct_databases = relations | map(attribute='database') | unique | list -%}\n\n    {%- if distinct_databases | length == 1 -%}\n        {%- call statement('catalog', fetch_result=True) -%}\n            {{ get_use_database_sql(distinct_databases[0]) }}\n            with\n            principals as (\n                select\n                    name as principal_name,\n                    principal_id as principal_id\n                from\n                    sys.database_principals {{ information_schema_hints() }}\n            ),\n\n            schemas as (\n                select\n                    name as schema_name,\n                    schema_id as schema_id,\n                    principal_id as principal_id\n                from\n                    sys.schemas {{ information_schema_hints() }}\n            ),\n\n            tables as (\n                select\n                    object_id,\n                    name as table_name,\n                    schema_id as schema_id,\n                    principal_id as principal_id,\n                    'BASE TABLE' as table_type\n                from\n                    sys.tables {{ information_schema_hints() }}\n            ),\n\n            tables_with_metadata as (\n                select\n                    object_id,\n                    table_name,\n                    schema_name,\n                    coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n                    table_type\n                from\n                    tables\n                join schemas on tables.schema_id = schemas.schema_id\n            ),\n\n            views as (\n                select\n                    object_id,\n                    name as table_name,\n                    schema_id as schema_id,\n                    principal_id as principal_id,\n                    'VIEW' as table_type\n                from\n                    sys.views {{ information_schema_hints() }}\n            ),\n\n            views_with_metadata as (\n                select\n                    object_id,\n                    table_name,\n                    schema_name,\n                    coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n                    table_type\n                from\n                    views\n                join schemas on views.schema_id = schemas.schema_id\n            ),\n\n            tables_and_views as (\n                select\n                    object_id,\n                    table_name,\n                    schema_name,\n                    principal_name,\n                    table_type\n                from\n                    tables_with_metadata\n                join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n                union all\n                select\n                    object_id,\n                    table_name,\n                    schema_name,\n                    principal_name,\n                    table_type\n                from\n                    views_with_metadata\n                join principals on views_with_metadata.owner_principal_id = principals.principal_id\n            ),\n\n            cols as (\n\n                select\n                    c.object_id,\n                    c.name as column_name,\n                    c.column_id as column_index,\n                    t.name as column_type\n                from sys.columns as c {{ information_schema_hints() }}\n                left join sys.types as t on c.system_type_id = t.system_type_id\n            )\n\n            select\n                DB_NAME() as table_database,\n                tv.schema_name as table_schema,\n                tv.table_name,\n                tv.table_type,\n                null as table_comment,\n                tv.principal_name as table_owner,\n                cols.column_name,\n                cols.column_index,\n                cols.column_type,\n                null as column_comment\n            from tables_and_views tv\n            join cols on tv.object_id = cols.object_id\n            where (\n                {%- for relation in relations -%}\n                    {% if relation.schema and relation.identifier %}\n                        (\n                            upper(tv.schema_name) = upper('{{ relation.schema }}')\n                            and upper(tv.table_name) = upper('{{ relation.identifier }}')\n                        )\n                    {% elif relation.schema %}\n                        (\n                            upper(tv.schema_name) = upper('{{ relation.schema }}')\n                        )\n                    {% else %}\n                        {% do exceptions.raise_compiler_error(\n                            '`get_catalog_relations` requires a list of relations, each with a schema'\n                        ) %}\n                    {% endif %}\n\n                    {%- if not loop.last %} or {% endif -%}\n                {%- endfor -%}\n            )\n\n            order by column_index\n            {{ query_label }}\n\n        {%- endcall -%}\n        {{ return(load_result('catalog').table) }}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\n            '`get_catalog_relations` can catalog one database at a time'\n        ) %}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.528351, "supported_languages": null}, "macro.dbt_fabric.fabric__get_empty_subquery_sql": {"name": "fabric__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_empty_subquery_sql", "macro_sql": "{% macro fabric__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    with __dbt_sbq_tmp as (\n        {{ select_sql }}\n    )\n    select * from __dbt_sbq_tmp\n    where 0 = 1\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.528351, "supported_languages": null}, "macro.dbt_fabric.fabric__get_columns_in_relation": {"name": "fabric__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_columns_in_relation", "macro_sql": "{% macro fabric__get_columns_in_relation(relation) -%}\n    {% set query_label = apply_label() %}\n    {% call statement('get_columns_in_relation', fetch_result=True) %}\n        {{ get_use_database_sql(relation.database) }}\n        with mapping as (\n            select\n                row_number() over (partition by object_name(c.object_id) order by c.column_id) as ordinal_position,\n                c.name collate database_default as column_name,\n                t.name as data_type,\n                c.max_length as character_maximum_length,\n                c.precision as numeric_precision,\n                c.scale as numeric_scale\n            from sys.columns c {{ information_schema_hints() }}\n            inner join sys.types t {{ information_schema_hints() }}\n            on c.user_type_id = t.user_type_id\n            where c.object_id = object_id('{{ 'tempdb..' ~ relation.include(database=false, schema=false) if '#' in relation.identifier else relation }}')\n        )\n\n        select\n            column_name,\n            data_type,\n            character_maximum_length,\n            numeric_precision,\n            numeric_scale\n        from mapping\n        order by ordinal_position\n        {{ query_label }}\n\n    {% endcall %}\n    {% set table = load_result('get_columns_in_relation').table %}\n    {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.528351, "supported_languages": null}, "macro.dbt_fabric.fabric__get_columns_in_query": {"name": "fabric__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__get_columns_in_query", "macro_sql": "{% macro fabric__get_columns_in_query(select_sql) %}\n    {% set query_label = apply_label() %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        with __dbt_sbq as\n        (\n            {{ select_sql }}\n        )\n        select top 0 *\n        from __dbt_sbq\n        where 0 = 1\n        {{ query_label }}\n\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.528351, "supported_languages": null}, "macro.dbt_fabric.fabric__alter_column_type": {"name": "fabric__alter_column_type", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__alter_column_type", "macro_sql": "{% macro fabric__alter_column_type(relation, column_name, new_column_type) %}\n\n    {%- set table_name= relation.identifier -%}\n    {%- set schema_name = relation.schema -%}\n\n    {% set generate_tmp_relation_script %}\n        SELECT TRIM(REPLACE(STRING_AGG(ColumnName + ' ', ',-'), '-', CHAR(10)))  AS ColumnDef\n        FROM\n        (\n            SELECT\n            CAST(c.COLUMN_NAME AS VARCHAR(128)) AS ColumnName\n            FROM INFORMATION_SCHEMA.TABLES t\n            JOIN INFORMATION_SCHEMA.COLUMNS c\n                ON t.TABLE_SCHEMA = c.TABLE_SCHEMA\n                AND t.TABLE_NAME = c.TABLE_NAME\n                WHERE t.TABLE_NAME = REPLACE('{{table_name}}','\"','')\n                AND t.TABLE_SCHEMA = REPLACE('{{schema_name}}','\"','')\n                AND c.COLUMN_NAME <> REPLACE('{{column_name}}','\"','')\n        ) T\n    {% endset %}\n\n    {%- set query_result = run_query(generate_tmp_relation_script) -%}\n    {%- set query_result_text = query_result.rows[0][0] -%}\n\n    {% set tempTableName %}\n        {{ relation.schema }}.{{ relation.identifier }}_{{ range(1300, 19000) | random }}\n    {% endset %}\n    {{ log(\"Cannot Alter table type, as it is not supported. Using random table as a temp table. - \" ~ tempTableName) }}\n\n    {% set tempTable %}\n        CREATE TABLE {{tempTableName}}\n        AS SELECT {{query_result_text}}, CAST({{ column_name }} AS {{new_column_type}}) AS {{column_name}} FROM {{ relation.schema }}.{{ relation.identifier }}\n        {{ apply_label() }}\n    {% endset %}\n\n    {% call statement('create_temp_table') -%}\n        {{ tempTable }}\n    {%- endcall %}\n\n    {% set dropTable %}\n        DROP TABLE {{ relation.schema }}.{{ relation.identifier }}\n    {% endset %}\n\n    {% call statement('drop_table') -%}\n        {{ dropTable }}\n    {%- endcall %}\n\n    {% set createTable %}\n        CREATE TABLE {{ relation.schema }}.{{ relation.identifier }}\n        AS SELECT * FROM {{tempTableName}} {{ apply_label() }}\n    {% endset %}\n\n    {% call statement('create_Table') -%}\n        {{ createTable }}\n    {%- endcall %}\n\n    {% set dropTempTable %}\n        DROP TABLE {{tempTableName}}\n    {% endset %}\n\n    {% call statement('drop_temp_table') -%}\n        {{ dropTempTable }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_fabric.apply_label", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5339525, "supported_languages": null}, "macro.dbt_fabric.fabric__alter_relation_add_remove_columns": {"name": "fabric__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_fabric.fabric__alter_relation_add_remove_columns", "macro_sql": "{% macro fabric__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  {% call statement('add_drop_columns') -%}\n    {% if add_columns %}\n        alter {{ relation.type }} {{ relation }}\n        add {% for column in add_columns %}\"{{ column.name }}\" {{ column.data_type }}{{ ', ' if not loop.last }}{% endfor %};\n    {% endif %}\n\n    {% if remove_columns %}\n        alter {{ relation.type }} {{ relation }}\n        drop column {% for column in remove_columns %}\"{{ column.name }}\"{{ ',' if not loop.last }}{% endfor %};\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5341938, "supported_languages": null}, "macro.dbt_fabric.fabric__create_clustered_columnstore_index": {"name": "fabric__create_clustered_columnstore_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.fabric__create_clustered_columnstore_index", "macro_sql": "{% macro fabric__create_clustered_columnstore_index(relation) -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.535225, "supported_languages": null}, "macro.dbt_fabric.drop_xml_indexes": {"name": "drop_xml_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.535225, "supported_languages": null}, "macro.dbt_fabric.drop_spatial_indexes": {"name": "drop_spatial_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.535225, "supported_languages": null}, "macro.dbt_fabric.drop_fk_constraints": {"name": "drop_fk_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.535225, "supported_languages": null}, "macro.dbt_fabric.drop_pk_constraints": {"name": "drop_pk_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.535225, "supported_languages": null}, "macro.dbt_fabric.drop_fk_indexes_on_table": {"name": "drop_fk_indexes_on_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.drop_fk_indexes_on_table", "macro_sql": "{% macro drop_fk_indexes_on_table(relation) -%}\n  {% call statement('find_references', fetch_result=true) %}\n      USE [{{ relation.database }}];\n      SELECT  obj.name AS FK_NAME,\n      sch.name AS [schema_name],\n      tab1.name AS [table],\n      col1.name AS [column],\n      tab2.name AS [referenced_table],\n      col2.name AS [referenced_column]\n      FROM sys.foreign_key_columns fkc\n      INNER JOIN sys.objects obj\n          ON obj.object_id = fkc.constraint_object_id\n      INNER JOIN sys.tables tab1\n          ON tab1.object_id = fkc.parent_object_id\n      INNER JOIN sys.schemas sch\n          ON tab1.schema_id = sch.schema_id\n      INNER JOIN sys.columns col1\n          ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id\n      INNER JOIN sys.tables tab2\n          ON tab2.object_id = fkc.referenced_object_id\n      INNER JOIN sys.columns col2\n          ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id\n      WHERE sch.name = '{{ relation.schema }}' and tab2.name = '{{ relation.identifier }}'\n  {% endcall %}\n      {% set references = load_result('find_references')['data'] %}\n      {% for reference in references -%}\n        {% call statement('main') -%}\n           alter table [{{reference[1]}}].[{{reference[2]}}] drop constraint [{{reference[0]}}]\n        {%- endcall %}\n      {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.536241, "supported_languages": null}, "macro.dbt_fabric.create_clustered_index": {"name": "create_clustered_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.536241, "supported_languages": null}, "macro.dbt_fabric.create_nonclustered_index": {"name": "create_nonclustered_index", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n  {# {% exceptions.raise_compiler_error('Indexes are not supported') %} #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.536241, "supported_languages": null}, "macro.dbt_fabric.fabric__list_nonclustered_rowstore_indexes": {"name": "fabric__list_nonclustered_rowstore_indexes", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_fabric.fabric__list_nonclustered_rowstore_indexes", "macro_sql": "{% macro fabric__list_nonclustered_rowstore_indexes(relation) -%}\n  {% call statement('list_nonclustered_rowstore_indexes', fetch_result=True) -%}\n\n    SELECT i.name AS index_name\n    , i.name + '__dbt_backup' as index_new_name\n    , COL_NAME(ic.object_id,ic.column_id) AS column_name\n    FROM sys.indexes AS i\n    INNER JOIN sys.index_columns AS ic\n        ON i.object_id = ic.object_id AND i.index_id = ic.index_id and i.type <> 5\n    WHERE i.object_id = OBJECT_ID('{{ relation.schema }}.{{ relation.identifier }}')\n\n    UNION ALL\n\n    SELECT  obj.name AS index_name\n    , obj.name + '__dbt_backup' as index_new_name\n    , col1.name AS column_name\n    FROM sys.foreign_key_columns fkc\n    INNER JOIN sys.objects obj\n        ON obj.object_id = fkc.constraint_object_id\n    INNER JOIN sys.tables tab1\n        ON tab1.object_id = fkc.parent_object_id\n    INNER JOIN sys.schemas sch\n        ON tab1.schema_id = sch.schema_id\n    INNER JOIN sys.columns col1\n        ON col1.column_id = parent_column_id AND col1.object_id = tab1.object_id\n    INNER JOIN sys.tables tab2\n        ON tab2.object_id = fkc.referenced_object_id\n    INNER JOIN sys.columns col2\n        ON col2.column_id = referenced_column_id AND col2.object_id = tab2.object_id\n    WHERE sch.name = '{{ relation.schema }}' and tab1.name = '{{ relation.identifier }}'\n\n  {% endcall %}\n  {{ return(load_result('list_nonclustered_rowstore_indexes').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.536241, "supported_languages": null}, "macro.dbt_fabric.apply_label": {"name": "apply_label", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.apply_label", "macro_sql": "{% macro apply_label() %}\n    {{ log (config.get('query_tag','dbt-fabric'))}}\n    {%- set query_label = config.get('query_tag','dbt-fabric-dw') -%}\n    OPTION (LABEL = '{{query_label}}');\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.537241, "supported_languages": null}, "macro.dbt_fabric.information_schema_hints": {"name": "information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.information_schema_hints", "macro_sql": "{% macro information_schema_hints() %}\n    {{ return(adapter.dispatch('information_schema_hints')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__information_schema_hints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.537241, "supported_languages": null}, "macro.dbt_fabric.default__information_schema_hints": {"name": "default__information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.default__information_schema_hints", "macro_sql": "{% macro default__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.537241, "supported_languages": null}, "macro.dbt_fabric.fabric__information_schema_hints": {"name": "fabric__information_schema_hints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__information_schema_hints", "macro_sql": "{% macro fabric__information_schema_hints() %}{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.537241, "supported_languages": null}, "macro.dbt_fabric.fabric__information_schema_name": {"name": "fabric__information_schema_name", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__information_schema_name", "macro_sql": "{% macro fabric__information_schema_name(database) -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.538241, "supported_languages": null}, "macro.dbt_fabric.get_use_database_sql": {"name": "get_use_database_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.get_use_database_sql", "macro_sql": "{% macro get_use_database_sql(database) %}\n    {{ return(adapter.dispatch('get_use_database_sql', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.538241, "supported_languages": null}, "macro.dbt_fabric.fabric__get_use_database_sql": {"name": "fabric__get_use_database_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_use_database_sql", "macro_sql": "\n\n{%- macro fabric__get_use_database_sql(database) -%}\n  USE [{{database | replace('\"', '')}}];\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.538241, "supported_languages": null}, "macro.dbt_fabric.fabric__list_schemas": {"name": "fabric__list_schemas", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__list_schemas", "macro_sql": "{% macro fabric__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    {{ get_use_database_sql(database) }}\n    select  name as [schema]\n    from sys.schemas {{ information_schema_hints() }} {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.538241, "supported_languages": null}, "macro.dbt_fabric.fabric__check_schema_exists": {"name": "fabric__check_schema_exists", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__check_schema_exists", "macro_sql": "{% macro fabric__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}' {{ apply_label() }}\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5392401, "supported_languages": null}, "macro.dbt_fabric.fabric__list_relations_without_caching": {"name": "fabric__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__list_relations_without_caching", "macro_sql": "{% macro fabric__list_relations_without_caching(schema_relation) -%}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    {{ get_use_database_sql(schema_relation.database) }}\n    with base as (\n      select\n        DB_NAME() as [database],\n        t.name as [name],\n        SCHEMA_NAME(t.schema_id) as [schema],\n        'table' as table_type\n      from sys.tables as t {{ information_schema_hints() }}\n      union all\n      select\n        DB_NAME() as [database],\n        v.name as [name],\n        SCHEMA_NAME(v.schema_id) as [schema],\n        'view' as table_type\n      from sys.views as v {{ information_schema_hints() }}\n    )\n    select * from base\n    where [schema] like '{{ schema_relation.schema }}'\n    {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5392401, "supported_languages": null}, "macro.dbt_fabric.fabric__get_relation_without_caching": {"name": "fabric__get_relation_without_caching", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_relation_without_caching", "macro_sql": "{% macro fabric__get_relation_without_caching(schema_relation) -%}\n  {% call statement('get_relation_without_caching', fetch_result=True) -%}\n    {{ get_use_database_sql(schema_relation.database) }}\n    with base as (\n      select\n        DB_NAME() as [database],\n        t.name as [name],\n        SCHEMA_NAME(t.schema_id) as [schema],\n        'table' as table_type\n      from sys.tables as t {{ information_schema_hints() }}\n      union all\n      select\n        DB_NAME() as [database],\n        v.name as [name],\n        SCHEMA_NAME(v.schema_id) as [schema],\n        'view' as table_type\n      from sys.views as v {{ information_schema_hints() }}\n    )\n    select * from base\n    where [schema] like '{{ schema_relation.schema }}'\n    and [name] like '{{ schema_relation.identifier }}'\n    {{ apply_label() }}\n  {% endcall %}\n  {{ return(load_result('get_relation_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.information_schema_hints", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5402403, "supported_languages": null}, "macro.dbt_fabric.fabric__get_relation_last_modified": {"name": "fabric__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_fabric.fabric__get_relation_last_modified", "macro_sql": "{% macro fabric__get_relation_last_modified(information_schema, relations) -%}\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select\n            o.name as [identifier]\n            , s.name as [schema]\n            , o.modify_date as last_modified\n            , current_timestamp as snapshotted_at\n        from sys.objects o\n        inner join sys.schemas s on o.schema_id = s.schema_id and [type] = 'U'\n        where (\n            {%- for relation in relations -%}\n            (upper(s.name) = upper('{{ relation.schema }}') and\n                upper(o.name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n        )\n        {{ apply_label() }}\n  {%- endcall -%}\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.541209, "supported_languages": null}, "macro.dbt_fabric.fabric__make_temp_relation": {"name": "fabric__make_temp_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__make_temp_relation", "macro_sql": "{% macro fabric__make_temp_relation(base_relation, suffix='__dbt_temp') %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.541209, "supported_languages": null}, "macro.dbt_fabric.fabric__get_drop_sql": {"name": "fabric__get_drop_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__get_drop_sql", "macro_sql": "{% macro fabric__get_drop_sql(relation) -%}\n  {% if relation.type == 'view' -%}\n      {% call statement('find_references', fetch_result=true) %}\n        {{ get_use_database_sql(relation.database) }}\n        select\n            sch.name as schema_name,\n            obj.name as view_name\n        from sys.sql_expression_dependencies refs\n        inner join sys.objects obj\n        on refs.referencing_id = obj.object_id\n        inner join sys.schemas sch\n        on obj.schema_id = sch.schema_id\n        where refs.referenced_database_name = '{{ relation.database }}'\n        and refs.referenced_schema_name = '{{ relation.schema }}'\n        and refs.referenced_entity_name = '{{ relation.identifier }}'\n        and refs.referencing_class = 1\n        and obj.type = 'V'\n        {{ apply_label() }}\n      {% endcall %}\n      {% set references = load_result('find_references')['data'] %}\n      {% for reference in references -%}\n        -- dropping referenced view {{ reference[0] }}.{{ reference[1] }}\n        {% do adapter.drop_relation\n          (api.Relation.create(\n            identifier = reference[1], schema = reference[0], database = relation.database, type='view'\n          ))%}\n      {% endfor %}\n    {% elif relation.type == 'table'%}\n      {% set object_id_type = 'U' %}\n    {%- else -%}\n        {{ exceptions.raise_not_implemented('Invalid relation being dropped: ' ~ relation) }}\n    {% endif %}\n    {{ get_use_database_sql(relation.database) }}\n    EXEC('DROP {{ relation.type }} IF EXISTS {{ relation.include(database=False) }};');\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5430124, "supported_languages": null}, "macro.dbt_fabric.fabric__rename_relation": {"name": "fabric__rename_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__rename_relation", "macro_sql": "{% macro fabric__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n     {{ get_use_database_sql(from_relation.database) }}\n      EXEC sp_rename '{{ from_relation.schema }}.{{ from_relation.identifier }}', '{{ to_relation.identifier }}'\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5430124, "supported_languages": null}, "macro.dbt_fabric.fabric__truncate_relation": {"name": "fabric__truncate_relation", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_fabric.fabric__truncate_relation", "macro_sql": "{% macro fabric__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n        truncate table {{ relation }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.543724, "supported_languages": null}, "macro.dbt_fabric.fabric__create_schema": {"name": "fabric__create_schema", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__create_schema", "macro_sql": "{% macro fabric__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5441737, "supported_languages": null}, "macro.dbt_fabric.fabric__create_schema_with_authorization": {"name": "fabric__create_schema_with_authorization", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__create_schema_with_authorization", "macro_sql": "{% macro fabric__create_schema_with_authorization(relation, schema_authorization) -%}\n  {% call statement('create_schema') -%}\n    {{ get_use_database_sql(relation.database) }}\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.schema }}] AUTHORIZATION [{{ schema_authorization }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5452037, "supported_languages": null}, "macro.dbt_fabric.fabric__drop_schema": {"name": "fabric__drop_schema", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_fabric.fabric__drop_schema", "macro_sql": "{% macro fabric__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do adapter.drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n    {{ get_use_database_sql(relation.database) }}\n    EXEC('DROP SCHEMA IF EXISTS {{ relation.schema }}')\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.list_relations_without_caching", "macro.dbt.statement", "macro.dbt_fabric.get_use_database_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5452037, "supported_languages": null}, "macro.dbt_fabric.fabric__get_limit_sql": {"name": "fabric__get_limit_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt_fabric.fabric__get_limit_sql", "macro_sql": "{% macro fabric__get_limit_sql(sql, limit) %}\n    {%- if limit == -1 or limit is none -%}\n        {{ sql }}\n    {#- Special processing if the last non-blank line starts with order by -#}\n    {%- elif sql.strip().splitlines()[-1].strip().lower().startswith('order by') -%}\n        {{ sql }}\n        offset 0 rows  fetch first {{ limit }} rows only\n    {%- else -%}\n        {{ sql }}\n        order by (select null) offset 0 rows fetch first {{ limit }} rows only\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5461917, "supported_languages": null}, "macro.dbt_fabric.materialization_incremental_fabric": {"name": "materialization_incremental_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt_fabric.materialization_incremental_fabric", "macro_sql": "{% materialization incremental, adapter='fabric' -%}\n\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {% set target_relation = this.incorporate(type='table') %}\n  {%- set relation = load_cached_relation(this) -%}\n  {%- set existing_relation = none %}\n  {% if relation.type ==  'table' %}\n    {% set existing_relation = target_relation %}\n  {% elif relation.type ==  'view' %}\n    {% set existing_relation = get_or_create_relation(relation.database, relation.schema, relation.identifier, relation.type)[1] %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is a view and target is a table.\") }}\n    {{ adapter.drop_relation(existing_relation) }}\n  {% endif %}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n\n  {% set grant_config = config.get('grants') %}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if existing_relation is none or full_refresh_mode or existing_relation.is_view %}\n\n    {% set tmp_vw_relation = target_relation.incorporate(path={\"identifier\": target_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_vw_relation) }}\n    -- Dropping target relation if exists\n    {{ adapter.drop_relation(target_relation) }}\n\n    {%- call statement('main') -%}\n      {{ get_create_table_as_sql(False, target_relation, sql)}}\n    {%- endcall -%}\n\n    -- Dropping temp view relation\n    {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  {% else %}\n\n    {%- set temp_relation = make_temp_relation(target_relation)-%}\n    {{ adapter.drop_relation(temp_relation) }}\n    {% set tmp_tble_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {%- call statement('create_tmp_relation') -%}\n      {{ get_create_table_as_sql(True, temp_relation, sql)}}\n    {%- endcall -%}\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n    {% do adapter.expand_target_column_types(\n              from_relation=temp_relation,\n              to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n\n    {{ adapter.drop_relation(temp_relation) }}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  {% do persist_docs(target_relation, model) %}\n  {% do adapter.commit() %}\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_cached_relation", "macro.dbt.get_or_create_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.make_temp_relation", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5501962, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__get_incremental_default_sql": {"name": "fabric__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "unique_id": "macro.dbt_fabric.fabric__get_incremental_default_sql", "macro_sql": "{% macro fabric__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        -- Delete + Insert Strategy, calls get_delete_insert_merge_sql\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        -- Incremental Append will insert data into target table.\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5511913, "supported_languages": null}, "macro.dbt_fabric.fabric__get_merge_sql": {"name": "fabric__get_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_merge_sql", "macro_sql": "{% macro fabric__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5511913, "supported_languages": null}, "macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql": {"name": "fabric__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql", "macro_sql": "{% macro fabric__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.552191, "supported_languages": null}, "macro.dbt_fabric.fabric__get_delete_insert_merge_sql": {"name": "fabric__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_delete_insert_merge_sql", "macro_sql": "{% macro fabric__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n\n    {% set query_label = apply_label() %}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{ target }}\n            where exists (\n                select null\n                from {{ source }}\n                where\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            )\n            {% if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {% endif %}\n            {{ query_label }}\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%}\n            {{ query_label }}\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    ){{ query_label }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.553191, "supported_languages": null}, "macro.dbt_fabric.fabric__get_incremental_microbatch_sql": {"name": "fabric__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_fabric.fabric__get_incremental_microbatch_sql", "macro_sql": "{% macro fabric__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.config.get(\"__dbt_internal_microbatch_event_time_start\") -%}\n    {{ log(\"incremenal append event start time > DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= '\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"'\") }}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= '\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"'\") %}\n    {% endif %}\n    {% if model.config.__dbt_internal_microbatch_event_time_end -%}\n    {{ log(\"incremenal append event end time < DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < '\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"'\") }}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < '\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"'\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete DBT_INTERNAL_TARGET from {{ target }} AS DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5541909, "supported_languages": null}, "macro.dbt_fabric.fabric__can_clone_table": {"name": "fabric__can_clone_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\clone.sql", "original_file_path": "macros\\materializations\\models\\table\\clone.sql", "unique_id": "macro.dbt_fabric.fabric__can_clone_table", "macro_sql": "{% macro fabric__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5551906, "supported_languages": null}, "macro.dbt_fabric.fabric__create_or_replace_clone": {"name": "fabric__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\clone.sql", "original_file_path": "macros\\materializations\\models\\table\\clone.sql", "unique_id": "macro.dbt_fabric.fabric__create_or_replace_clone", "macro_sql": "{% macro fabric__create_or_replace_clone(target_relation, defer_relation) %}\n    CREATE TABLE {{target_relation}}\n    AS CLONE OF {{defer_relation}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5551906, "supported_languages": null}, "macro.dbt_fabric.materialization_clone_fabric": {"name": "materialization_clone_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\clone.sql", "original_file_path": "macros\\materializations\\models\\table\\clone.sql", "unique_id": "macro.dbt_fabric.materialization_clone_fabric", "macro_sql": "\n\n\n{%- materialization clone, adapter='fabric' -%}\n\n    {%- set relations = {'relations': []} -%}\n    {%- if not defer_relation -%}\n        -- nothing to do\n        {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n        {{ return(relations) }}\n    {%- endif -%}\n\n    {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n    {% set can_clone_table = can_clone_table() %}\n\n    {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n        {%- set target_relation = this.incorporate(type='table') -%}\n\n        {% call statement('main') %}\n            {% do adapter.drop_relation(target_relation) %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n        {{ return({'relations': [target_relation]}) }}\n    {%- else -%}\n\n        {%- set target_relation = this.incorporate(type='view') -%}\n\n        -- reuse the view materialization\n        -- TODO: support actual dispatch for materialization macros\n        -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n        {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n        {% if not search_name in context %}\n            {% set search_name = \"materialization_view_default\" %}\n        {% endif %}\n        {% set materialization_macro = context[search_name] %}\n        {% set relations = materialization_macro() %}\n        {{ return(relations) }}\n    {%- endif -%}\n\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.statement", "macro.dbt.create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5561907, "supported_languages": ["sql"]}, "macro.dbt_fabric.build_columns_constraints": {"name": "build_columns_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.build_columns_constraints", "macro_sql": "{% macro build_columns_constraints(relation) %}\n    {{ return(adapter.dispatch('build_columns_constraints', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_columns_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5571907, "supported_languages": null}, "macro.dbt_fabric.fabric__build_columns_constraints": {"name": "fabric__build_columns_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.fabric__build_columns_constraints", "macro_sql": "{% macro fabric__build_columns_constraints(relation) %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    (\n      {% for c in raw_column_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n      {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5571907, "supported_languages": null}, "macro.dbt_fabric.build_model_constraints": {"name": "build_model_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.build_model_constraints", "macro_sql": "{% macro build_model_constraints(relation) %}\n    {{ return(adapter.dispatch('build_model_constraints', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_model_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5571907, "supported_languages": null}, "macro.dbt_fabric.fabric__build_model_constraints": {"name": "fabric__build_model_constraints", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt_fabric.fabric__build_model_constraints", "macro_sql": "{% macro fabric__build_model_constraints(relation) %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    {% for c in raw_model_constraints -%}\n      {% set alter_table_script %}\n        alter table {{ relation.include(database=False) }} {{c}};\n      {%endset%}\n      {% call statement('alter_table_add_constraint') -%}\n        {{alter_table_script}}\n      {%- endcall %}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5582285, "supported_languages": null}, "macro.dbt_fabric.fabric__create_table_as": {"name": "fabric__create_table_as", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_table_as", "macro_sql": "{% macro fabric__create_table_as(temporary, relation, sql) -%}\n    {% set query_label = apply_label() %}\n    {% set tmp_vw_relation = relation.incorporate(path={\"identifier\": relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    {% do adapter.drop_relation(tmp_vw_relation) %}\n    {{ get_create_view_as_sql(tmp_vw_relation, sql) }}\n\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n\n        CREATE TABLE {{relation}}\n        {{ build_columns_constraints(relation) }}\n        {{ get_assert_columns_equivalent(sql)  }}\n        {% set listColumns %}\n            {% for column in model['columns'] %}\n                {{ \"[\"~column~\"]\" }}{{ \", \" if not loop.last }}\n            {% endfor %}\n        {%endset%}\n\n        INSERT INTO {{relation}} ({{listColumns}})\n        SELECT {{listColumns}} FROM {{tmp_vw_relation}} {{ query_label }}\n\n    {%- else %}\n        {%- set query_label_option = query_label.replace(\"'\", \"''\") -%}\n        EXEC('CREATE TABLE {{relation}} AS SELECT * FROM {{tmp_vw_relation}} {{ query_label_option }}');\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.apply_label", "macro.dbt.get_create_view_as_sql", "macro.dbt_fabric.build_columns_constraints", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.560231, "supported_languages": null}, "macro.dbt_fabric.materialization_table_fabric": {"name": "materialization_table_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt_fabric.materialization_table_fabric", "macro_sql": "{% materialization table, adapter='fabric' %}\n\n  -- Load target relation\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set existing_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) -%}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if existing_relation is not none and not existing_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n    {{ adapter.drop_relation(existing_relation) }}\n  {% endif %}\n\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- Making a temp relation\n  {% set temp_relation = make_temp_relation(target_relation, '__dbt_temp') %}\n\n  -- Drop temp relation if it exists before materializing temp relation\n  {{ adapter.drop_relation(temp_relation) }}\n\n  {% set tmp_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n\n  {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, temp_relation, sql) }}\n  {% endcall %}\n\n  {% if existing_relation is not none and existing_relation.is_table %}\n\n    -- making a backup relation, this will come in use when contract is enforced or not\n    {%- set set_backup_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) -%}\n    {% if (set_backup_relation != none and set_backup_relation.type == \"table\") %}\n      {%- set backup_relation = make_backup_relation(target_relation, 'table') -%}\n    {% elif (set_backup_relation != none and set_backup_relation.type == \"view\") %}\n        {%- set backup_relation = make_backup_relation(target_relation, 'view') -%}\n    {% endif %}\n\n    -- Dropping a temp relation if it exists\n    {{ adapter.drop_relation(backup_relation) }}\n\n    -- Rename existing relation to back up relation\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n\n    -- Renaming temp relation as main relation\n    {{ adapter.rename_relation(temp_relation, target_relation) }}\n\n    -- Drop backup relation\n    {{ adapter.drop_relation(backup_relation) }}\n\n  {%- else %}\n\n      -- Renaming temp relation as main relation\n      {{ adapter.rename_relation(temp_relation, target_relation) }}\n\n  {% endif %}\n\n  {{ adapter.drop_relation(tmp_vw_relation) }}\n\n  -- cleanup\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n  {% do persist_docs(target_relation, model) %}\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- Add constraints including FK relation.\n  {{ build_model_constraints(target_relation) }}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.make_backup_relation", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_fabric.build_model_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5632281, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__create_view_as": {"name": "fabric__create_view_as", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_view_as", "macro_sql": "{% macro fabric__create_view_as(relation, sql) -%}\n    {{ fabric__create_view_exec(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_view_exec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5632281, "supported_languages": null}, "macro.dbt_fabric.fabric__create_view_exec": {"name": "fabric__create_view_exec", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_fabric.fabric__create_view_exec", "macro_sql": "{% macro fabric__create_view_exec(relation, sql) -%}\n\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    {{ get_use_database_sql(relation.database) }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n        {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n\n    EXEC('create view {{ relation.include(database=False) }} as {{ temp_view_sql }};');\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_fabric.get_use_database_sql", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5632281, "supported_languages": null}, "macro.dbt_fabric.materialization_view_fabric": {"name": "materialization_view_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt_fabric.materialization_view_fabric", "macro_sql": "{% materialization view, adapter='fabric' -%}\n\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set existing_relation = adapter.get_relation(database=this.database, schema=this.schema, identifier=this.identifier) -%}\n\n  {%- set backup_relation = none %}\n  {% if (existing_relation != none and existing_relation.type == \"table\") %}\n      {%- set backup_relation = make_backup_relation(target_relation, 'table') -%}\n  {% elif (existing_relation != none and existing_relation.type == \"view\") %}\n      {%- set backup_relation = make_backup_relation(target_relation, 'view') -%}\n  {% endif %}\n\n  {% if (existing_relation != none) %}\n    -- drop the temp relations if they exist already in the database\n    {% do adapter.drop_relation(backup_relation) %}\n    -- Rename target relation as backup relation\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n  {% if (backup_relation != none) %}\n    {% do adapter.drop_relation(backup_relation) %}\n  {% endif %}\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5652287, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__get_binding_char": {"name": "fabric__get_binding_char", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_binding_char", "macro_sql": "{% macro fabric__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__get_batch_size": {"name": "fabric__get_batch_size", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_batch_size", "macro_sql": "{% macro fabric__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.calc_batch_size": {"name": "calc_batch_size", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% set max_batch_size = get_batch_size() %}\n    {% set calculated_batch = (2100 / num_columns)-1|int %}\n    {% set calculated_batch = ((2100 / num_columns)-1)|int %}\n    {% set batch_size = [max_batch_size, calculated_batch] | min %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__load_csv_rows": {"name": "fabric__load_csv_rows", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__load_csv_rows", "macro_sql": "{% macro fabric__load_csv_rows(model, agate_table) %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(agate_table.column_names|length) %}\n  {% set bindings = [] %}\n  {% set statements = [] %}\n\n  {{ log(\"Inserting batches of \" ~ batch_size ~ \" records\") }}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n          {{ apply_label()}}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt_fabric.calc_batch_size", "macro.dbt.get_binding_char", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__post_snapshot": {"name": "fabric__post_snapshot", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__post_snapshot", "macro_sql": "{% macro fabric__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation_if_exists(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__create_columns": {"name": "fabric__create_columns", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__create_columns", "macro_sql": "{% macro fabric__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add \"{{ column.name }}\" {{ column.data_type }} NULL;\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__get_true_sql": {"name": "fabric__get_true_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_true_sql", "macro_sql": "{% macro fabric__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__build_snapshot_table": {"name": "fabric__build_snapshot_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__build_snapshot_table", "macro_sql": "{% macro fabric__build_snapshot_table(strategy, relation) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n        {%- if strategy.hard_deletes == 'new_record' -%}\n            , 'False' as {{ columns.dbt_is_deleted }}\n        {% endif -%}\n    from (\n        select * from {{ relation }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_staging_table": {"name": "fabric__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_staging_table", "macro_sql": "{% macro fabric__snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) -%}\n\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n        select * from {{ temp_snapshot_relation }}\n    ),\n    snapshotted_data as (\n        select *,\n        {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n        {% if config.get('dbt_valid_to_current') %}\n            {# Check for either dbt_valid_to_current OR null, in order to correctly update records with nulls #}\n            ( {{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or {{ columns.dbt_valid_to }} is null)\n        {% else %}\n            {{ columns.dbt_valid_to }} is null\n        {% endif %}\n    ),\n    insertions_source_data as (\n        select *,\n        {{ unique_key_fields(strategy.unique_key) }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }},\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n        from snapshot_query\n    ),\n    updates_source_data as (\n        select *,\n        {{ unique_key_fields(strategy.unique_key) }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n        from snapshot_query\n    ),\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n        deletes_source_data as (\n            select *, {{ unique_key_fields(strategy.unique_key) }}\n            from snapshot_query\n        ),\n    {% endif %}\n    insertions as (\n        select 'insert' as dbt_change_type, source_data.*\n        {%- if strategy.hard_deletes == 'new_record' -%}\n        ,'False' as {{ columns.dbt_is_deleted }}\n        {%- endif %}\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }}))\n    ),\n    updates as (\n        select 'update' as dbt_change_type, source_data.*,\n        snapshotted_data.{{ columns.dbt_scd_id }}\n        {%- if strategy.hard_deletes == 'new_record' -%}\n        , snapshotted_data.{{ columns.dbt_is_deleted }}\n        {%- endif %}\n        from updates_source_data as source_data\n        join snapshotted_data\n        on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where ({{ strategy.row_changed }})\n    )\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n        ,\n        deletes as (\n            select 'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n            {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n            {%- endif %}\n            from snapshotted_data\n            left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        )\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {%set source_query = \"select * from \"~temp_snapshot_relation%}\n        {% set source_sql_cols = get_column_schema_from_query(source_query) %}\n        ,\n        deletion_records as (\n\n            select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n            from snapshotted_data\n            left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        )\n    {%- endif %}\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n        union all\n        select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n        union all\n        select * from deletion_records\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.unique_key_fields", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt_fabric.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n    {{ adapter.drop_relation(temp_relation) }}\n\n    {% set select = snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n\n    {% set tmp_tble_vw_relation = temp_relation.incorporate(path={\"identifier\": temp_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ get_create_table_as_sql(True, temp_relation, select) }}\n    {% endcall %}\n\n    -- Dropping temp view relation if it exists\n    {{ adapter.drop_relation(tmp_tble_vw_relation) }}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.materialization_snapshot_fabric": {"name": "materialization_snapshot_fabric", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_fabric.materialization_snapshot_fabric", "macro_sql": "{% materialization snapshot, adapter='fabric' %}\n\n  {%- set config = model['config'] -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% set temp_snapshot_relation_exists, temp_snapshot_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table+\"_snapshot_staging_temp_view\",\n          type='view') -%}\n\n  -- Create a temporary view to manage if user SQl uses CTE\n  {% set temp_snapshot_relation_sql = model['compiled_code'] %}\n  {{ adapter.drop_relation(temp_snapshot_relation) }}\n\n  {% call statement('create temp_snapshot_relation') -%}\n    {{ get_create_view_as_sql(temp_snapshot_relation, temp_snapshot_relation_sql) }}\n  {%- endcall %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, temp_snapshot_relation) %}\n      {% set build_or_select_sql = build_sql %}\n\n      -- naming a temp relation\n      {% set tmp_relation_view = target_relation.incorporate(path={\"identifier\": target_relation.identifier ~ '__dbt_tmp_vw'}, type='view')-%}\n      -- Fabric & Synapse adapters use temp relation because of lack of CTE support for CTE in CTAS, Insert\n      -- drop temp relation if exists\n      {{ adapter.drop_relation(tmp_relation_view) }}\n      {% set final_sql = get_create_table_as_sql(False, target_relation, build_sql) %}\n      {{ adapter.drop_relation(tmp_relation_view) }}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_meta_column_names\") or get_snapshot_table_column_names() %}\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n      {% set build_or_select_sql = snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, temp_snapshot_relation, target_relation) %}\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n      {% if missing_columns|length > 0 %}\n        {{log(\"Missing columns length is: \"~ missing_columns|length)}}\n        {% do create_columns(target_relation, missing_columns) %}\n      {% endif %}\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n  {% endif %}\n  {{ check_time_data_types(build_or_select_sql) }}\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {{ adapter.drop_relation(temp_snapshot_relation) }}\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.build_snapshot_table", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt_fabric.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": ["sql"]}, "macro.dbt_fabric.fabric__snapshot_merge_sql": {"name": "fabric__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_merge_sql", "macro_sql": "{% macro fabric__snapshot_merge_sql(target, source, insert_cols) %}\n\n  {%- set insert_cols_csv = insert_cols | join(', ') -%}\n  {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n  {%- set target_table = target.include(database=False) -%}\n  {%- set source_table = source.include(database=False) -%}\n  {% set target_columns_list = [] %}\n  {% for column in insert_cols %}\n    {% set target_columns_list = target_columns_list.append(\"DBT_INTERNAL_SOURCE.\"+column)  %}\n  {% endfor %}\n  {%- set target_columns = target_columns_list | join(', ') -%}\n\n  update DBT_INTERNAL_DEST\n  set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n  from {{ target_table }} as DBT_INTERNAL_DEST\n  inner join {{ source_table }} as DBT_INTERNAL_SOURCE\n  on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n  where DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n  {% if config.get(\"dbt_valid_to_current\") %}\n    and (DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }} or DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null)\n  {% else %}\n    and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n  {% endif %}\n  {{ apply_label() }}\n\n  insert into {{ target_table }} ({{ insert_cols_csv }})\n  select {{target_columns}} from {{ source_table }} as DBT_INTERNAL_SOURCE\n  where  DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n  {{ apply_label() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt_fabric.apply_label"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_hash_arguments": {"name": "fabric__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_hash_arguments", "macro_sql": "{% macro fabric__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(8000)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__get_test_sql": {"name": "fabric__get_test_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_test_sql", "macro_sql": "{% macro fabric__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n\n  with test_main_sql as (\n  {{ main_sql }}\n  ),\n  dbt_internal_test as (\n    select {{ \"top (\" ~ limit ~ ')' if limit != none }} * from test_main_sql\n  )\n  select\n    {{ fail_calc }} as failures,\n    case when {{ fail_calc }} {{ warn_if }}\n      then 'true' else 'false' end as should_warn,\n    case when {{ fail_calc }} {{ error_if }}\n      then 'true' else 'false' end as should_error\n  from dbt_internal_test\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5661893, "supported_languages": null}, "macro.dbt_fabric.fabric__get_unit_test_sql": {"name": "fabric__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt_fabric.fabric__get_unit_test_sql", "macro_sql": "{% macro fabric__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  -- Build actual result given inputs\n  WITH dbt_internal_unit_test_actual AS (\n\n    WITH main_sql AS (\n      {{ main_sql }}\n    )\n    SELECT\n      {% for expected_column_name in expected_column_names %}\n        {{ expected_column_name }}{% if not loop.last -%},{% endif %}\n      {%- endfor -%},\n      {{ dbt.string_literal(\"actual\") }} AS {{ adapter.quote(\"actual_or_expected\") }}\n    FROM main_sql\n  ),\n\n  -- Build expected result\n  dbt_internal_unit_test_expected AS (\n\n    WITH expected_fixture_sql AS (\n      {{ expected_fixture_sql }}\n    )\n    SELECT\n      {% for expected_column_name in expected_column_names %}\n        {{ expected_column_name }}{% if not loop.last -%}, {% endif %}\n      {%- endfor -%},\n      {{ dbt.string_literal(\"expected\") }} AS {{ adapter.quote(\"actual_or_expected\") }}\n    FROM expected_fixture_sql\n  )\n\n  -- Union actual and expected results\n  SELECT * FROM dbt_internal_unit_test_actual\n  UNION ALL\n  SELECT * FROM dbt_internal_unit_test_expected\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__any_value": {"name": "fabric__any_value", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_fabric.fabric__any_value", "macro_sql": "{% macro fabric__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__array_construct": {"name": "fabric__array_construct", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_fabric.fabric__array_construct", "macro_sql": "{% macro fabric__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__cast_bool_to_text": {"name": "fabric__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_fabric.fabric__cast_bool_to_text", "macro_sql": "{% macro fabric__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__concat": {"name": "fabric__concat", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt_fabric.fabric__concat", "macro_sql": "{% macro fabric__concat(fields) -%}\n    {%- if fields|length < 2 -%}\n        {{ fields[0] }}\n    {%- else -%}\n        concat({{ fields|join(', ') }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__dateadd": {"name": "fabric__dateadd", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_fabric.fabric__dateadd", "macro_sql": "{% macro fabric__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime2(6))\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__date_trunc": {"name": "fabric__date_trunc", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_fabric.fabric__date_trunc", "macro_sql": "{% macro fabric__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__get_tables_by_pattern_sql": {"name": "fabric__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\get_tables_by_pattern.sql", "original_file_path": "macros\\utils\\get_tables_by_pattern.sql", "unique_id": "macro.dbt_fabric.fabric__get_tables_by_pattern_sql", "macro_sql": "{% macro fabric__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    select distinct\n        table_schema as {{ adapter.quote('table_schema') }},\n        table_name as {{ adapter.quote('table_name') }},\n        {{ dbt_utils.get_table_types_sql() }}\n    from {{ database }}.INFORMATION_SCHEMA.TABLES\n    where table_schema like '{{ schema_pattern }}'\n    and table_name like '{{ table_pattern }}'\n    and table_name not like '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__hash": {"name": "fabric__hash", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_fabric.fabric__hash", "macro_sql": "{% macro fabric__hash(field) %}\n    lower(convert(varchar(50), hashbytes('md5', coalesce(convert(varchar(8000), {{field}}), '')), 2))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__last_day": {"name": "fabric__last_day", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt_fabric.fabric__last_day", "macro_sql": "{% macro fabric__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__length": {"name": "fabric__length", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt_fabric.fabric__length", "macro_sql": "{% macro fabric__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__listagg": {"name": "fabric__listagg", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_fabric.fabric__listagg", "macro_sql": "{% macro fabric__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__position": {"name": "fabric__position", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_fabric.fabric__position", "macro_sql": "{% macro fabric__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__safe_cast": {"name": "fabric__safe_cast", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_fabric.fabric__safe_cast", "macro_sql": "{% macro fabric__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__split_part": {"name": "fabric__split_part", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_fabric.fabric__split_part", "macro_sql": "{% macro fabric__split_part(string_text, delimiter_text, part_number) %}\n    WITH SplitData AS (\n        SELECT value,\n        {% if part_number > 0 %}\n            , ROW_NUMBER() OVER (ORDER BY ordinal ASC) AS forward_index\n        {% else %}\n            , ROW_NUMBER() OVER (ORDER BY ordinal DESC) AS backward_index\n        {% endif %}\n        FROM string_split({{ string_text }}, {{ delimiter_text }}, 1)\n    )\n    SELECT value\n    FROM SplitData\n    WHERE\n    {% if part_number > 0 %}\n        forward_index = {{ part_number }}\n    {% else %}\n        backward_index = {{ abs(part_number) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__current_timestamp": {"name": "fabric__current_timestamp", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_fabric.fabric__current_timestamp", "macro_sql": "{% macro fabric__current_timestamp() -%}\n  CAST(SYSDATETIME() AS DATETIME2(6))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt_fabric.fabric__snapshot_string_as_time": {"name": "fabric__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_fabric", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_fabric.fabric__snapshot_string_as_time", "macro_sql": "{% macro fabric__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2(6), '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5813, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5969372, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5969372, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5969372, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5969372, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5995412, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5997696, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5999963, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5999963, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.5999963, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6010242, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6010242, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6010242, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6010242, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6020238, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6020238, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6030235, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6030235, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6030235, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6030235, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6030235, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6030235, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6030235, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6045303, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6045303, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6045303, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6045303, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6045303, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6055388, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6055388, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6055388, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6055388, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6055388, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6065383, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6065383, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6065383, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.607538, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.607538, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6079075, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6082618, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6082618, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6092906, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6092906, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6092906, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6102903, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6102903, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6102903, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6102903, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6112897, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6112897, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6112897, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6112897, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61229, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61229, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61229, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61229, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61329, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61329, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61329, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61429, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61429, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61429, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61429, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.default__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.61429, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6152897, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6152897, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6152897, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6152897, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6152897, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6162548, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6312616, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6332548, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6359615, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6369338, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6371932, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6373615, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6373615, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6373615, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.641311, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.641311, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6423216, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6429393, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6429393, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6429393, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6429393, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6496212, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.651782, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.651782, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.652783, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.652783, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6537826, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.654783, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.65579, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6567903, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6579194, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6589231, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6594212, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6594212, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6599617, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6599617, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6599617, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6599617, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6599617, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6609695, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6609695, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6609695, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6609695, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6609695, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6619816, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.662969, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.66397, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.66397, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6649687, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6649687, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6649687, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6649687, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6649687, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6649687, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6661184, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6664877, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6672015, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6702335, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.675433, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6850348, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6865838, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6865838, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6865838, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6865838, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6865838, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6912718, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6912718, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6912718, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6932092, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6932092, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6932092, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6932092, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6932092, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.6932092, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.699592, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7018769, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7018769, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7018769, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.702881, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.702881, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7038965, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7048953, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7054396, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7054396, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7054396, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7064655, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7064655, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7064655, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7078276, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7078276, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7078276, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_fabric.fabric__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7086065, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7086065, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7096176, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.709895, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7102554, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.71076, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.71076, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.71076, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.71179, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.71179, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.71179, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7127836, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7127836, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7127836, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7147837, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7147837, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7147837, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.716244, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.716244, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7168074, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.717125, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7248142, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7256103, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.736725, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7412143, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7412143, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7412143, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7422254, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7422254, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7422254, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7432098, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.749578, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.749578, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.750591, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.750591, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7510371, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\equals.sql", "original_file_path": "macros\\utils\\equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7510371, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7510371, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7510371, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7521844, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7521844, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7521844, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7531853, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7531853, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7531853, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7531853, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7541826, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7541826, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7541826, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7551837, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7551837, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7551837, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7551837, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7561827, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7561827, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7561827, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7571833, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7571833, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.757939, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7580135, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7580135, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7580135, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7590232, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7590232, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7594998, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7594998, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_fabric.fabric__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7600653, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7600653, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7600653, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7600653, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7610939, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7610939, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7610939, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.762101, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7631, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7631, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7640996, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7660787, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7681935, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7702003, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.771199, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.771199, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.772199, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.772199, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.772199, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.772199, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.772199, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7731988, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7731988, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7731988, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7731988, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7742023, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.774872, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7758932, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7758932, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7758932, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.776879, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.776879, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.776879, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.776879, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.776879, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7778776, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7778776, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.778877, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.778877, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7798774, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7798774, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7798774, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7808766, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7808766, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7808766, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7818766, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7818766, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7818766, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7818766, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7818766, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7818766, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7828765, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7838776, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7838776, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7838776, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.784877, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7858763, "supported_languages": null}, "macro.dbt_date.duckdb__from_unixtimestamp": {"name": "duckdb__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.duckdb__from_unixtimestamp", "macro_sql": "\n\n\n{%- macro duckdb__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7858763, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7858763, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.786877, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.786877, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.786877, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.786877, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7878768, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7878768, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7878768, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7878768, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7888787, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7888787, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7888787, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7888787, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.789877, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.789877, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.789877, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.789877, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.789877, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.789877, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7908819, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7908819, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7908819, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7908819, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7918825, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7918825, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7928822, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7928822, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'MMM' if short else 'MMMM' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\round_timestamp.sql", "original_file_path": "macros\\calendar_date\\round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7933555, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7995691, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7995691, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7995691, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7995691, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7995691, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.7995691, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8009953, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8009953, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8009953, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8009953, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8009953, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8020453, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8020453, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8020453, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8020453, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8030405, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8030405, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8030405, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8040397, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8040397, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8040397, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.80504, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8055778, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8055778, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8065844, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.807612, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8078632, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8078632, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8091168, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8091168, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8091168, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8101892, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\modules_datetime.sql", "original_file_path": "macros\\_utils\\modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8101892, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\modules_datetime.sql", "original_file_path": "macros\\_utils\\modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.811178, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.811178, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.811178, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.811178, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8121765, "supported_languages": null}, "macro.dbt_expectations.spark__log_natural": {"name": "spark__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.spark__log_natural", "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8121765, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8121765, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8121765, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8131769, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8131769, "supported_languages": null}, "macro.dbt_expectations.spark__quantile": {"name": "spark__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.spark__quantile", "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8141623, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8141623, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8141623, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8141623, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8141623, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8141623, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8141623, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8141623, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8163388, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8163388, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8171601, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"name": "spark__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.trino__regexp_instr": {"name": "trino__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.trino__regexp_instr", "macro_sql": "{% macro trino__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n    {% if flags %}\n        {{ dbt_expectations._validate_re2_flags(flags) }}\n        {# Trino prepends \"(?flags)\" to set flags for current group #}\n        {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n    {% endif %}\n    {% if is_raw %}\n        {{ exceptions.warn(\n                \"is_raw option is not supported for this adapter \"\n                ~ \"and is being ignored.\"\n        ) }}\n    {% endif %}\n    {%- set regexp_query = \"regexp_position(\" ~ source_value ~ \", '\" ~ regexp ~ \"', \" ~ position ~ \", \" ~ occurrence ~ \")\" -%}\n    {# Trino regexp_position returns -1 if not found. Change it to 0, to be consistent with other adapters #}\n    if({{ regexp_query}} = -1, 0, {{ regexp_query}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.817351, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8245907, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncast(count(distinct {{ column_name }}) as {{ dbt.type_float() }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8251874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8328958, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None,\n                                                   step=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (\n            (value_field {{ operator }} value_field_lag)\n            {%- if step %}\n            and ((value_field_lag - value_field) = {{ step }})\n            {%- endif %}\n        )\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None,\n                                                   step=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (\n            (value_field {{ operator }} value_field_lag)\n            {%- if step %}\n            and ((value_field - value_field_lag) = {{ step }})\n            {%- endif %}\n        )\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8335702, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8417761, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8421345, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8443096, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8447614, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8447614, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8495166, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8505442, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8507473, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8517933, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8537893, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{# the if just allows for column names or literal numbers #}\n{% endfor %} = {% if sum_total is number %}{{sum_total}}{% else %}sum({{ sum_total }}){% endif %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8547719, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8547719, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by {{ columns|join(', ') }}) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ dbt_expectations.md5(column) }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression", "macro.dbt_expectations.md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8567898, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8567898, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8578322, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.858839, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8598893, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8598893, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8608875, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8618875, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8628874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8628874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8638878, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8638878, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.864887, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8661106, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.867314, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.867314, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.867314, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.867314, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.867314, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.867314, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.867314, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.867314, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8746152, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8751056, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8757358, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8757358, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8757358, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8771806, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8838878, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8849022, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8849022, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8859036, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8859036, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.886902, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.886902, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8879015, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8879015, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8879015, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.trino__type_timestamp": {"name": "trino__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_timestamp", "macro_sql": "{% macro trino__type_timestamp() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8889012, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8899014, "supported_languages": null}, "macro.dbt_expectations.spark__type_datetime": {"name": "spark__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.spark__type_datetime", "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8899014, "supported_languages": null}, "macro.dbt_expectations.trino__type_datetime": {"name": "trino__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_datetime", "macro_sql": "{% macro trino__type_datetime() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8899014, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8899014, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8899014, "supported_languages": null}, "macro.dbt_expectations.md5": {"name": "md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.md5", "macro_sql": "{%- macro md5(string_value) -%}\n    {{ return(adapter.dispatch('md5', 'dbt_expectations')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8909376, "supported_languages": null}, "macro.dbt_expectations.default__md5": {"name": "default__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.default__md5", "macro_sql": "\n\n{%- macro default__md5(string_value) -%}\n\n  {{ dbt.hash(string_value) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8913205, "supported_languages": null}, "macro.dbt_expectations.trino__md5": {"name": "trino__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.trino__md5", "macro_sql": "{%- macro trino__md5(string_value) -%}\n\n  md5(cast({{ string_value }} as varbinary))\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8913205, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.89154, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8925579, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8930917, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8940964, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8940964, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.8940964, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.896113, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.900096, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9011133, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9021127, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9021127, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9031124, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9031124, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9041123, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.905113, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9066763, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9076595, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.90804, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.90804, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9091032, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9091032, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9091032, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9100995, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9110987, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9110987, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9120996, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9130995, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9130995, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9140985, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9140985, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9150994, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9160786, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9311802, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.948358, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9516141, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9516141, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9526105, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9526105, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9560494, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9571567, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9600556, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9600556, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9610808, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9610808, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9610808, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9620707, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9620707, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9630735, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9630735, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762656.9640718, "supported_languages": null}, "macro.weather_dbt.add_unit_conversions_to_cels": {"name": "add_unit_conversions_to_cels", "resource_type": "macro", "package_name": "weather_dbt", "path": "macros\\add_unit_conversions_to_cels.sql", "original_file_path": "macros\\add_unit_conversions_to_cels.sql", "unique_id": "macro.weather_dbt.add_unit_conversions_to_cels", "macro_sql": "{% macro add_unit_conversions_to_cels(column_name) %}\r\n    {% set fahrenheit_col = column_name | replace('_c_', '_f_') %}\r\n    {% set kelvin_col = column_name | replace('_c_', '_k_') %}\r\n\r\n    {{ column_name }} * 9/5 + 32 AS {{ fahrenheit_col }}\r\n    , {{ column_name }} + 273.15 AS {{ kelvin_col }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762695.0848994, "supported_languages": null}, "macro.weather_dbt.add_unit_conversions_to_km": {"name": "add_unit_conversions_to_km", "resource_type": "macro", "package_name": "weather_dbt", "path": "macros\\add_unit_conversions_to_kph.sql", "original_file_path": "macros\\add_unit_conversions_to_kph.sql", "unique_id": "macro.weather_dbt.add_unit_conversions_to_km", "macro_sql": "{% macro add_unit_conversions_to_km(column_name) %}\r\n    {% set mile_col = column_name | replace('_kph_', '_miph_') %}\r\n    \r\n    {{ column_name }} * {{ var('v_km_to_mi') }} AS {{ mile_col }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1745762887.7389755, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.weather_dbt.b_astro": ["source.weather_dbt.landing_delta.ld_weather_astro"], "model.weather_dbt.b_astro_forecast": ["source.weather_dbt.landing_delta.ld_weather_astro_forecast"], "model.weather_dbt.b_city": ["source.weather_dbt.landing_delta.city"], "model.weather_dbt.b_country": ["source.weather_dbt.seed.country"], "model.weather_dbt.b_date": ["source.weather_dbt.landing_delta.ld_date"], "model.weather_dbt.b_weather": ["source.weather_dbt.landing_delta.ld_weather_measure"], "model.weather_dbt.b_weather_forecast": ["source.weather_dbt.landing_delta.ld_weather_forecast"], "model.weather_dbt.s_dim_city": ["model.weather_dbt.b_city", "source.weather_dbt.seed.city"], "model.weather_dbt.s_dim_country": ["model.weather_dbt.b_country"], "model.weather_dbt.s_dim_date": ["model.weather_dbt.b_date"], "model.weather_dbt.s_fct_astro": ["model.weather_dbt.b_astro", "model.weather_dbt.s_dim_city", "model.weather_dbt.s_dim_country"], "model.weather_dbt.s_fct_astro_forecast": ["model.weather_dbt.b_astro_forecast", "model.weather_dbt.s_dim_city", "model.weather_dbt.s_dim_country"], "model.weather_dbt.g_dim_city": ["model.weather_dbt.s_dim_city"], "model.weather_dbt.g_dim_city_nm": ["model.weather_dbt.s_dim_city"], "model.weather_dbt.g_dim_country": ["model.weather_dbt.s_dim_country"], "model.weather_dbt.g_dim_date": ["model.weather_dbt.s_dim_date"], "model.weather_dbt.g_dim_m_valid_dt": ["model.weather_dbt.s_fct_weather"], "model.weather_dbt.g_fct_astro": ["model.weather_dbt.s_fct_astro"], "model.weather_dbt.g_fct_astro_avg": ["model.weather_dbt.s_fct_astro"], "model.weather_dbt.g_fct_astro_forecast": ["model.weather_dbt.s_fct_astro_forecast"], "model.weather_dbt.g_fct_astro_forecast_avg": ["model.weather_dbt.s_fct_astro_forecast"], "model.weather_dbt.g_fct_weather": ["model.weather_dbt.s_fct_weather"], "model.weather_dbt.dq_s_dim_city": ["source.weather_dbt.dbt_dq_test.s_dim_city_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_dim_city_not_null_city_pk", "source.weather_dbt.dbt_dq_test.s_dim_city_unique_city_pk"], "model.weather_dbt.dq_s_fct_astro": ["source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_astro_not_null_astro_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_astro_unique_astro_pk"], "model.weather_dbt.dq_s_fct_astro_forecast": ["source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_not_null_astro_forecast_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_unique_astro_forecast_pk"], "model.weather_dbt.dq_s_fct_weather": ["source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_temp_c_no", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_cloud_coverage_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_humidity_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_rain_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_snow_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_temp_feelslike_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_not_null_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_weather_unique_weather_pk"], "model.weather_dbt.dq_s_fct_weather_forecast": ["source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_temp_c_no", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_cloud_coverage_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_humidity_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_rain_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_snow_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_temp_feelslike_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_not_null_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_unique_weather_pk"], "test.weather_dbt.s_fct_weather_invalid_cloud_coverage_cd": ["model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_invalid_humidity_cd": ["model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_invalid_rain_chance_cd": ["model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_invalid_snow_chance_cd": ["model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_invalid_temp_feelslike_cd": ["model.weather_dbt.s_fct_weather"], "seed.weather_dbt.city": [], "seed.weather_dbt.country": [], "test.weather_dbt.s_dim_city_not_null_city_pk.eb2d764e4c": ["model.weather_dbt.s_dim_city"], "test.weather_dbt.s_dim_city_unique_city_pk.5d1fec09e8": ["model.weather_dbt.s_dim_city"], "test.weather_dbt.s_dim_city_accepted_values_country_cd.8db2de7442": ["model.weather_dbt.s_dim_city"], "test.weather_dbt.s_fct_astro_accepted_range_m_valid_dt.ce54645416": ["model.weather_dbt.s_fct_astro"], "test.weather_dbt.s_fct_astro_not_null_astro_pk.bc7a6a8275": ["model.weather_dbt.s_fct_astro"], "test.weather_dbt.s_fct_astro_unique_astro_pk.ae4a162f31": ["model.weather_dbt.s_fct_astro"], "test.weather_dbt.s_fct_astro_rel_s_dim_city_city_fk.bbbc0c2336": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_astro"], "test.weather_dbt.s_fct_astro_accepted_values_country_cd.acc57e5fe8": ["model.weather_dbt.s_fct_astro"], "test.weather_dbt.s_fct_astro_forecast_accepted_range_m_valid_dt.6b23ed4e3a": ["model.weather_dbt.s_fct_astro_forecast"], "test.weather_dbt.s_fct_astro_forecast_not_null_astro_forecast_pk.04e9609d7f": ["model.weather_dbt.s_fct_astro_forecast"], "test.weather_dbt.s_fct_astro_forecast_unique_astro_forecast_pk.24e6af2a60": ["model.weather_dbt.s_fct_astro_forecast"], "test.weather_dbt.s_fct_astro_forecast_rel_s_dim_city_city_fk.40ba732794": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_astro_forecast"], "test.weather_dbt.s_fct_astro_forecast_accepted_values_country_cd.1e90bc9c48": ["model.weather_dbt.s_fct_astro_forecast"], "model.weather_dbt.g_fct_weather_avg": ["model.weather_dbt.s_fct_weather"], "model.weather_dbt.g_fct_weather_forecast_avg": ["model.weather_dbt.s_fct_weather_forecast"], "model.weather_dbt.dq_business_tests_summary": ["model.weather_dbt.dq_business_tests"], "model.weather_dbt.dq_dim_table_nm": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_standard_tests"], "model.weather_dbt.dq_business_tests": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather", "model.weather_dbt.s_fct_weather_forecast", "source.weather_dbt.dbt_dq_test.s_dim_city_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_temp_c_no", "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_m_valid_dt", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_temp_c_no", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_values_country_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_cloud_coverage_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_humidity_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_rain_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_snow_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_temp_feelslike_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_cloud_coverage_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_humidity_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_rain_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_snow_chance_cd", "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_temp_feelslike_cd"], "model.weather_dbt.dq_standard_tests_summary": ["model.weather_dbt.dq_standard_tests"], "model.weather_dbt.dq_standard_tests": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather", "model.weather_dbt.s_fct_weather_forecast", "source.weather_dbt.dbt_dq_test.s_dim_city_not_null_city_pk", "source.weather_dbt.dbt_dq_test.s_dim_city_unique_city_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_not_null_astro_forecast_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_unique_astro_forecast_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_not_null_astro_pk", "source.weather_dbt.dbt_dq_test.s_fct_astro_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_astro_unique_astro_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_not_null_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_unique_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_not_null_weather_pk", "source.weather_dbt.dbt_dq_test.s_fct_weather_rel_s_dim_city_city_fk", "source.weather_dbt.dbt_dq_test.s_fct_weather_unique_weather_pk"], "model.weather_dbt.g_dim_country_cd": ["model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather", "model.weather_dbt.s_fct_weather_forecast"], "model.weather_dbt.g_dim_county_nm": ["model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather", "model.weather_dbt.s_fct_weather_forecast"], "model.weather_dbt.g_fct_weather_forecast": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_invalid_cloud_coverage_cd": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_invalid_humidity_cd": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_invalid_rain_chance_cd": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_invalid_snow_chance_cd": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_invalid_temp_feelslike_cd": ["model.weather_dbt.s_fct_weather_forecast"], "model.weather_dbt.s_fct_weather_forecast": ["model.weather_dbt.b_weather_forecast", "model.weather_dbt.s_dim_city", "model.weather_dbt.s_dim_country"], "test.weather_dbt.s_fct_weather_forecast_accepted_range_m_valid_dt.6eae96b50b": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_not_null_weather_pk.795c9765d2": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_unique_weather_pk.c44d1db974": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_rel_s_dim_city_city_fk.7e448c69a1": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_accepted_values_country_cd.df0ff2d172": ["model.weather_dbt.s_fct_weather_forecast"], "test.weather_dbt.s_fct_weather_forecast_accepted_range_temp_c_no.e74a655f7c": ["model.weather_dbt.s_fct_weather_forecast"], "model.weather_dbt.s_fct_weather": ["model.weather_dbt.b_weather", "model.weather_dbt.s_dim_city", "model.weather_dbt.s_dim_country"], "test.weather_dbt.s_fct_weather_not_null_weather_pk.e318eddf85": ["model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_unique_weather_pk.6c57758345": ["model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_accepted_range_m_valid_dt.737ef6dc96": ["model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_rel_s_dim_city_city_fk.38d9746afc": ["model.weather_dbt.s_dim_city", "model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_accepted_values_country_cd.7da73a434d": ["model.weather_dbt.s_fct_weather"], "test.weather_dbt.s_fct_weather_accepted_range_temp_c_no.4ab123a254": ["model.weather_dbt.s_fct_weather"], "source.weather_dbt.landing_delta.city": [], "source.weather_dbt.landing_delta.ld_date": [], "source.weather_dbt.landing_delta.ld_weather_astro": [], "source.weather_dbt.landing_delta.ld_weather_astro_forecast": [], "source.weather_dbt.landing_delta.ld_weather_forecast": [], "source.weather_dbt.landing_delta.ld_weather_measure": [], "source.weather_dbt.seed.city": [], "source.weather_dbt.seed.country": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_cloud_coverage_cd": [], "source.weather_dbt.dbt_dq_test.s_dim_city_accepted_values_country_cd": [], "source.weather_dbt.dbt_dq_test.s_dim_city_not_null_city_pk": [], "source.weather_dbt.dbt_dq_test.s_dim_city_unique_city_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_range_m_valid_dt": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_values_country_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_range_m_valid_dt": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_values_country_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_not_null_astro_forecast_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_unique_astro_forecast_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_not_null_astro_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_unique_astro_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_m_valid_dt": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_temp_c_no": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_values_country_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_m_valid_dt": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_temp_c_no": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_values_country_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_humidity_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_rain_chance_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_snow_chance_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_temp_feelslike_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_not_null_weather_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_unique_weather_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_cloud_coverage_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_humidity_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_rain_chance_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_snow_chance_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_temp_feelslike_cd": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_not_null_weather_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_unique_weather_pk": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_rel_s_dim_city_city_fk": [], "source.weather_dbt.dbt_dq_test.s_fct_astro_rel_s_dim_city_city_fk": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_rel_s_dim_city_city_fk": [], "source.weather_dbt.dbt_dq_test.s_fct_weather_rel_s_dim_city_city_fk": []}, "child_map": {"model.weather_dbt.b_astro": ["model.weather_dbt.s_fct_astro"], "model.weather_dbt.b_astro_forecast": ["model.weather_dbt.s_fct_astro_forecast"], "model.weather_dbt.b_city": ["model.weather_dbt.s_dim_city"], "model.weather_dbt.b_country": ["model.weather_dbt.s_dim_country"], "model.weather_dbt.b_date": ["model.weather_dbt.s_dim_date"], "model.weather_dbt.b_weather": ["model.weather_dbt.s_fct_weather"], "model.weather_dbt.b_weather_forecast": ["model.weather_dbt.s_fct_weather_forecast"], "model.weather_dbt.s_dim_city": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_standard_tests", "model.weather_dbt.g_dim_city", "model.weather_dbt.g_dim_city_nm", "model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather", "model.weather_dbt.s_fct_weather_forecast", "test.weather_dbt.s_dim_city_accepted_values_country_cd.8db2de7442", "test.weather_dbt.s_dim_city_not_null_city_pk.eb2d764e4c", "test.weather_dbt.s_dim_city_unique_city_pk.5d1fec09e8", "test.weather_dbt.s_fct_astro_forecast_rel_s_dim_city_city_fk.40ba732794", "test.weather_dbt.s_fct_astro_rel_s_dim_city_city_fk.bbbc0c2336", "test.weather_dbt.s_fct_weather_forecast_rel_s_dim_city_city_fk.7e448c69a1", "test.weather_dbt.s_fct_weather_rel_s_dim_city_city_fk.38d9746afc"], "model.weather_dbt.s_dim_country": ["model.weather_dbt.g_dim_country", "model.weather_dbt.s_fct_astro", "model.weather_dbt.s_fct_astro_forecast", "model.weather_dbt.s_fct_weather", "model.weather_dbt.s_fct_weather_forecast"], "model.weather_dbt.s_dim_date": ["model.weather_dbt.g_dim_date"], "model.weather_dbt.s_fct_astro": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_standard_tests", "model.weather_dbt.g_dim_country_cd", "model.weather_dbt.g_dim_county_nm", "model.weather_dbt.g_fct_astro", "model.weather_dbt.g_fct_astro_avg", "test.weather_dbt.s_fct_astro_accepted_range_m_valid_dt.ce54645416", "test.weather_dbt.s_fct_astro_accepted_values_country_cd.acc57e5fe8", "test.weather_dbt.s_fct_astro_not_null_astro_pk.bc7a6a8275", "test.weather_dbt.s_fct_astro_rel_s_dim_city_city_fk.bbbc0c2336", "test.weather_dbt.s_fct_astro_unique_astro_pk.ae4a162f31"], "model.weather_dbt.s_fct_astro_forecast": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_standard_tests", "model.weather_dbt.g_dim_country_cd", "model.weather_dbt.g_dim_county_nm", "model.weather_dbt.g_fct_astro_forecast", "model.weather_dbt.g_fct_astro_forecast_avg", "test.weather_dbt.s_fct_astro_forecast_accepted_range_m_valid_dt.6b23ed4e3a", "test.weather_dbt.s_fct_astro_forecast_accepted_values_country_cd.1e90bc9c48", "test.weather_dbt.s_fct_astro_forecast_not_null_astro_forecast_pk.04e9609d7f", "test.weather_dbt.s_fct_astro_forecast_rel_s_dim_city_city_fk.40ba732794", "test.weather_dbt.s_fct_astro_forecast_unique_astro_forecast_pk.24e6af2a60"], "model.weather_dbt.g_dim_city": [], "model.weather_dbt.g_dim_city_nm": [], "model.weather_dbt.g_dim_country": [], "model.weather_dbt.g_dim_date": [], "model.weather_dbt.g_dim_m_valid_dt": [], "model.weather_dbt.g_fct_astro": [], "model.weather_dbt.g_fct_astro_avg": [], "model.weather_dbt.g_fct_astro_forecast": [], "model.weather_dbt.g_fct_astro_forecast_avg": [], "model.weather_dbt.g_fct_weather": [], "model.weather_dbt.dq_s_dim_city": [], "model.weather_dbt.dq_s_fct_astro": [], "model.weather_dbt.dq_s_fct_astro_forecast": [], "model.weather_dbt.dq_s_fct_weather": [], "model.weather_dbt.dq_s_fct_weather_forecast": [], "test.weather_dbt.s_fct_weather_invalid_cloud_coverage_cd": [], "test.weather_dbt.s_fct_weather_invalid_humidity_cd": [], "test.weather_dbt.s_fct_weather_invalid_rain_chance_cd": [], "test.weather_dbt.s_fct_weather_invalid_snow_chance_cd": [], "test.weather_dbt.s_fct_weather_invalid_temp_feelslike_cd": [], "seed.weather_dbt.city": [], "seed.weather_dbt.country": [], "test.weather_dbt.s_dim_city_not_null_city_pk.eb2d764e4c": [], "test.weather_dbt.s_dim_city_unique_city_pk.5d1fec09e8": [], "test.weather_dbt.s_dim_city_accepted_values_country_cd.8db2de7442": [], "test.weather_dbt.s_fct_astro_accepted_range_m_valid_dt.ce54645416": [], "test.weather_dbt.s_fct_astro_not_null_astro_pk.bc7a6a8275": [], "test.weather_dbt.s_fct_astro_unique_astro_pk.ae4a162f31": [], "test.weather_dbt.s_fct_astro_rel_s_dim_city_city_fk.bbbc0c2336": [], "test.weather_dbt.s_fct_astro_accepted_values_country_cd.acc57e5fe8": [], "test.weather_dbt.s_fct_astro_forecast_accepted_range_m_valid_dt.6b23ed4e3a": [], "test.weather_dbt.s_fct_astro_forecast_not_null_astro_forecast_pk.04e9609d7f": [], "test.weather_dbt.s_fct_astro_forecast_unique_astro_forecast_pk.24e6af2a60": [], "test.weather_dbt.s_fct_astro_forecast_rel_s_dim_city_city_fk.40ba732794": [], "test.weather_dbt.s_fct_astro_forecast_accepted_values_country_cd.1e90bc9c48": [], "model.weather_dbt.g_fct_weather_avg": [], "model.weather_dbt.g_fct_weather_forecast_avg": [], "model.weather_dbt.dq_business_tests_summary": [], "model.weather_dbt.dq_dim_table_nm": [], "model.weather_dbt.dq_business_tests": ["model.weather_dbt.dq_business_tests_summary", "model.weather_dbt.dq_dim_table_nm"], "model.weather_dbt.dq_standard_tests_summary": [], "model.weather_dbt.dq_standard_tests": ["model.weather_dbt.dq_dim_table_nm", "model.weather_dbt.dq_standard_tests_summary"], "model.weather_dbt.g_dim_country_cd": [], "model.weather_dbt.g_dim_county_nm": [], "model.weather_dbt.g_fct_weather_forecast": [], "test.weather_dbt.s_fct_weather_forecast_invalid_cloud_coverage_cd": [], "test.weather_dbt.s_fct_weather_forecast_invalid_humidity_cd": [], "test.weather_dbt.s_fct_weather_forecast_invalid_rain_chance_cd": [], "test.weather_dbt.s_fct_weather_forecast_invalid_snow_chance_cd": [], "test.weather_dbt.s_fct_weather_forecast_invalid_temp_feelslike_cd": [], "model.weather_dbt.s_fct_weather_forecast": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_standard_tests", "model.weather_dbt.g_dim_country_cd", "model.weather_dbt.g_dim_county_nm", "model.weather_dbt.g_fct_weather_forecast", "model.weather_dbt.g_fct_weather_forecast_avg", "test.weather_dbt.s_fct_weather_forecast_accepted_range_m_valid_dt.6eae96b50b", "test.weather_dbt.s_fct_weather_forecast_accepted_range_temp_c_no.e74a655f7c", "test.weather_dbt.s_fct_weather_forecast_accepted_values_country_cd.df0ff2d172", "test.weather_dbt.s_fct_weather_forecast_invalid_cloud_coverage_cd", "test.weather_dbt.s_fct_weather_forecast_invalid_humidity_cd", "test.weather_dbt.s_fct_weather_forecast_invalid_rain_chance_cd", "test.weather_dbt.s_fct_weather_forecast_invalid_snow_chance_cd", "test.weather_dbt.s_fct_weather_forecast_invalid_temp_feelslike_cd", "test.weather_dbt.s_fct_weather_forecast_not_null_weather_pk.795c9765d2", "test.weather_dbt.s_fct_weather_forecast_rel_s_dim_city_city_fk.7e448c69a1", "test.weather_dbt.s_fct_weather_forecast_unique_weather_pk.c44d1db974"], "test.weather_dbt.s_fct_weather_forecast_accepted_range_m_valid_dt.6eae96b50b": [], "test.weather_dbt.s_fct_weather_forecast_not_null_weather_pk.795c9765d2": [], "test.weather_dbt.s_fct_weather_forecast_unique_weather_pk.c44d1db974": [], "test.weather_dbt.s_fct_weather_forecast_rel_s_dim_city_city_fk.7e448c69a1": [], "test.weather_dbt.s_fct_weather_forecast_accepted_values_country_cd.df0ff2d172": [], "test.weather_dbt.s_fct_weather_forecast_accepted_range_temp_c_no.e74a655f7c": [], "model.weather_dbt.s_fct_weather": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_standard_tests", "model.weather_dbt.g_dim_country_cd", "model.weather_dbt.g_dim_county_nm", "model.weather_dbt.g_dim_m_valid_dt", "model.weather_dbt.g_fct_weather", "model.weather_dbt.g_fct_weather_avg", "test.weather_dbt.s_fct_weather_accepted_range_m_valid_dt.737ef6dc96", "test.weather_dbt.s_fct_weather_accepted_range_temp_c_no.4ab123a254", "test.weather_dbt.s_fct_weather_accepted_values_country_cd.7da73a434d", "test.weather_dbt.s_fct_weather_invalid_cloud_coverage_cd", "test.weather_dbt.s_fct_weather_invalid_humidity_cd", "test.weather_dbt.s_fct_weather_invalid_rain_chance_cd", "test.weather_dbt.s_fct_weather_invalid_snow_chance_cd", "test.weather_dbt.s_fct_weather_invalid_temp_feelslike_cd", "test.weather_dbt.s_fct_weather_not_null_weather_pk.e318eddf85", "test.weather_dbt.s_fct_weather_rel_s_dim_city_city_fk.38d9746afc", "test.weather_dbt.s_fct_weather_unique_weather_pk.6c57758345"], "test.weather_dbt.s_fct_weather_not_null_weather_pk.e318eddf85": [], "test.weather_dbt.s_fct_weather_unique_weather_pk.6c57758345": [], "test.weather_dbt.s_fct_weather_accepted_range_m_valid_dt.737ef6dc96": [], "test.weather_dbt.s_fct_weather_rel_s_dim_city_city_fk.38d9746afc": [], "test.weather_dbt.s_fct_weather_accepted_values_country_cd.7da73a434d": [], "test.weather_dbt.s_fct_weather_accepted_range_temp_c_no.4ab123a254": [], "source.weather_dbt.landing_delta.city": ["model.weather_dbt.b_city"], "source.weather_dbt.landing_delta.ld_date": ["model.weather_dbt.b_date"], "source.weather_dbt.landing_delta.ld_weather_astro": ["model.weather_dbt.b_astro"], "source.weather_dbt.landing_delta.ld_weather_astro_forecast": ["model.weather_dbt.b_astro_forecast"], "source.weather_dbt.landing_delta.ld_weather_forecast": ["model.weather_dbt.b_weather_forecast"], "source.weather_dbt.landing_delta.ld_weather_measure": ["model.weather_dbt.b_weather"], "source.weather_dbt.seed.city": ["model.weather_dbt.s_dim_city"], "source.weather_dbt.seed.country": ["model.weather_dbt.b_country"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_cloud_coverage_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather_forecast"], "source.weather_dbt.dbt_dq_test.s_dim_city_accepted_values_country_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_dim_city"], "source.weather_dbt.dbt_dq_test.s_dim_city_not_null_city_pk": ["model.weather_dbt.dq_s_dim_city", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_dim_city_unique_city_pk": ["model.weather_dbt.dq_s_dim_city", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_range_m_valid_dt": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_astro"], "source.weather_dbt.dbt_dq_test.s_fct_astro_accepted_values_country_cd": ["model.weather_dbt.dq_s_fct_astro"], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_range_m_valid_dt": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_astro_forecast"], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_accepted_values_country_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_astro_forecast"], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_not_null_astro_forecast_pk": ["model.weather_dbt.dq_s_fct_astro_forecast", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_unique_astro_forecast_pk": ["model.weather_dbt.dq_s_fct_astro_forecast", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_astro_not_null_astro_pk": ["model.weather_dbt.dq_s_fct_astro", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_astro_unique_astro_pk": ["model.weather_dbt.dq_s_fct_astro", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_m_valid_dt": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather"], "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_range_temp_c_no": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather"], "source.weather_dbt.dbt_dq_test.s_fct_weather_accepted_values_country_cd": ["model.weather_dbt.dq_business_tests"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_m_valid_dt": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather_forecast"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_range_temp_c_no": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather_forecast"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_accepted_values_country_cd": ["model.weather_dbt.dq_business_tests"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_humidity_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather_forecast"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_rain_chance_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather_forecast"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_snow_chance_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather_forecast"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_invalid_temp_feelslike_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather_forecast"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_not_null_weather_pk": ["model.weather_dbt.dq_s_fct_weather_forecast", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_unique_weather_pk": ["model.weather_dbt.dq_s_fct_weather_forecast", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_cloud_coverage_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather"], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_humidity_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather"], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_rain_chance_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather"], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_snow_chance_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather"], "source.weather_dbt.dbt_dq_test.s_fct_weather_invalid_temp_feelslike_cd": ["model.weather_dbt.dq_business_tests", "model.weather_dbt.dq_s_fct_weather"], "source.weather_dbt.dbt_dq_test.s_fct_weather_not_null_weather_pk": ["model.weather_dbt.dq_s_fct_weather", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_weather_unique_weather_pk": ["model.weather_dbt.dq_s_fct_weather", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_astro_forecast_rel_s_dim_city_city_fk": ["model.weather_dbt.dq_s_fct_astro_forecast", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_astro_rel_s_dim_city_city_fk": ["model.weather_dbt.dq_s_fct_astro", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_weather_forecast_rel_s_dim_city_city_fk": ["model.weather_dbt.dq_s_fct_weather_forecast", "model.weather_dbt.dq_standard_tests"], "source.weather_dbt.dbt_dq_test.s_fct_weather_rel_s_dim_city_city_fk": ["model.weather_dbt.dq_s_fct_weather", "model.weather_dbt.dq_standard_tests"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}