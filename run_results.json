{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.3", "generated_at": "2025-04-21T16:52:05.167184Z", "invocation_id": "b9b4c7d0-b3ce-473a-b954-2aa14f288fe5", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.622453Z", "completed_at": "2025-04-21T16:52:04.640819Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.640819Z", "completed_at": "2025-04-21T16:52:04.640819Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.03414583206176758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.b_astro_forecast", "compiled": true, "compiled_code": "WITH ld_astro_forecast AS (\n    SELECT \n        *\n    FROM \"lh_weather\".\"dbo\".\"ld_weather_astro_forecast\"\n),\n\nb_astro_forecast AS (\n    SELECT\n        CONVERT(DATE, m_valid_dt) AS m_valid_dt\n        ,CONVERT(BIT, is_moon_up) AS moon_up_flg\n        ,CONVERT(BIT, is_sun_up) AS sun_up_flg\n        ,CONVERT(INT, moon_illumination) AS moon_illumination_pct\n        ,CONVERT(VARCHAR(20), moon_phase) AS moon_phase_cd\n        ,CONVERT(VARCHAR(11), moonrise) AS moonrise_t\n        ,CONVERT(VARCHAR(10), moonset) AS moonset_t\n        ,CONVERT(VARCHAR(10), sunrise) AS sunrise_t\n        ,CONVERT(VARCHAR(10), sunset) AS sunset_t\n        ,CONVERT(VARCHAR(50), city) AS city_nm\n        ,CONVERT(VARCHAR(50), country_EN) AS country_nm\n        ,CONVERT(DATE, forecast_date) AS forecast_dt\n        ,CONVERT(DATETIME2(6), m_extracted_at_dttm) AS m_extracted_at_dttm\n        ,CONVERT(DATETIME2(6), m_updated_at_dttm) AS m_updated_at_dttm\n    FROM ld_astro_forecast\n)\n\nSELECT * FROM b_astro_forecast", "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_astro_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.622453Z", "completed_at": "2025-04-21T16:52:04.640819Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.640819Z", "completed_at": "2025-04-21T16:52:04.640819Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.03414583206176758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.b_city", "compiled": true, "compiled_code": "WITH ld_city AS (\n    SELECT \n        *\n    FROM \"lh_weather\".\"dbo\".\"city\"\n),\n\nb_city AS (\n    SELECT\n        CONVERT(VARCHAR(50), Country) AS country_cd\n        ,CONVERT(VARCHAR(50), County) AS county_nm\n        ,CONVERT(VARCHAR(50), City) AS city_nm\n    FROM ld_city\n)\n\nSELECT * FROM b_city", "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.622453Z", "completed_at": "2025-04-21T16:52:04.640819Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.640819Z", "completed_at": "2025-04-21T16:52:04.640819Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.03414583206176758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.b_country", "compiled": true, "compiled_code": "WITH country_raw AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt\".\"country\"\n),\n\nb_country AS (\n    SELECT\n        CONVERT(VARCHAR(2), country_code) AS country_cd\n        ,CONVERT(VARCHAR(50), country) AS country_nm\n        ,CONVERT(VARCHAR(50), continent) AS continent_nm\n        ,CONVERT(BIT, eu_member_flag) AS eu_member_flg\n        ,CONVERT(VARCHAR(3), currency) AS currency_cd\n        ,CONVERT(VARCHAR(3), iso_alpha_3) AS iso_alpha_3_cd\n    FROM country_raw\n)\n\nSELECT * FROM b_country", "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.606673Z", "completed_at": "2025-04-21T16:52:04.640819Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.640819Z", "completed_at": "2025-04-21T16:52:04.640819Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03414583206176758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.b_astro", "compiled": true, "compiled_code": "WITH ld_astro AS (\n    SELECT \n        *\n    FROM \"lh_weather\".\"dbo\".\"ld_weather_astro\"\n),\n\nb_astro AS (\n    SELECT\n        CONVERT(DATE, m_valid_dt) AS m_valid_dt\n        ,CONVERT(INT, moon_illumination) AS moon_illumination_pct\n        ,CONVERT(VARCHAR(20), moon_phase) AS moon_phase_cd\n        ,CONVERT(VARCHAR(11), moonrise) AS moonrise_t\n        ,CONVERT(VARCHAR(10), moonset) AS moonset_t\n        ,CONVERT(VARCHAR(10), sunrise) AS sunrise_t\n        ,CONVERT(VARCHAR(10), sunset) AS sunset_t\n        ,CONVERT(VARCHAR(50), city) AS city_nm\n        ,CONVERT(VARCHAR(50), country_EN) AS country_nm\n        ,CONVERT(DATE, forecast_date) AS forecast_dt\n        ,CONVERT(DATETIME2(6), m_extracted_at_dttm) AS m_extracted_at_dttm\n        ,CONVERT(DATETIME2(6), m_updated_at_dttm) AS m_updated_at_dttm\n    FROM ld_astro\n)\n\nSELECT * FROM b_astro", "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_astro\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.653831Z", "completed_at": "2025-04-21T16:52:04.677822Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.678817Z", "completed_at": "2025-04-21T16:52:04.678817Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.03899836540222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.b_date", "compiled": true, "compiled_code": "WITH ld_date AS (\n    SELECT \n        *\n    FROM \"lh_weather\".\"dbo\".\"ld_date\"\n),\n\nb_date AS (\n    SELECT\n        CONVERT(DATE, date) AS date\n        ,CONVERT(DATETIME2(6), date_timestamp) AS date_dttm\n        ,CONVERT(INT, year_num) AS year_num\n        ,CONVERT(VARCHAR(4), year_txt) AS year_txt\n        ,CONVERT(VARCHAR(1), quarter_num) AS quarter_num\n        ,CONVERT(VARCHAR(2), quarter_txt) AS quarter_txt\n        ,CONVERT(VARCHAR(2), month_num) AS month_num\n        ,CONVERT(VARCHAR(10), month_txt) AS month_txt\n        ,CONVERT(VARCHAR(2), day_num) AS day_num\n        ,CONVERT(VARCHAR(10), day_txt) AS day_txt\n        ,CONVERT(VARCHAR(7), year_quarter_txt) AS year_quarter_txt\n        ,CONVERT(VARCHAR(7), year_month_txt) AS year_month_txt\n    FROM ld_date\n)\n\nSELECT * FROM b_date", "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.658341Z", "completed_at": "2025-04-21T16:52:04.679818Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.682818Z", "completed_at": "2025-04-21T16:52:04.682818Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.041998863220214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.b_weather", "compiled": true, "compiled_code": "WITH ld_weather AS (\n    SELECT \n        *\n    FROM \"lh_weather\".\"dbo\".\"ld_weather_measure\"\n),\n\nb_weather AS (\n    SELECT\n        CONVERT(DATE, m_valid_dt) AS m_valid_dt\n        ,CONVERT(INT, chance_of_rain) AS rain_chance_pct\n        ,CONVERT(INT, chance_of_snow) AS snow_chance_pct\n        ,CONVERT(INT, cloud) AS cloud_coverage_pct\n        ,CONVERT(DECIMAL(14, 4), feelslike_c) AS temp_feelslike_no\n        ,CONVERT(DECIMAL(14, 4), gust_kph) AS gust_kph_no\n        ,CONVERT(INT, humidity) AS humidity_pct\n        ,CONVERT(DECIMAL(14, 4), heatindex_c) AS heatindex_c_no\n        ,CONVERT(BIT, is_day) AS is_day_flg\n        ,CONVERT(DECIMAL(14, 4), precip_mm) AS precip_mm_no\n        ,CONVERT(DECIMAL(14, 4), pressure_mb) AS pressure_mb_no\n        ,CONVERT(DECIMAL(14, 4), temp_c) AS temp_c_no\n        ,CONVERT(DATETIME2(6), time) date_dtt\n        ,CONVERT(INT, time_epoch) AS time_epoch\n        ,CONVERT(DECIMAL(14, 4), uv) AS uv_no\n        ,CONVERT(DECIMAL(14, 4), vis_km) AS vis_km_no\n        ,CONVERT(VARCHAR(8), wind_dir) AS wind_dir_cd\n        ,CONVERT(DECIMAL(14, 4), wind_kph) AS wind_kph_no\n        ,CONVERT(DECIMAL(14, 4), windchill_c) AS windchill_c_no\n        ,CONVERT(VARCHAR(30), city) AS city_nm\n        ,CONVERT(VARCHAR(30), country_EN) AS country_nm\n        ,CONVERT(DATE, forecast_date) AS forecast_dt\n        ,CONVERT(DATETIME2(6), m_extracted_at_dttm) AS m_extracted_at_dttm\n        ,CONVERT(DATETIME2(6), m_updated_at_dttm) AS m_updated_at_dttm\n    FROM ld_weather\n)\n\nSELECT * FROM b_weather", "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_weather\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.658341Z", "completed_at": "2025-04-21T16:52:04.681817Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.684819Z", "completed_at": "2025-04-21T16:52:04.684819Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.030988216400146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.b_weather_forecast", "compiled": true, "compiled_code": "WITH ld_weather_forecast AS (\n    SELECT \n        *\n    FROM \"lh_weather\".\"dbo\".\"ld_weather_forecast\"\n),\n\nb_weather_forecast AS (\n    SELECT\n        CONVERT(DATE, m_valid_dt) AS m_valid_dt\n        ,CONVERT(INT, chance_of_rain) AS rain_chance_pct\n        ,CONVERT(INT, chance_of_snow) AS snow_chance_pct\n        ,CONVERT(INT, cloud) AS cloud_coverage_pct\n        ,CONVERT(DECIMAL(14, 4), feelslike_c) AS temp_feelslike_no\n        ,CONVERT(DECIMAL(14, 4), gust_kph) AS gust_kph_no\n        ,CONVERT(INT, humidity) AS humidity_pct\n        ,CONVERT(DECIMAL(14, 4), heatindex_c) AS heatindex_c_no\n        ,CONVERT(BIT, is_day) AS is_day_flg\n        ,CONVERT(DECIMAL(14, 4), precip_mm) AS precip_mm_no\n        ,CONVERT(DECIMAL(14, 4), pressure_mb) AS pressure_mb_no\n        ,CONVERT(DECIMAL(14, 4), temp_c) AS temp_c_no\n        ,CONVERT(DATETIME2(6), time) date_dtt\n        ,CONVERT(INT, time_epoch) AS time_epoch\n        ,CONVERT(DECIMAL(14, 4), uv) AS uv_no\n        ,CONVERT(DECIMAL(14, 4), vis_km) AS vis_km_no\n        ,CONVERT(VARCHAR(8), wind_dir) AS wind_dir_cd\n        ,CONVERT(DECIMAL(14, 4), wind_kph) AS wind_kph_no\n        ,CONVERT(DECIMAL(14, 4), windchill_c) AS windchill_c_no\n        ,CONVERT(VARCHAR(30), city) AS city_nm\n        ,CONVERT(VARCHAR(30), country_EN) AS country_nm\n        ,CONVERT(DATE, forecast_date) AS forecast_dt\n        ,CONVERT(DATETIME2(6), m_extracted_at_dttm) AS m_extracted_at_dttm\n        ,CONVERT(DATETIME2(6), m_updated_at_dttm) AS m_updated_at_dttm\n    FROM ld_weather_forecast\n)\n\nSELECT * FROM b_weather_forecast", "relation_name": "\"wh_weather\".\"dbt_bronze\".\"b_weather_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.674810Z", "completed_at": "2025-04-21T16:52:04.682818Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.685628Z", "completed_at": "2025-04-21T16:52:04.685628Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03179740905761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_s_dim_city", "compiled": true, "compiled_code": "WITH s_dim_city_not_null_city_pk AS (\n    SELECT\n        'city_pk' AS tested_field_nm\n        ,'not_null' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_dim_city_not_null_city_pk\"\n),\n\n\ns_dim_city_unique_city_pk AS (\n    SELECT\n        'city_pk' AS tested_field_nm\n        ,'unique' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_dim_city_unique_city_pk\"\n),\n\ns_dim_city_accepted_values_country_cd AS (\n    SELECT\n        'country_cd' AS tested_field_nm\n        ,'accepted_values' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_dim_city_accepted_values_country_cd\"\n),\n\nunion_tests AS (\n    SELECT * FROM s_dim_city_not_null_city_pk\n    UNION ALL\n    SELECT * FROM s_dim_city_unique_city_pk\n    UNION ALL\n    SELECT * FROM s_dim_city_accepted_values_country_cd\n)\n\nSELECT * FROM union_tests", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.688636Z", "completed_at": "2025-04-21T16:52:04.690928Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.708876Z", "completed_at": "2025-04-21T16:52:04.708876Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.025058984756469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_s_fct_astro", "compiled": true, "compiled_code": "WITH s_fct_astro_not_null_astro_pk AS (\n    SELECT \n        'astro_pk' AS tested_field_nm\n        ,'not_null' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_not_null_astro_pk\"\n),\n\ns_fct_astro_unique_astro_pk AS (\n    SELECT \n        'astro_pk' AS tested_field_nm\n        ,'unique' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_unique_astro_pk\"\n),\n\ns_fct_astro_accepted_range_m_valid_dt AS (\n    SELECT \n        'm_valid_dt' AS tested_field_nm\n        ,'accepted_range' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_range_m_valid_dt\"\n),\n\ns_fct_astro_accepted_values_country_cd AS (\n    SELECT \n        'country_cd' AS tested_field_nm\n        ,'accepted_values' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_values_country_cd\"\n),\n\ns_fct_astro_rel_s_dim_city_city_fk AS (\n    SELECT\n        'city_fk' AS tested_field_nm\n        ,'relationships' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_rel_s_dim_city_city_fk\"  \n),\n\nunion_tests AS (\n    SELECT * FROM s_fct_astro_not_null_astro_pk\n    UNION ALL\n    SELECT * FROM s_fct_astro_unique_astro_pk\n    UNION ALL\n    SELECT * FROM s_fct_astro_accepted_range_m_valid_dt\n    UNION ALL\n    SELECT * FROM s_fct_astro_accepted_values_country_cd\n    UNION ALL\n    SELECT * FROM s_fct_astro_rel_s_dim_city_city_fk\n)\n\nSELECT * FROM union_tests", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_fct_astro\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.690928Z", "completed_at": "2025-04-21T16:52:04.708876Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.708876Z", "completed_at": "2025-04-21T16:52:04.708876Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.02023911476135254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_s_fct_astro_forecast", "compiled": true, "compiled_code": "WITH s_fct_astro_forecast_not_null_astro_forecast_pk AS (\n    SELECT \n        'astro_forecast_pk' AS tested_field_nm\n        ,'not_null' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_not_null_astro_forecast_pk\"\n),\n\ns_fct_astro_forecast_unique_astro_forecast_pk AS (\n    SELECT \n        'astro_forecast_pk' AS tested_field_nm\n        ,'unique' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_unique_astro_forecast_pk\"\n),\n\ns_fct_astro_forecast_accepted_range_m_valid_dt AS (\n    SELECT \n        'm_valid_dt' AS tested_field_nm\n        ,'accepted_range' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_range_m_valid_dt\"\n),\n\ns_fct_astro_forecast_accepted_values_country_cd AS (\n    SELECT \n        'country_cd' AS tested_field_nm\n        ,'accepted_values' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_values_country_cd\"\n),\n\ns_fct_astro_forecast_rel_s_dim_city_city_fk AS (\n    SELECT \n        'city_fk' AS tested_field_nm\n        ,'relationships' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_rel_s_dim_city_city_fk\"\n),\n\nunion_tests AS (\n    SELECT * FROM s_fct_astro_forecast_not_null_astro_forecast_pk\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_unique_astro_forecast_pk\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_accepted_range_m_valid_dt\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_accepted_values_country_cd\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_rel_s_dim_city_city_fk\n)\n\nSELECT * FROM union_tests", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_fct_astro_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.690928Z", "completed_at": "2025-04-21T16:52:04.708876Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.708876Z", "completed_at": "2025-04-21T16:52:04.708876Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.017947673797607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_s_fct_weather", "compiled": true, "compiled_code": "WITH s_fct_weather_not_null_weather_pk AS (\n    SELECT\n        'weather_pk' AS tested_field_nm\n        ,'not_null' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_not_null_weather_pk\"\n),\n\ns_fct_weather_unique_weather_pk AS (\n    SELECT\n        'weather_pk' AS tested_field_nm\n        ,'unique' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_unique_weather_pk\"\n),\n\ns_fct_weather_accepted_range_m_valid_dt AS (\n    SELECT\n        'm_valid_dt' AS tested_field_nm\n        ,'accepted_range' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_m_valid_dt\"\n),\n\ns_fct_weather_accepted_range_temp_c_no AS (\n    SELECT\n        'temp_c_no' AS tested_field_nm\n        ,'accepted_range' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_temp_c_no\"\n),\n\ns_fct_weather_accepted_values_country_cd AS (\n    SELECT\n        'temp_c_no' AS tested_field_nm\n        ,'accepted_range' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_temp_c_no\"\n),\n\ns_fct_weather_invalid_cloud_coverage_cd AS (\n    SELECT\n        'cloud_coverage_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_cloud_coverage_cd\"\n),\n\ns_fct_weather_invalid_humidity_cd AS (\n    SELECT\n        'humidity_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_humidity_cd\"\n),\n\ns_fct_weather_invalid_rain_chance_cd AS (\n    SELECT\n        'rain_chance_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_rain_chance_cd\"\n),\n\ns_fct_weather_invalid_snow_chance_cd AS (\n    SELECT\n        'snow_chance_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_snow_chance_cd\"\n),\n\ns_fct_weather_invalid_temp_feelslike_cd AS (\n    SELECT\n        'temp_feelslike_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_temp_feelslike_cd\"\n),\n\ns_fct_weather_rel_s_dim_city_city_fk AS (\n    SELECT\n        'city_fk' AS tested_field_nm\n        ,'relationships' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_rel_s_dim_city_city_fk\"\n),\n\nunion_tests AS (\n    SELECT * FROM s_fct_weather_not_null_weather_pk\n    UNION ALL\n    SELECT * FROM s_fct_weather_unique_weather_pk\n    UNION ALL\n    SELECT * FROM s_fct_weather_accepted_range_m_valid_dt\n    UNION ALL\n    SELECT * FROM s_fct_weather_accepted_range_temp_c_no\n    UNION ALL\n    SELECT * FROM s_fct_weather_accepted_values_country_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_cloud_coverage_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_humidity_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_rain_chance_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_snow_chance_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_temp_feelslike_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_rel_s_dim_city_city_fk\n)\n\nSELECT * FROM union_tests", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_fct_weather\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.690928Z", "completed_at": "2025-04-21T16:52:04.708876Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.708876Z", "completed_at": "2025-04-21T16:52:04.708876Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.017947673797607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_s_fct_weather_forecast", "compiled": true, "compiled_code": "WITH s_fct_weather_forecast_not_null_weather_pk AS (\n    SELECT\n        'weather_pk' AS tested_field_nm\n        ,'not_null' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_not_null_weather_pk\"\n),\n\ns_fct_weather_forecast_unique_weather_pk AS (\n    SELECT\n        'weather_pk' AS tested_field_nm\n        ,'unique' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_unique_weather_pk\"\n),\n\ns_fct_weather_forecast_accepted_range_m_valid_dt AS (\n    SELECT\n        'm_valid_dt' AS tested_field_nm\n        ,'accepted_range' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_m_valid_dt\"\n),\n\ns_fct_weather_forecast_accepted_range_temp_c_no AS (\n    SELECT\n        'temp_c_no' AS tested_field_nm\n        ,'accepted_range' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_temp_c_no\"\n),\n\ns_fct_weather_forecast_accepted_values_country_cd AS (\n    SELECT\n        'temp_c_no' AS tested_field_nm\n        ,'accepted_range' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_temp_c_no\"\n),\n\ns_fct_weather_forecast_invalid_cloud_coverage_cd AS (\n    SELECT\n        'cloud_coverage_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_cloud_coverage_cd\"\n),\n\ns_fct_weather_forecast_invalid_humidity_cd AS (\n    SELECT\n        'humidity_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_humidity_cd\"\n),\n\ns_fct_weather_forecast_invalid_rain_chance_cd AS (\n    SELECT\n        'rain_chance_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_rain_chance_cd\"\n),\n\ns_fct_weather_forecast_invalid_snow_chance_cd AS (\n    SELECT\n        'snow_chance_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_snow_chance_cd\"\n),\n\ns_fct_weather_forecast_invalid_temp_feelslike_cd AS (\n    SELECT\n        'temp_feelslike_cd' AS tested_field_nm\n        ,'invalid' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_temp_feelslike_cd\"\n),\n\ns_fct_weather_forecast_rel_s_dim_city_city_fk AS (\n    SELECT\n        'city_fk' AS tested_field_nm\n        ,'relationships' AS test_type_cd\n        ,*\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_rel_s_dim_city_city_fk\"\n\n),\n\nunion_tests AS (\n    SELECT * FROM s_fct_weather_forecast_not_null_weather_pk\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_unique_weather_pk\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_accepted_range_m_valid_dt\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_accepted_range_temp_c_no\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_accepted_values_country_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_cloud_coverage_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_humidity_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_rain_chance_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_snow_chance_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_temp_feelslike_cd\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_rel_s_dim_city_city_fk\n)\n\nSELECT * FROM union_tests", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_s_fct_weather_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.708876Z", "completed_at": "2025-04-21T16:52:04.722419Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.722419Z", "completed_at": "2025-04-21T16:52:04.722419Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.013543367385864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.weather_dbt.city", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.722419Z", "completed_at": "2025-04-21T16:52:04.722419Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.722419Z", "completed_at": "2025-04-21T16:52:04.722419Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.013543367385864258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.weather_dbt.country", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.722419Z", "completed_at": "2025-04-21T16:52:04.740665Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.740665Z", "completed_at": "2025-04-21T16:52:04.740665Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.018245935440063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.s_dim_city", "compiled": true, "compiled_code": "WITH b_city AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_bronze\".\"b_city\"\n),\n\ncity_detailed AS (\n    SELECT\n        city_nm\n        ,ksh_cd\n        ,city_type_cd\n        ,county_nm\n        ,district_cd\n        ,district_nm\n        ,district_seat_nm\n        ,area_no\n        ,population_no\n        ,apartments_no\n        ,country_cd\n    FROM \"wh_weather\".\"dbt\".\"city\"  \n),\n\njoin_detailed AS (\n    SELECT\n        city_detailed.*\n    FROM b_city\n    JOIN city_detailed\n    ON b_city.city_nm = city_detailed.city_nm\n    AND b_city.country_cd = city_detailed.country_cd\n    AND b_city.county_nm = city_detailed.county_nm\n),\n\ngen_sk AS (\n    SELECT\n        *\n        ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS city_pk   --county_cd needs to be added to weather tables then here\n    FROM join_detailed\n),\n\nreorder AS (\n    SELECT\n        city_pk\n        ,country_cd\n        ,county_nm\n        ,city_nm\n        ,ksh_cd\n        ,city_type_cd\n        ,district_cd\n        ,district_nm\n        ,district_seat_nm\n        ,area_no\n        ,population_no\n        ,apartments_no\n    FROM gen_sk\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.722419Z", "completed_at": "2025-04-21T16:52:04.740665Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.740665Z", "completed_at": "2025-04-21T16:52:04.740665Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.018245935440063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.s_dim_country", "compiled": true, "compiled_code": "WITH b_country AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_bronze\".\"b_country\"\n),\n\nreorder AS (\n    SELECT \n        country_cd\n        ,country_nm\n        ,continent_nm\n        ,eu_member_flg\n        ,currency_cd\n        ,iso_alpha_3_cd\n    FROM b_country\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_dim_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.738051Z", "completed_at": "2025-04-21T16:52:04.740665Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.740665Z", "completed_at": "2025-04-21T16:52:04.740665Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.018245935440063477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.s_dim_date", "compiled": true, "compiled_code": "WITH b_date AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_bronze\".\"b_date\"\n),\n\nreorder AS (\n    SELECT \n        date\n        ,date_dttm\n        ,year_num\n        ,year_txt\n        ,quarter_num\n        ,quarter_txt\n        ,month_num\n        ,month_txt\n        ,day_num\n        ,day_txt\n        ,year_quarter_txt\n        ,year_month_txt\n    FROM b_date\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.740665Z", "completed_at": "2025-04-21T16:52:04.764688Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.766654Z", "completed_at": "2025-04-21T16:52:04.766654Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.027708053588867188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_dim_city", "compiled": true, "compiled_code": "WITH s_dim_city AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n)\n\nSELECT * FROM s_dim_city", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_city\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.740665Z", "completed_at": "2025-04-21T16:52:04.764688Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.770372Z", "completed_at": "2025-04-21T16:52:04.770372Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.029706716537475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_dim_city_nm", "compiled": true, "compiled_code": "WITH s_dim_city AS (\n    SELECT\n        city_nm\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n)\n\nSELECT * FROM s_dim_city", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_city_nm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.756247Z", "completed_at": "2025-04-21T16:52:04.769379Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.772092Z", "completed_at": "2025-04-21T16:52:04.772092Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03142738342285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_dim_city_accepted_values_country_cd.8db2de7442", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n    where country_cd not in \n        (\n\n        \n            'HU'\n        \n   )\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_accepted_values_country_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.761590Z", "completed_at": "2025-04-21T16:52:04.769379Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.772092Z", "completed_at": "2025-04-21T16:52:04.772092Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.03142738342285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_dim_city_not_null_city_pk.eb2d764e4c", "compiled": true, "compiled_code": "\n\nwith validation as (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n    WHERE city_pk IS NULL\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_not_null_city_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.777819Z", "completed_at": "2025-04-21T16:52:04.791131Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.791131Z", "completed_at": "2025-04-21T16:52:04.791131Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.01703333854675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_dim_city_unique_city_pk.5d1fec09e8", "compiled": true, "compiled_code": "\n    with validation as (\n        -- Find all values of the column that appear more than once\n        select city_pk\n        from \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n        group by city_pk\n        having count(*) > 1\n    )\n\n    -- Return the full records for rows that have duplicate values\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n    where city_pk in (select city_pk from validation)\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_dim_city_unique_city_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.781819Z", "completed_at": "2025-04-21T16:52:04.791131Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.791131Z", "completed_at": "2025-04-21T16:52:04.791131Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.01531839370727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_dim_country", "compiled": true, "compiled_code": "WITH s_dim_country AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_country\"\n),\n\nreorder AS (\n    SELECT \n        country_cd\n        ,country_nm\n        ,continent_nm\n        ,eu_member_flg\n        ,currency_cd\n        ,iso_alpha_3_cd\n    FROM s_dim_country\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_country\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.784824Z", "completed_at": "2025-04-21T16:52:04.791131Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.791131Z", "completed_at": "2025-04-21T16:52:04.791131Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.014312744140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.s_fct_astro", "compiled": true, "compiled_code": "WITH b_astro AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_bronze\".\"b_astro\"\n),\n\ns_dim_country AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_country\"\n),\n\ns_dim_city AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n),\n\njoin_country_cd AS (\n    SELECT\n        b_astro.*\n        ,s_dim_country.country_cd AS country_cd\n    FROM b_astro\n    JOIN s_dim_country\n    ON b_astro.country_nm = s_dim_country.country_nm\n),\n\n\ngen_sk AS (\n    SELECT\n        *\n        ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(m_valid_dt as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(forecast_dt as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS astro_pk\n        ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS city_fk\n    FROM join_country_cd\n),\n\njoin_county_nm AS (\n    SELECT\n        gen_sk.*\n        ,s_dim_city.county_nm\n    FROM gen_sk\n    JOIN s_dim_city\n    ON gen_sk.city_fk = s_dim_city.city_pk\n),\n\nmissing_astro_times AS (\n    SELECT\n        m_valid_dt\n        ,astro_pk\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,country_cd\n        ,country_nm\n        ,county_nm\n        ,moon_illumination_pct\n        ,moon_phase_cd\n        ,CASE \n            WHEN moonrise_t = 'No moonrise' THEN NULL \n            ELSE moonrise_t\n        END AS moonrise_t\n        ,CASE \n            WHEN moonset_t = 'No moonset' THEN NULL \n            ELSE moonset_t\n        END AS moonset_t\n        ,CASE \n            WHEN sunrise_t = 'No sunrise' THEN NULL \n            ELSE sunrise_t\n        END AS sunrise_t\n        ,CASE \n            WHEN sunset_t = 'No sunset' THEN NULL \n            ELSE sunset_t\n        END AS sunset_t\n        ,m_extracted_at_dttm\n        ,m_updated_at_dttm\n    FROM join_county_nm\n),\n\nreorder AS (\n    SELECT\n        m_valid_dt\n        ,astro_pk\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,country_cd\n        ,country_nm\n        ,county_nm\n        ,moon_illumination_pct\n        ,moon_phase_cd\n        ,CONVERT(TIME(0), moonrise_t) AS moonrise_t\n        ,CONVERT(TIME(0), moonset_t) AS moonset_t\n        ,CONVERT(TIME(0), sunrise_t) AS sunrise_t\n        ,CONVERT(TIME(0), sunset_t) AS sunset_t\n        ,m_extracted_at_dttm\n        ,m_updated_at_dttm\n    FROM missing_astro_times\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_fct_astro\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.787819Z", "completed_at": "2025-04-21T16:52:04.791131Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.791131Z", "completed_at": "2025-04-21T16:52:04.791131Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.014312744140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.s_fct_astro_forecast", "compiled": true, "compiled_code": "WITH b_astro_forecast AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_bronze\".\"b_astro_forecast\"\n),\n\ns_dim_country AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_country\"\n),\n\ns_dim_city AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n),\n\njoin_country_cd AS (\n    SELECT\n        b_astro_forecast.*\n        ,s_dim_country.country_cd AS country_cd\n    FROM b_astro_forecast\n    JOIN s_dim_country\n    ON b_astro_forecast.country_nm = s_dim_country.country_nm\n),\n\ngen_sk AS (\n  SELECT\n    *\n    ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(m_valid_dt as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(forecast_dt as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS astro_forecast_pk\n    ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS city_fk\n    FROM join_country_cd  \n),\n\njoin_county_nm AS (\n    SELECT\n        gen_sk.*\n        ,s_dim_city.county_nm AS county_nm\n    FROM gen_sk\n    JOIN s_dim_city\n    ON gen_sk.city_fk = s_dim_city.city_pk\n),\n\nmissing_astro_times AS (\n    SELECT\n        m_valid_dt\n        ,astro_forecast_pk\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,country_cd\n        ,country_nm\n        ,county_nm\n        ,moon_up_flg\n        ,sun_up_flg\n        ,moon_illumination_pct\n        ,moon_phase_cd\n        ,CASE \n            WHEN moonrise_t = 'No moonrise' THEN NULL \n            ELSE moonrise_t\n        END AS moonrise_t\n        ,CASE \n            WHEN moonset_t = 'No moonset' THEN NULL \n            ELSE moonset_t\n        END AS moonset_t\n        ,CASE \n            WHEN sunrise_t = 'No sunrise' THEN NULL \n            ELSE sunrise_t\n        END AS sunrise_t\n        ,CASE \n            WHEN sunset_t = 'No sunset' THEN NULL \n            ELSE sunset_t\n        END AS sunset_t\n        ,m_extracted_at_dttm\n        ,m_updated_at_dttm\n    FROM join_county_nm\n),\n\nreorder AS (\n    SELECT\n        m_valid_dt\n        ,astro_forecast_pk\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,country_cd\n        ,country_nm\n        ,county_nm\n        ,moon_up_flg\n        ,sun_up_flg\n        ,moon_illumination_pct\n        ,moon_phase_cd\n        ,CONVERT(TIME(0), moonrise_t) AS moonrise_t\n        ,CONVERT(TIME(0), moonset_t) AS moonset_t\n        ,CONVERT(TIME(0), sunrise_t) AS sunrise_t\n        ,CONVERT(TIME(0), sunset_t) AS sunset_t\n        ,m_extracted_at_dttm\n        ,m_updated_at_dttm\n    FROM missing_astro_times\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.791131Z", "completed_at": "2025-04-21T16:52:04.806638Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.813424Z", "completed_at": "2025-04-21T16:52:04.813424Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.022292375564575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.s_fct_weather", "compiled": true, "compiled_code": "WITH b_weather AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_bronze\".\"b_weather\"\n),\n\ns_dim_country AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_country\"\n),\n\ns_dim_city AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n),\n\njoin_country_cd AS (\n    SELECT\n        b_weather.*\n        ,s_dim_country.country_cd AS country_cd\n    FROM b_weather\n    JOIN s_dim_country\n    ON b_weather.country_nm = s_dim_country.country_nm\n),\n\ngen_sk AS (\n    SELECT\n        *\n        ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(m_valid_dt as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(forecast_dt as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(time_epoch as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS weather_pk\n        ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS city_fk\n    FROM join_country_cd\n),\n\njoin_county_nm AS (\n    SELECT\n        gen_sk.*\n        ,s_dim_city.county_nm\n    FROM gen_sk\n    JOIN s_dim_city\n    ON gen_sk.city_fk = s_dim_city.city_pk\n),\n\nunit_conversion AS (\n    SELECT\n        *\n        ,gust_kph_no * 0.621371 AS gust_miph_no\n        ,temp_c_no * 33.8 AS temp_f_no\n        ,temp_c_no * 273.15 AS temp_k_no\n        ,heatindex_c_no * 33.8 AS heatindex_f_no\n        ,heatindex_c_no * 273.15 AS heatindex_k_no\n        ,vis_km_no * 0.621371 AS vis_mi_no\n        ,wind_kph_no * 0.621371 AS wind_miph_no\n        ,windchill_c_no * 33.8 AS windchill_f_no\n        ,windchill_c_no * 273.15 AS windchill_k_no\n    FROM join_county_nm\n),\n\nweather_categories AS (\n    SELECT\n        *\n        -- Rain Chance Category\n        ,CASE\n            WHEN rain_chance_pct BETWEEN 0 AND 20 THEN 'Very Low'\n            WHEN rain_chance_pct BETWEEN 21 AND 40 THEN 'Low'\n            WHEN rain_chance_pct BETWEEN 41 AND 60 THEN 'Moderate'\n            WHEN rain_chance_pct BETWEEN 61 AND 80 THEN 'High'\n            WHEN rain_chance_pct BETWEEN 81 AND 100 THEN 'Very High'\n            ELSE 'Unknown'\n        END AS rain_chance_cd\n\n        -- Snow Chance Category\n        ,CASE\n            WHEN snow_chance_pct BETWEEN 0 AND 20 THEN 'Very Low'\n            WHEN snow_chance_pct BETWEEN 21 AND 40 THEN 'Low'\n            WHEN snow_chance_pct BETWEEN 41 AND 60 THEN 'Moderate'\n            WHEN snow_chance_pct BETWEEN 61 AND 80 THEN 'High'\n            WHEN snow_chance_pct BETWEEN 81 AND 100 THEN 'Very High'\n            ELSE 'Unknown'\n        END AS snow_chance_cd\n\n        -- Cloud Coverage Category\n        ,CASE\n            WHEN cloud_coverage_pct BETWEEN 0 AND 20 THEN 'Clear'\n            WHEN cloud_coverage_pct BETWEEN 21 AND 40 THEN 'Partly Cloudy'\n            WHEN cloud_coverage_pct BETWEEN 41 AND 60 THEN 'Cloudy'\n            WHEN cloud_coverage_pct BETWEEN 61 AND 80 THEN 'Overcast'\n            WHEN cloud_coverage_pct BETWEEN 81 AND 100 THEN 'Completely Overcast'\n            ELSE 'Unknown'\n        END AS cloud_coverage_cd\n\n        -- Feels Like Temperature Category\n        ,CASE\n            WHEN temp_feelslike_no <= 0 THEN 'Very Cold'\n            WHEN temp_feelslike_no BETWEEN 1 AND 10 THEN 'Cold'\n            WHEN temp_feelslike_no BETWEEN 11 AND 20 THEN 'Cool'\n            WHEN temp_feelslike_no BETWEEN 21 AND 30 THEN 'Warm'\n            WHEN temp_feelslike_no BETWEEN 31 AND 40 THEN 'Hot'\n            WHEN temp_feelslike_no > 40 THEN 'Very Hot'\n            ELSE 'Unknown'\n        END AS temp_feelslike_cd\n\n        -- Humidity Category\n        ,CASE\n            WHEN humidity_pct BETWEEN 0 AND 20 THEN 'Very Low'\n            WHEN humidity_pct BETWEEN 21 AND 40 THEN 'Low'\n            WHEN humidity_pct BETWEEN 41 AND 60 THEN 'Moderate'\n            WHEN humidity_pct BETWEEN 61 AND 80 THEN 'High'\n            WHEN humidity_pct BETWEEN 81 AND 100 THEN 'Very High'\n            ELSE 'Unknown'\n        END AS humidity_cd\n\n    FROM unit_conversion\n),\n\nreorder AS (\n    SELECT\n        m_valid_dt\n        ,weather_pk\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,country_cd\n        ,country_nm\n        ,county_nm\n        ,cloud_coverage_pct\n        ,cloud_coverage_cd\n        ,gust_kph_no\n        ,gust_miph_no\n        ,heatindex_c_no\n        ,heatindex_f_no\n        ,heatindex_k_no\n        ,humidity_pct\n        ,humidity_cd\n        ,is_day_flg\n        ,precip_mm_no\n        ,pressure_mb_no\n        ,temp_c_no\n        ,temp_f_no\n        ,temp_k_no\n        ,temp_feelslike_no\n        ,temp_feelslike_cd\n        ,date_dtt\n        ,time_epoch\n        ,rain_chance_pct\n        ,rain_chance_cd\n        ,snow_chance_pct\n        ,snow_chance_cd\n        ,uv_no\n        ,vis_km_no\n        ,vis_mi_no\n        ,wind_dir_cd\n        ,wind_kph_no\n        ,wind_miph_no\n        ,windchill_c_no\n        ,windchill_f_no\n        ,windchill_k_no\n        ,m_extracted_at_dttm\n        ,m_updated_at_dttm\n    FROM weather_categories\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_fct_weather\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.808422Z", "completed_at": "2025-04-21T16:52:04.817443Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.825677Z", "completed_at": "2025-04-21T16:52:04.825677Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.0345458984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.s_fct_weather_forecast", "compiled": true, "compiled_code": "WITH b_weather_forecast AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_bronze\".\"b_weather_forecast\"\n),\n\ns_dim_country AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_country\"\n),\n\ns_dim_city AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n),\n\njoin_country_cd AS (\n    SELECT\n        b_weather_forecast.*\n        ,s_dim_country.country_cd AS country_cd\n    FROM b_weather_forecast\n    JOIN s_dim_country\n    ON b_weather_forecast.country_nm = s_dim_country.country_nm\n),\n\ngen_sk AS (\n    SELECT\n        *\n        ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(m_valid_dt as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(forecast_dt as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(time_epoch as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS weather_pk\n        ,lower(convert(varchar(32), hashbytes('md5', coalesce(convert(varchar(8000), concat(coalesce(cast(country_cd as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'), '-', coalesce(cast(city_nm as VARCHAR(64)), '_dbt_utils_surrogate_key_null_'))), '')), 2))\n AS city_fk\n    FROM join_country_cd\n),\n\njoin_county_nm AS (\n    SELECT\n        gen_sk.*\n        ,s_dim_city.county_nm\n    FROM gen_sk\n    JOIN s_dim_city\n    ON gen_sk.city_fk = s_dim_city.city_pk\n),\n\nunit_conversion AS (\n    SELECT\n        *\n        ,gust_kph_no * 0.621371 AS gust_miph_no\n        ,temp_c_no * 33.8 AS temp_f_no\n        ,temp_c_no * 273.15 AS temp_k_no\n        ,heatindex_c_no * 33.8 AS heatindex_f_no\n        ,heatindex_c_no * 273.15 AS heatindex_k_no\n        ,vis_km_no * 0.621371 AS vis_mi_no\n        ,wind_kph_no * 0.621371 AS wind_miph_no\n        ,windchill_c_no * 33.8 AS windchill_f_no\n        ,windchill_c_no * 273.15 AS windchill_k_no\n    FROM join_county_nm\n),\n\nweather_categories AS (\n    SELECT\n        *\n        -- Rain Chance Category\n        ,CASE\n            WHEN rain_chance_pct BETWEEN 0 AND 20 THEN 'Very Low'\n            WHEN rain_chance_pct BETWEEN 21 AND 40 THEN 'Low'\n            WHEN rain_chance_pct BETWEEN 41 AND 60 THEN 'Moderate'\n            WHEN rain_chance_pct BETWEEN 61 AND 80 THEN 'High'\n            WHEN rain_chance_pct BETWEEN 81 AND 100 THEN 'Very High'\n            ELSE 'Unknown'\n        END AS rain_chance_cd\n\n        -- Snow Chance Category\n        ,CASE\n            WHEN snow_chance_pct BETWEEN 0 AND 20 THEN 'Very Low'\n            WHEN snow_chance_pct BETWEEN 21 AND 40 THEN 'Low'\n            WHEN snow_chance_pct BETWEEN 41 AND 60 THEN 'Moderate'\n            WHEN snow_chance_pct BETWEEN 61 AND 80 THEN 'High'\n            WHEN snow_chance_pct BETWEEN 81 AND 100 THEN 'Very High'\n            ELSE 'Unknown'\n        END AS snow_chance_cd\n\n        -- Cloud Coverage Category\n        ,CASE\n            WHEN cloud_coverage_pct BETWEEN 0 AND 20 THEN 'Clear'\n            WHEN cloud_coverage_pct BETWEEN 21 AND 40 THEN 'Partly Cloudy'\n            WHEN cloud_coverage_pct BETWEEN 41 AND 60 THEN 'Cloudy'\n            WHEN cloud_coverage_pct BETWEEN 61 AND 80 THEN 'Overcast'\n            WHEN cloud_coverage_pct BETWEEN 81 AND 100 THEN 'Completely Overcast'\n            ELSE 'Unknown'\n        END AS cloud_coverage_cd\n\n        -- Feels Like Temperature Category\n        ,CASE\n            WHEN temp_feelslike_no <= 0 THEN 'Very Cold'\n            WHEN temp_feelslike_no BETWEEN 1 AND 10 THEN 'Cold'\n            WHEN temp_feelslike_no BETWEEN 11 AND 20 THEN 'Cool'\n            WHEN temp_feelslike_no BETWEEN 21 AND 30 THEN 'Warm'\n            WHEN temp_feelslike_no BETWEEN 31 AND 40 THEN 'Hot'\n            WHEN temp_feelslike_no > 40 THEN 'Very Hot'\n            ELSE 'Unknown'\n        END AS temp_feelslike_cd\n\n        -- Humidity Category\n        ,CASE\n            WHEN humidity_pct BETWEEN 0 AND 20 THEN 'Very Low'\n            WHEN humidity_pct BETWEEN 21 AND 40 THEN 'Low'\n            WHEN humidity_pct BETWEEN 41 AND 60 THEN 'Moderate'\n            WHEN humidity_pct BETWEEN 61 AND 80 THEN 'High'\n            WHEN humidity_pct BETWEEN 81 AND 100 THEN 'Very High'\n            ELSE 'Unknown'\n        END AS humidity_cd\n\n    FROM unit_conversion\n),\n\nreorder AS (\n    SELECT\n        m_valid_dt\n        ,weather_pk\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,country_cd\n        ,country_nm\n        ,county_nm\n        ,cloud_coverage_pct\n        ,cloud_coverage_cd\n        ,gust_kph_no\n        ,gust_miph_no\n        ,heatindex_c_no\n        ,heatindex_f_no\n        ,heatindex_k_no\n        ,humidity_pct\n        ,humidity_cd\n        ,is_day_flg\n        ,precip_mm_no\n        ,pressure_mb_no\n        ,temp_c_no\n        ,temp_f_no\n        ,temp_k_no\n        ,temp_feelslike_no\n        ,temp_feelslike_cd\n        ,date_dtt\n        ,time_epoch\n        ,rain_chance_pct\n        ,rain_chance_cd\n        ,snow_chance_pct\n        ,snow_chance_cd\n        ,uv_no\n        ,vis_km_no\n        ,vis_mi_no\n        ,wind_dir_cd\n        ,wind_kph_no\n        ,wind_miph_no\n        ,windchill_c_no\n        ,windchill_f_no\n        ,windchill_k_no\n        ,m_extracted_at_dttm\n        ,m_updated_at_dttm\n    FROM weather_categories\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.814423Z", "completed_at": "2025-04-21T16:52:04.826670Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.828669Z", "completed_at": "2025-04-21T16:52:04.828669Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.037537574768066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_dim_date", "compiled": true, "compiled_code": "WITH s_dim_date AS (\n    SELECT \n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_date\"\n),\n\nreorder AS (\n    SELECT \n        date\n        ,date_dttm\n        ,year_num\n        ,year_txt\n        ,quarter_num\n        ,quarter_txt\n        ,month_num\n        ,month_txt\n        ,day_num\n        ,day_txt\n        ,year_quarter_txt\n        ,year_month_txt\n    FROM s_dim_date\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_date\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.817443Z", "completed_at": "2025-04-21T16:52:04.829669Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.834507Z", "completed_at": "2025-04-21T16:52:04.834507Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.027092933654785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_fct_astro", "compiled": true, "compiled_code": "WITH s_fct_astro AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n)\n\nSELECT * FROM s_fct_astro", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_astro\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.829669Z", "completed_at": "2025-04-21T16:52:04.835161Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.839349Z", "completed_at": "2025-04-21T16:52:04.839349Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.014708280563354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_fct_astro_avg", "compiled": true, "compiled_code": "WITH s_fct_astro AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n),\n\ndaily_aggregates AS (\n    SELECT\n        m_valid_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        -- Convert TIME to seconds for averaging\n        ,AVG(DATEDIFF(SECOND, '00:00:00', moonrise_t)) AS moonrise_t_avg\n        ,AVG(DATEDIFF(SECOND, '00:00:00', moonset_t)) AS moonset_t_avg\n        ,AVG(DATEDIFF(SECOND, '00:00:00', sunrise_t)) AS sunrise_t_avg\n        ,AVG(DATEDIFF(SECOND, '00:00:00', sunset_t)) AS sunset_t_avg\n    FROM s_fct_astro\n    GROUP BY m_valid_dt, city_nm, city_fk, county_nm, country_cd\n),\n\nrolling_averages AS (\n    SELECT\n        city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,m_valid_dt\n\n        -- Rolling averages (3 days)\n        ,AVG(moonrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS moonrise_t_avg_3d\n\n        ,AVG(moonset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS moonset_t_avg_3d\n\n        ,AVG(sunset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS sunset_t_avg_3d\n\n        ,AVG(sunrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS sunrise_t_avg_3d\n\n        -- Rolling averages (1 week)\n        ,AVG(moonrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS moonrise_t_avg_1w\n\n        ,AVG(moonset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS moonset_t_avg_1w\n\n        ,AVG(sunset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS sunset_t_avg_1w\n\n        ,AVG(sunrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS sunrise_t_avg_1w\n\n        -- Rolling averages (2 weeks = 14 days)\n        ,AVG(moonrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS moonrise_t_avg_2w\n\n        ,AVG(moonset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS moonset_t_avg_2w\n\n        ,AVG(sunset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS sunset_t_avg_2w\n\n        ,AVG(sunrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS sunrise_t_avg_2w\n\n    FROM daily_aggregates\n),\n\nastro_data_to_time AS (\n    SELECT\n        m_valid_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_3d, '00:00:00') AS TIME(0)) AS moonrise_t_avg_3d\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_1w, '00:00:00') AS TIME(0)) AS moonrise_t_avg_1w\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_2w, '00:00:00') AS TIME(0)) AS moonrise_t_avg_2w\n        ,CAST(DATEADD(SECOND, moonset_t_avg_3d, '00:00:00') AS TIME(0)) AS moonset_t_avg_3d\n        ,CAST(DATEADD(SECOND, moonset_t_avg_1w, '00:00:00') AS TIME(0)) AS moonset_t_avg_1w\n        ,CAST(DATEADD(SECOND, moonset_t_avg_2w, '00:00:00') AS TIME(0)) AS moonset_t_avg_2w\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_3d, '00:00:00') AS TIME(0)) AS sunrise_t_avg_3d\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_1w, '00:00:00') AS TIME(0)) AS sunrise_t_avg_1w\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_2w, '00:00:00') AS TIME(0)) AS sunrise_t_avg_2w\n        ,CAST(DATEADD(SECOND, sunset_t_avg_3d, '00:00:00') AS TIME(0)) AS sunset_t_avg_3d\n        ,CAST(DATEADD(SECOND, sunset_t_avg_1w, '00:00:00') AS TIME(0)) AS sunset_t_avg_1w\n        ,CAST(DATEADD(SECOND, sunset_t_avg_2w, '00:00:00') AS TIME(0)) AS sunset_t_avg_2w\n    FROM rolling_averages\n),\n\nreorder AS (\n    SELECT\n        m_valid_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,moonrise_t_avg_3d\n        ,moonrise_t_avg_1w\n        ,moonrise_t_avg_2w\n        ,moonset_t_avg_3d\n        ,moonset_t_avg_1w\n        ,moonset_t_avg_2w\n        ,sunrise_t_avg_3d\n        ,sunrise_t_avg_1w\n        ,sunrise_t_avg_2w\n        ,sunset_t_avg_3d\n        ,sunset_t_avg_1w\n        ,sunset_t_avg_2w\n    FROM astro_data_to_time\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_astro_avg\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.837330Z", "completed_at": "2025-04-21T16:52:04.843289Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.843289Z", "completed_at": "2025-04-21T16:52:04.843289Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.009789466857910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_fct_astro_forecast", "compiled": true, "compiled_code": "WITH s_fct_astro_forecast AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n)\n\nSELECT * FROM s_fct_astro_forecast", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_astro_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.843289Z", "completed_at": "2025-04-21T16:52:04.843289Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.843289Z", "completed_at": "2025-04-21T16:52:04.843289Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.007105350494384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_fct_astro_forecast_avg", "compiled": true, "compiled_code": "WITH s_fct_astro_forecast AS (\n    SELECT\n        m_valid_dt\n        ,astro_forecast_pk\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,country_nm\n        ,moon_illumination_pct\n        ,moon_phase_cd\n        ,moonrise_t\n        ,moonset_t\n        ,sunrise_t\n        ,sunset_t\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n),\n\ndaily_aggregates AS (\n    SELECT\n        m_valid_dt\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        -- Convert TIME to seconds for averaging\n        ,AVG(DATEDIFF(SECOND, '00:00:00', moonrise_t)) AS moonrise_t_avg\n        ,AVG(DATEDIFF(SECOND, '00:00:00', moonset_t)) AS moonset_t_avg\n        ,AVG(DATEDIFF(SECOND, '00:00:00', sunrise_t)) AS sunrise_t_avg\n        ,AVG(DATEDIFF(SECOND, '00:00:00', sunset_t)) AS sunset_t_avg\n    FROM s_fct_astro_forecast\n    GROUP BY m_valid_dt, city_nm, city_fk, county_nm, country_cd, forecast_dt\n),\n\n-- Step 2: Calculate rolling averages\nrolling_averages AS (\n    SELECT\n        city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,m_valid_dt\n        -- Rolling averages (3 days)\n        ,AVG(moonrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS moonrise_t_avg_3d,\n\n        AVG(moonset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS moonset_t_avg_3d,\n\n        AVG(sunset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS sunset_t_avg_3d,\n\n        AVG(sunrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS sunrise_t_avg_3d,\n\n        -- Rolling averages (1 week = 7 days)\n        AVG(moonrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS moonrise_t_avg_1w,\n\n        AVG(moonset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS moonset_t_avg_1w,\n\n        AVG(sunset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS sunset_t_avg_1w,\n\n        AVG(sunrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS sunrise_t_avg_1w,\n\n        -- Rolling averages (2 weeks = 14 days)\n        AVG(moonrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS moonrise_t_avg_2w,\n\n        AVG(moonset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS moonset_t_avg_2w,\n\n        AVG(sunset_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS sunset_t_avg_2w,\n\n        AVG(sunrise_t_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS sunrise_t_avg_2w\n    FROM daily_aggregates\n),\n\nastro_data_to_time AS (\n    SELECT\n        m_valid_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_3d, '00:00:00') AS TIME(0)) AS moonrise_t_avg_3d\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_1w, '00:00:00') AS TIME(0)) AS moonrise_t_avg_1w\n        ,CAST(DATEADD(SECOND, moonrise_t_avg_2w, '00:00:00') AS TIME(0)) AS moonrise_t_avg_2w\n        ,CAST(DATEADD(SECOND, moonset_t_avg_3d, '00:00:00') AS TIME(0)) AS moonset_t_avg_3d\n        ,CAST(DATEADD(SECOND, moonset_t_avg_1w, '00:00:00') AS TIME(0)) AS moonset_t_avg_1w\n        ,CAST(DATEADD(SECOND, moonset_t_avg_2w, '00:00:00') AS TIME(0)) AS moonset_t_avg_2w\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_3d, '00:00:00') AS TIME(0)) AS sunrise_t_avg_3d\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_1w, '00:00:00') AS TIME(0)) AS sunrise_t_avg_1w\n        ,CAST(DATEADD(SECOND, sunrise_t_avg_2w, '00:00:00') AS TIME(0)) AS sunrise_t_avg_2w\n        ,CAST(DATEADD(SECOND, sunset_t_avg_3d, '00:00:00') AS TIME(0)) AS sunset_t_avg_3d\n        ,CAST(DATEADD(SECOND, sunset_t_avg_1w, '00:00:00') AS TIME(0)) AS sunset_t_avg_1w\n        ,CAST(DATEADD(SECOND, sunset_t_avg_2w, '00:00:00') AS TIME(0)) AS sunset_t_avg_2w\n    FROM rolling_averages\n),\n\nreorder AS (\n    SELECT\n        m_valid_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,moonrise_t_avg_3d\n        ,moonrise_t_avg_1w\n        ,moonrise_t_avg_2w\n        ,moonset_t_avg_3d\n        ,moonset_t_avg_1w\n        ,moonset_t_avg_2w\n        ,sunrise_t_avg_3d\n        ,sunrise_t_avg_1w\n        ,sunrise_t_avg_2w\n        ,sunset_t_avg_3d\n        ,sunset_t_avg_1w\n        ,sunset_t_avg_2w\n    FROM astro_data_to_time\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_astro_forecast_avg\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.843289Z", "completed_at": "2025-04-21T16:52:04.858312Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.858312Z", "completed_at": "2025-04-21T16:52:04.858312Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.017852067947387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_accepted_range_m_valid_dt.ce54645416", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not m_valid_dt >= CAST(DATEFROMPARTS(YEAR(GETDATE()), 1, 1) AS DATE)\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not m_valid_dt <= CAST(DATEFROMPARTS(YEAR(GETDATE()), 12, 31) AS DATE)\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_range_m_valid_dt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.843289Z", "completed_at": "2025-04-21T16:52:04.858312Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.858312Z", "completed_at": "2025-04-21T16:52:04.858312Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.015023231506347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_accepted_values_country_cd.acc57e5fe8", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n    where country_cd not in \n        (\n\n        \n            'HU'\n        \n   )\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_values_country_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.858312Z", "completed_at": "2025-04-21T16:52:04.873318Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.873318Z", "completed_at": "2025-04-21T16:52:04.873318Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.016012907028198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_forecast_accepted_range_m_valid_dt.6b23ed4e3a", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not m_valid_dt >= CAST(DATEFROMPARTS(YEAR(GETDATE()), 1, 1) AS DATE)\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not m_valid_dt <= CAST(DATEFROMPARTS(YEAR(GETDATE()), 12, 31) AS DATE)\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_range_m_valid_dt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.858312Z", "completed_at": "2025-04-21T16:52:04.873318Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.884709Z", "completed_at": "2025-04-21T16:52:04.884709Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.026396512985229492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_forecast_accepted_values_country_cd.1e90bc9c48", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n    where country_cd not in \n        (\n\n        \n            'HU'\n        \n   )\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_values_country_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.873318Z", "completed_at": "2025-04-21T16:52:04.886768Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.888768Z", "completed_at": "2025-04-21T16:52:04.888768Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.03145647048950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_forecast_not_null_astro_forecast_pk.04e9609d7f", "compiled": true, "compiled_code": "\n\nwith validation as (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n    WHERE astro_forecast_pk IS NULL\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_not_null_astro_forecast_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.873318Z", "completed_at": "2025-04-21T16:52:04.887773Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.890769Z", "completed_at": "2025-04-21T16:52:04.890769Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.032456398010253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_forecast_rel_s_dim_city_city_fk.40ba732794", "compiled": true, "compiled_code": "\n    with validation as (\n\n        -- Find all records in the child model where the foreign key does not exist in the parent model\n        select child.*\n        from \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\" as child\n        left join \"wh_weather\".\"dbt_silver\".\"s_dim_city\" as parent\n        on child.city_fk = parent.city_pk\n        where parent.city_pk is null and child.city_fk is not null\n    )\n\n    -- Return all records from the child model that have unmatched foreign keys\n    select *\n    from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_rel_s_dim_city_city_fk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.893641Z", "completed_at": "2025-04-21T16:52:04.902513Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.907105Z", "completed_at": "2025-04-21T16:52:04.907105Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.018336772918701172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_forecast_unique_astro_forecast_pk.24e6af2a60", "compiled": true, "compiled_code": "\n    with validation as (\n        -- Find all values of the column that appear more than once\n        select astro_forecast_pk\n        from \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n        group by astro_forecast_pk\n        having count(*) > 1\n    )\n\n    -- Return the full records for rows that have duplicate values\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n    where astro_forecast_pk in (select astro_forecast_pk from validation)\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_unique_astro_forecast_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.897166Z", "completed_at": "2025-04-21T16:52:04.907941Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.907941Z", "completed_at": "2025-04-21T16:52:04.907941Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.018172264099121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_not_null_astro_pk.bc7a6a8275", "compiled": true, "compiled_code": "\n\nwith validation as (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n    WHERE astro_pk IS NULL\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_not_null_astro_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.903500Z", "completed_at": "2025-04-21T16:52:04.907941Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.907941Z", "completed_at": "2025-04-21T16:52:04.907941Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.010775089263916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_rel_s_dim_city_city_fk.bbbc0c2336", "compiled": true, "compiled_code": "\n    with validation as (\n\n        -- Find all records in the child model where the foreign key does not exist in the parent model\n        select child.*\n        from \"wh_weather\".\"dbt_silver\".\"s_fct_astro\" as child\n        left join \"wh_weather\".\"dbt_silver\".\"s_dim_city\" as parent\n        on child.city_fk = parent.city_pk\n        where parent.city_pk is null and child.city_fk is not null\n    )\n\n    -- Return all records from the child model that have unmatched foreign keys\n    select *\n    from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_rel_s_dim_city_city_fk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.907941Z", "completed_at": "2025-04-21T16:52:04.907941Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.907941Z", "completed_at": "2025-04-21T16:52:04.907941Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.007821321487426758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_astro_unique_astro_pk.ae4a162f31", "compiled": true, "compiled_code": "\n    with validation as (\n        -- Find all values of the column that appear more than once\n        select astro_pk\n        from \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n        group by astro_pk\n        having count(*) > 1\n    )\n\n    -- Return the full records for rows that have duplicate values\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n    where astro_pk in (select astro_pk from validation)\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_unique_astro_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.907941Z", "completed_at": "2025-04-21T16:52:04.922947Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.922947Z", "completed_at": "2025-04-21T16:52:04.922947Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.01500558853149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_dim_m_valid_dt", "compiled": true, "compiled_code": "WITH distinct_m_valid_dt AS (\n    SELECT DISTINCT\n        m_valid_dt\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n)\n\nSELECT * FROM distinct_m_valid_dt", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_m_valid_dt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.922947Z", "completed_at": "2025-04-21T16:52:04.922947Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.938680Z", "completed_at": "2025-04-21T16:52:04.938680Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03073883056640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_fct_weather", "compiled": true, "compiled_code": "WITH s_fct_weather AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n)\n\nSELECT * FROM s_fct_weather", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_weather\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.922947Z", "completed_at": "2025-04-21T16:52:04.938680Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.938680Z", "completed_at": "2025-04-21T16:52:04.938680Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.03073883056640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_fct_weather_avg", "compiled": true, "compiled_code": "WITH s_fct_weather AS (\n    SELECT\n        m_valid_dt\n        ,weather_pk\n        ,city_nm\n        ,city_fk\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        -- Group to the start of the month\n--       ,CAST(YEAR(forecast_dt) AS VARCHAR) + '-' + RIGHT('0' + CAST(MONTH(forecast_dt) AS VARCHAR), 2) + '-01' AS month_dt\n        ,temp_c_no\n        ,temp_feelslike_no\n        ,cloud_coverage_pct\n        ,precip_mm_no\n        ,humidity_pct\n        ,gust_kph_no\n        ,heatindex_c_no\n        ,wind_kph_no\n        ,windchill_c_no\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\n-- Step 1: Pre-aggregate by city, country, and m_valid_dt\ndaily_aggregates AS (\n    SELECT\n        m_valid_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,AVG(temp_c_no) AS temp_c_avg\n        ,AVG(cloud_coverage_pct) AS cloud_coverage_avg\n        ,AVG(precip_mm_no) AS precipitation_mm_avg\n        ,AVG(humidity_pct) AS humidity_avg\n        ,AVG(gust_kph_no) AS gust_kph_avg\n        ,AVG(heatindex_c_no) AS heatindex_c_no_avg\n        ,AVG(wind_kph_no) AS wind_kph_no_avg\n        ,AVG(windchill_c_no) AS windchill_c_no_avg\n    FROM s_fct_weather\n    GROUP BY m_valid_dt, city_nm, city_fk, county_nm, country_cd\n),\n\n-- Step 2: Calculate rolling averages\nrolling_averages AS (\n    SELECT\n        city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,m_valid_dt\n        -- Rolling averages (3 days)\n        ,AVG(temp_c_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS temperature_c_avg_3d\n\n        ,AVG(cloud_coverage_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS cloud_coverage_avg_3d\n\n        ,AVG(precipitation_mm_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS precipitation_mm_avg_3d\n\n        ,AVG(humidity_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS humidity_avg_3d\n\n        ,AVG(gust_kph_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS gust_kph_avg_3d\n\n        ,AVG(heatindex_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS heatindex_c_no_avg_3d\n\n        ,AVG(wind_kph_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS wind_kph_no_avg_3d\n\n        ,AVG(windchill_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS windchill_c_no_avg_3d\n\n-- Rolling averages (1 week = 7 days)\n        ,AVG(temp_c_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS temperature_c_avg_1w\n\n        ,AVG(cloud_coverage_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS cloud_coverage_avg_1w\n\n        ,AVG(precipitation_mm_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS precipitation_mm_avg_1w\n\n        ,AVG(humidity_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS humidity_avg_1w\n\n        ,AVG(gust_kph_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS gust_kph_avg_1w\n\n        ,AVG(heatindex_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS heatindex_c_no_avg_1w\n\n        ,AVG(wind_kph_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS wind_kph_no_avg_1w\n\n        ,AVG(windchill_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS windchill_c_no_avg_1w\n\n-- Rolling averages (2 weeks = 14 days)\n        ,AVG(temp_c_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS temperature_c_avg_2w\n\n        ,AVG(cloud_coverage_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS cloud_coverage_avg_2w\n\n        ,AVG(precipitation_mm_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS precipitation_mm_avg_2w\n\n        ,AVG(humidity_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS humidity_avg_2w\n\n        ,AVG(gust_kph_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS gust_kph_avg_2w\n\n        ,AVG(heatindex_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS heatindex_c_no_avg_2w\n\n        ,AVG(wind_kph_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS wind_kph_no_avg_2w\n\n        ,AVG(windchill_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS windchill_c_no_avg_2w\n    FROM daily_aggregates\n),\n\nunit_conversion AS (\n    SELECT\n        m_valid_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,\n    \n    \n\n    temperature_c_avg_3d\n    , temperature_c_avg_3d * 9/5 + 32 AS temperature_f_avg_3d\n    , temperature_c_avg_3d + 273.15 AS temperature_k_avg_3d\n\n        ,\n    \n    \n\n    temperature_c_avg_1w\n    , temperature_c_avg_1w * 9/5 + 32 AS temperature_f_avg_1w\n    , temperature_c_avg_1w + 273.15 AS temperature_k_avg_1w\n\n        ,\n    \n    \n\n    temperature_c_avg_2w\n    , temperature_c_avg_2w * 9/5 + 32 AS temperature_f_avg_2w\n    , temperature_c_avg_2w + 273.15 AS temperature_k_avg_2w\n\n        ,cloud_coverage_avg_3d\n        ,cloud_coverage_avg_1w\n        ,cloud_coverage_avg_2w\n        ,precipitation_mm_avg_3d\n        ,precipitation_mm_avg_1w\n        ,precipitation_mm_avg_2w\n        ,humidity_avg_3d\n        ,humidity_avg_1w\n        ,humidity_avg_2w\n        ,\n    \n    \n\n    gust_kph_avg_3d\n    , gust_kph_avg_3d * 0.621371 AS gust_miph_avg_3d\n\n        ,\n    \n    \n\n    gust_kph_avg_1w\n    , gust_kph_avg_1w * 0.621371 AS gust_miph_avg_1w\n\n        ,\n    \n    \n\n    gust_kph_avg_2w\n    , gust_kph_avg_2w * 0.621371 AS gust_miph_avg_2w\n\n        ,\n    \n    \n\n    heatindex_c_no_avg_3d\n    , heatindex_c_no_avg_3d * 9/5 + 32 AS heatindex_f_no_avg_3d\n    , heatindex_c_no_avg_3d + 273.15 AS heatindex_k_no_avg_3d\n\n        ,\n    \n    \n\n    heatindex_c_no_avg_1w\n    , heatindex_c_no_avg_1w * 9/5 + 32 AS heatindex_f_no_avg_1w\n    , heatindex_c_no_avg_1w + 273.15 AS heatindex_k_no_avg_1w\n\n        ,\n    \n    \n\n    heatindex_c_no_avg_2w\n    , heatindex_c_no_avg_2w * 9/5 + 32 AS heatindex_f_no_avg_2w\n    , heatindex_c_no_avg_2w + 273.15 AS heatindex_k_no_avg_2w\n\n        ,\n    \n    \n\n    wind_kph_no_avg_3d\n    , wind_kph_no_avg_3d * 0.621371 AS wind_miph_no_avg_3d\n\n        ,\n    \n    \n\n    wind_kph_no_avg_1w\n    , wind_kph_no_avg_1w * 0.621371 AS wind_miph_no_avg_1w\n\n        ,\n    \n    \n\n    wind_kph_no_avg_2w\n    , wind_kph_no_avg_2w * 0.621371 AS wind_miph_no_avg_2w\n\n        ,\n    \n    \n\n    windchill_c_no_avg_3d\n    , windchill_c_no_avg_3d * 9/5 + 32 AS windchill_f_no_avg_3d\n    , windchill_c_no_avg_3d + 273.15 AS windchill_k_no_avg_3d\n\n        ,\n    \n    \n\n    windchill_c_no_avg_1w\n    , windchill_c_no_avg_1w * 9/5 + 32 AS windchill_f_no_avg_1w\n    , windchill_c_no_avg_1w + 273.15 AS windchill_k_no_avg_1w\n\n        ,\n    \n    \n\n    windchill_c_no_avg_2w\n    , windchill_c_no_avg_2w * 9/5 + 32 AS windchill_f_no_avg_2w\n    , windchill_c_no_avg_2w + 273.15 AS windchill_k_no_avg_2w\n\n    FROM rolling_averages\n)\n\nSELECT * FROM unit_conversion", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_weather_avg\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.922947Z", "completed_at": "2025-04-21T16:52:04.938680Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.938680Z", "completed_at": "2025-04-21T16:52:04.938680Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.01573324203491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_accepted_range_m_valid_dt.737ef6dc96", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not m_valid_dt >= CAST(DATEFROMPARTS(YEAR(GETDATE()), 1, 1) AS DATE)\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not m_valid_dt <= CAST(DATEFROMPARTS(YEAR(GETDATE()), 12, 31) AS DATE)\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_m_valid_dt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.938680Z", "completed_at": "2025-04-21T16:52:04.954234Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.956046Z", "completed_at": "2025-04-21T16:52:04.956046Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.01988363265991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_accepted_range_temp_c_no.4ab123a254", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not temp_c_no >= -20\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not temp_c_no <= 50\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_temp_c_no\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.938680Z", "completed_at": "2025-04-21T16:52:04.958564Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.958564Z", "completed_at": "2025-04-21T16:52:04.958564Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.01988363265991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_accepted_values_country_cd.7da73a434d", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n    where country_cd not in \n        (\n\n        \n            'HU'\n        \n   )\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_values_country_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.958564Z", "completed_at": "2025-04-21T16:52:04.958564Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.958564Z", "completed_at": "2025-04-21T16:52:04.958564Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.01988363265991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_invalid_cloud_coverage_cd", "compiled": true, "compiled_code": "WITH invalid_cloud_coverage_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n    WHERE \n        ( cloud_coverage_pct BETWEEN 0 AND 20 AND cloud_coverage_cd NOT IN ('Clear'))\n        OR \n        ( cloud_coverage_pct BETWEEN 21 AND 40 AND cloud_coverage_cd NOT IN ('Partly Cloudy'))\n        OR \n        ( cloud_coverage_pct BETWEEN 41 AND 60 AND cloud_coverage_cd NOT IN ('Cloudy'))\n        OR \n        ( cloud_coverage_pct BETWEEN 61 AND 80 AND cloud_coverage_cd NOT IN ('Overcast'))\n        OR \n        ( cloud_coverage_pct BETWEEN 81 AND 100 AND cloud_coverage_cd NOT IN ('Completely Overcast'))\n)\n\nSELECT *\nFROM invalid_cloud_coverage_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_cloud_coverage_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.958564Z", "completed_at": "2025-04-21T16:52:04.958564Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.970069Z", "completed_at": "2025-04-21T16:52:04.970069Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.014023303985595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_invalid_humidity_cd", "compiled": true, "compiled_code": "WITH invalid_humidity_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n    WHERE \n        ( humidity_pct BETWEEN 0 AND 20 AND humidity_cd NOT IN ('Very Low'))\n        OR \n        ( humidity_pct BETWEEN 21 AND 40 AND humidity_cd NOT IN ('Low'))\n        OR \n        ( humidity_pct BETWEEN 41 AND 60 AND humidity_cd NOT IN ('Moderate'))\n        OR \n        ( humidity_pct BETWEEN 61 AND 80 AND humidity_cd NOT IN ('High'))\n        OR \n        ( humidity_pct BETWEEN 81 AND 100 AND humidity_cd NOT IN ('Very High'))\n)\n\nSELECT *\nFROM invalid_humidity_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_humidity_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.970069Z", "completed_at": "2025-04-21T16:52:04.970069Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.970069Z", "completed_at": "2025-04-21T16:52:04.970069Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.011505603790283203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_invalid_rain_chance_cd", "compiled": true, "compiled_code": "WITH invalid_rain_chance_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n    WHERE \n        ( rain_chance_pct BETWEEN 0 AND 20 AND rain_chance_cd NOT IN ('Very Low'))\n        OR \n        ( rain_chance_pct BETWEEN 21 AND 40 AND rain_chance_cd NOT IN ('Low'))\n        OR \n        ( rain_chance_pct BETWEEN 41 AND 60 AND rain_chance_cd NOT IN ('Moderate'))\n        OR \n        ( rain_chance_pct BETWEEN 61 AND 80 AND rain_chance_cd NOT IN ('High'))\n        OR \n        ( rain_chance_pct BETWEEN 81 AND 100 AND rain_chance_cd NOT IN ('Very High'))\n)\n\nSELECT *\nFROM invalid_rain_chance_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_rain_chance_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.970069Z", "completed_at": "2025-04-21T16:52:04.970069Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.985701Z", "completed_at": "2025-04-21T16:52:04.985701Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.015631914138793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_invalid_snow_chance_cd", "compiled": true, "compiled_code": "WITH invalid_snow_chance_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n    WHERE \n        ( snow_chance_pct BETWEEN 0 AND 20 AND snow_chance_cd NOT IN ('Very Low'))\n        OR \n        ( snow_chance_pct BETWEEN 21 AND 40 AND snow_chance_cd NOT IN ('Low'))\n        OR \n        ( snow_chance_pct BETWEEN 41 AND 60 AND snow_chance_cd NOT IN ('Moderate'))\n        OR \n        ( snow_chance_pct BETWEEN 61 AND 80 AND snow_chance_cd NOT IN ('High'))\n        OR \n        ( snow_chance_pct BETWEEN 81 AND 100 AND snow_chance_cd NOT IN ('Very High'))\n)\n\nSELECT *\nFROM invalid_snow_chance_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_snow_chance_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.985701Z", "completed_at": "2025-04-21T16:52:04.985701Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.985701Z", "completed_at": "2025-04-21T16:52:04.985701Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.015631914138793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_invalid_temp_feelslike_cd", "compiled": true, "compiled_code": "WITH invalid_temp_feelslike_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n    WHERE \n        ( temp_feelslike_no <= 0 AND temp_feelslike_cd NOT IN ('Very Cold'))\n        OR \n        ( temp_feelslike_no BETWEEN 1 AND 10 AND temp_feelslike_cd NOT IN ('Cold'))\n        OR \n        ( temp_feelslike_no BETWEEN 11 AND 20 AND temp_feelslike_cd NOT IN ('Cool'))\n        OR \n        ( temp_feelslike_no BETWEEN 21 AND 30 AND temp_feelslike_cd NOT IN ('Warm'))\n        OR \n        ( temp_feelslike_no BETWEEN 31 AND 40 AND temp_feelslike_cd NOT IN ('Hot'))\n        OR \n        ( temp_feelslike_no > 41 AND temp_feelslike_cd NOT IN ('Very Hot'))\n)\n\nSELECT *\nFROM invalid_temp_feelslike_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_temp_feelslike_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.985701Z", "completed_at": "2025-04-21T16:52:04.985701Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:04.985701Z", "completed_at": "2025-04-21T16:52:04.985701Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.015631914138793945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_not_null_weather_pk.e318eddf85", "compiled": true, "compiled_code": "\n\nwith validation as (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n    WHERE weather_pk IS NULL\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_not_null_weather_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.001327Z", "completed_at": "2025-04-21T16:52:05.001327Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.001327Z", "completed_at": "2025-04-21T16:52:05.001327Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.015625476837158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_unique_weather_pk.6c57758345", "compiled": true, "compiled_code": "\n    with validation as (\n        -- Find all values of the column that appear more than once\n        select weather_pk\n        from \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n        group by weather_pk\n        having count(*) > 1\n    )\n\n    -- Return the full records for rows that have duplicate values\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n    where weather_pk in (select weather_pk from validation)\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_unique_weather_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:04.985701Z", "completed_at": "2025-04-21T16:52:05.001327Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.001327Z", "completed_at": "2025-04-21T16:52:05.001327Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.015625476837158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_rel_s_dim_city_city_fk.38d9746afc", "compiled": true, "compiled_code": "\n    with validation as (\n\n        -- Find all records in the child model where the foreign key does not exist in the parent model\n        select child.*\n        from \"wh_weather\".\"dbt_silver\".\"s_fct_weather\" as child\n        left join \"wh_weather\".\"dbt_silver\".\"s_dim_city\" as parent\n        on child.city_fk = parent.city_pk\n        where parent.city_pk is null and child.city_fk is not null\n    )\n\n    -- Return all records from the child model that have unmatched foreign keys\n    select *\n    from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_rel_s_dim_city_city_fk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.001327Z", "completed_at": "2025-04-21T16:52:05.032576Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.032576Z", "completed_at": "2025-04-21T16:52:05.032576Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.031249523162841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_business_tests", "compiled": true, "compiled_code": "WITH s_fct_weather_forecast_invalid_cloud_coverage_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'cloud_coverage_cd' AS tested_field_nm\n        ,'Records where \"cloud_coverage_cd\" does not appropriately match \"cloud_coverage_pct\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n\n),\n\ns_fct_weather_forecast_invalid_cloud_coverage_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_cloud_coverage_cd\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_invalid_cloud_coverage_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_invalid_cloud_coverage_cd_base AS base\n    LEFT JOIN s_fct_weather_forecast_invalid_cloud_coverage_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n\n),\n\ns_dim_city_accepted_values_country_cd_base AS (\n    SELECT\n        NULL AS m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,NULL AS forecast_dt\n        ,'s_dim_city' AS table_nm\n        ,'accepted_values' AS test_type_cd\n        ,'country_cd' AS tested_field_nm\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n\n),\n\ns_dim_city_accepted_values_country_cd_cnt AS (\n    SELECT\n        NULL AS m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,NULL AS forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_dim_city_accepted_values_country_cd\"\n    GROUP BY\n        --m_valid_dt\n        country_cd\n        ,county_nm\n        --,forecast_dt\n),\n\ns_dim_city_accepted_values_country_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_dim_city_accepted_values_country_cd_base AS base\n    LEFT JOIN s_dim_city_accepted_values_country_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\n\ns_fct_astro_accepted_range_m_valid_dt_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro' AS table_nm\n        ,'accepted_range' AS test_type_cd\n        ,'m_valid_dt' AS tested_field_nm\n        ,'Records where the \"m_valid_dt\" is out of range' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n\n),\n\ns_fct_astro_accepted_range_m_valid_dt_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_range_m_valid_dt\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_accepted_range_m_valid_dt_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_accepted_range_m_valid_dt_base AS base\n    LEFT JOIN s_fct_astro_accepted_range_m_valid_dt_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_astro_accepted_values_country_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro' AS table_nm\n        ,'accepted_values' AS test_type_cd\n        ,'country_cd' AS tested_field_nm\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n\n),\n\ns_fct_astro_accepted_values_country_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_accepted_range_m_valid_dt\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_accepted_values_country_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_accepted_values_country_cd_base AS base\n    LEFT JOIN s_fct_astro_accepted_values_country_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_astro_forecast_accepted_range_m_valid_dt_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro_forecast' AS table_nm\n        ,'accepted_range' AS test_type_cd\n        ,'m_valid_dt' AS tested_field_nm\n        ,'Records where the \"m_valid_dt\" is out of range' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n),\n\ns_fct_astro_forecast_accepted_range_m_valid_dt_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_range_m_valid_dt\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_forecast_accepted_range_m_valid_dt_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_forecast_accepted_range_m_valid_dt_base AS base\n    LEFT JOIN s_fct_astro_forecast_accepted_range_m_valid_dt_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_astro_forecast_accepted_values_country_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro_forecast' AS table_nm\n        ,'accepted_values' AS test_type_cd\n        ,'country_cd' AS tested_field_nm\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n),\n\ns_fct_astro_forecast_accepted_values_country_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_accepted_values_country_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_forecast_accepted_values_country_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_forecast_accepted_values_country_cd_base AS base\n    LEFT JOIN s_fct_astro_forecast_accepted_values_country_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_accepted_range_m_valid_dt_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'accepted_range' AS test_type_cd\n        ,'m_valid_dt' AS tested_field_nm\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_accepted_range_m_valid_dt_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_m_valid_dt\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n\n),\n\ns_fct_weather_accepted_range_m_valid_dt_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_accepted_range_m_valid_dt_base AS base\n    LEFT JOIN s_fct_weather_accepted_range_m_valid_dt_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_accepted_range_temp_c_no_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'accepted_range' AS test_type_cd\n        ,'temp_c_no' AS tested_field_nm\n        ,'Records where the \"temp_c_no\" is out of range' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_accepted_range_temp_c_no_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_range_temp_c_no\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_accepted_range_temp_c_no_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_accepted_range_temp_c_no_base AS base\n    LEFT JOIN s_fct_weather_accepted_range_temp_c_no_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_accepted_values_country_cd_base AS (\n        SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'accepted_values' AS test_type_cd\n        ,'country_cd' AS tested_field_nm\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_accepted_values_country_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_accepted_values_country_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_accepted_values_country_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_accepted_values_country_cd_base AS base\n    LEFT JOIN s_fct_weather_accepted_values_country_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_accepted_range_m_valid_dt_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'accepted_range' AS test_type_cd\n        ,'m_valid_dt' AS tested_field_nm\n        ,'Records where the \"m_valid_dt\" is out of range' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_accepted_range_m_valid_dt_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_m_valid_dt\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_accepted_range_m_valid_dt_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_accepted_range_m_valid_dt_base AS base\n    LEFT JOIN s_fct_weather_forecast_accepted_range_m_valid_dt_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_accepted_range_temp_c_no_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'accepted_range' AS test_type_cd\n        ,'temp_c_no' AS tested_field_nm\n        ,'Records where the \"temp_c_no\" is out of range' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_accepted_range_temp_c_no_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_temp_c_no\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_accepted_range_temp_c_no_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_accepted_range_temp_c_no_base AS base\n    LEFT JOIN s_fct_weather_forecast_accepted_range_temp_c_no_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_accepted_values_country_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'accepted_values' AS test_type_cd\n        ,'country_cd' AS tested_field_nm\n        ,'Records where the country_cd is not \"HU\" or \"RO\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_accepted_values_country_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_values_country_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_accepted_values_country_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_accepted_values_country_cd_base AS base\n    LEFT JOIN s_fct_weather_forecast_accepted_values_country_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_invalid_humidity_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'humidity_cd' AS tested_field_nm\n        ,'Records where \"humnidity_cd\" does not appropriately match \"humidity_pct\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_invalid_humidity_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_humidity_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_invalid_humidity_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_invalid_humidity_cd_base AS base\n    LEFT JOIN s_fct_weather_forecast_invalid_humidity_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_invalid_rain_chance_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'rain_chance_cd' AS tested_field_nm\n        ,'Records where \"rain_chance_cd\" does not appropriately match \"rain_chance_pct\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_invalid_rain_chance_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_rain_chance_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_invalid_rain_chance_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_invalid_rain_chance_cd_base AS base\n    LEFT JOIN s_fct_weather_forecast_invalid_rain_chance_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_invalid_snow_chance_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'snow_chance_cd' AS tested_field_nm\n        ,'Records where \"snow_chance_cd\" does not appropriately match \"snow_chance_pct\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_invalid_snow_chance_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_snow_chance_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_invalid_snow_chance_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_invalid_snow_chance_cd_base AS base\n    LEFT JOIN s_fct_weather_forecast_invalid_snow_chance_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_invalid_temp_feelslike_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'snow_chance_cd' AS tested_field_nm\n        ,'Records where \"feels_like_cd\" does not appropriately match \"feels_like_no\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_invalid_temp_feelslike_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_temp_feelslike_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_invalid_temp_feelslike_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_invalid_temp_feelslike_cd_base AS base\n    LEFT JOIN s_fct_weather_forecast_invalid_temp_feelslike_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_invalid_cloud_coverage_cd_base AS (\n        SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'cloud_coverage_cd' AS tested_field_nm\n        ,'Records where \"cloud_coverage_cd\" does not appropriately match \"cloud_coverage_pct\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_invalid_cloud_coverage_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_cloud_coverage_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_invalid_cloud_coverage_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_invalid_cloud_coverage_cd_base AS base\n    LEFT JOIN s_fct_weather_invalid_cloud_coverage_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_invalid_humidity_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'humidity_cd' AS tested_field_nm\n        ,'Records where \"humidity_cd\" does not appropriately match \"humidity_pct\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_invalid_humidity_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_humidity_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_invalid_humidity_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_invalid_humidity_cd_base AS base\n    LEFT JOIN s_fct_weather_invalid_humidity_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_invalid_rain_chance_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'rain_chance_cd' AS tested_field_nm\n        ,'Records where \"rain_chance_cd\" does not appropriately match \"rain_chance_pct\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_invalid_rain_chance_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_rain_chance_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_invalid_rain_chance_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_invalid_rain_chance_cd_base AS base\n    LEFT JOIN s_fct_weather_invalid_rain_chance_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_invalid_snow_chance_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'snow_chance_cd' AS tested_field_nm\n        ,'Records where \"snow_chance_cd\" does not appropriately match \"snow_chance_pct\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_invalid_snow_chance_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_snow_chance_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_invalid_snow_chance_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_invalid_snow_chance_cd_base AS base\n    LEFT JOIN s_fct_weather_invalid_snow_chance_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_invalid_temp_feelslike_cd_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'invalid' AS test_type_cd\n        ,'temp_feelslike_cd' AS tested_field_nm\n        ,'Records where \"temp_feelslike_cd\" does not appropriately match \"temp_feelslike_no\"' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_invalid_temp_feelslike_cd_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_invalid_temp_feelslike_cd\"\n    GROUP BY\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_invalid_temp_feelslike_cd_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_invalid_temp_feelslike_cd_base AS base\n    LEFT JOIN s_fct_weather_invalid_temp_feelslike_cd_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\nunion_tests AS (\n    SELECT * FROM s_fct_weather_forecast_invalid_cloud_coverage_cd_joined\n    UNION ALL\n    SELECT * FROM s_dim_city_accepted_values_country_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_accepted_range_m_valid_dt_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_accepted_values_country_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_accepted_range_m_valid_dt_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_accepted_values_country_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_accepted_range_m_valid_dt_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_accepted_range_temp_c_no_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_accepted_values_country_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_accepted_range_m_valid_dt_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_accepted_range_temp_c_no_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_accepted_values_country_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_cloud_coverage_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_humidity_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_rain_chance_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_snow_chance_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_invalid_temp_feelslike_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_cloud_coverage_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_humidity_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_rain_chance_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_snow_chance_cd_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_invalid_temp_feelslike_cd_joined\n),\n\nfailed_record_cnt_fixed AS (\n    SELECT \n        m_valid_dt\n        ,country_cd\n        ,table_nm\n        ,test_type_cd\n        ,tested_field_nm\n        ,description\n        ,failed_record_cnt\n        ,CASE WHEN failed_record_cnt is NULL THEN 0 ELSE failed_record_cnt END AS failed_record_cnt_fixed\n    FROM union_tests\n),\n\nreorder AS (\n    SELECT \n        m_valid_dt\n        ,country_cd\n        ,table_nm\n        ,test_type_cd\n        ,tested_field_nm\n        ,description\n        ,failed_record_cnt_fixed as failed_record_cnt\n    FROM failed_record_cnt_fixed\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_business_tests\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.016952Z", "completed_at": "2025-04-21T16:52:05.032576Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.032576Z", "completed_at": "2025-04-21T16:52:05.032576Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.031249523162841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_standard_tests", "compiled": true, "compiled_code": "WITH s_dim_city_not_null_city_pk_base AS (\n    SELECT\n        NULL AS m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,NULL AS forecast_dt\n        ,'s_dim_city' AS table_nm\n        ,'not_null' AS test_type_cd\n        ,'city_pk' AS tested_field_nm\n        ,'Records where the \"city_pk\" is null' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n),\n\ns_dim_city_not_null_city_pk_cnt AS (\n    SELECT\n        NULL AS m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,NULL AS forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_dim_city_not_null_city_pk\"\n    GROUP BY \n        country_cd\n        ,county_nm\n),\n\ns_dim_city_not_null_city_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_dim_city_not_null_city_pk_base AS base\n    LEFT JOIN s_dim_city_not_null_city_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_astro_forecast_not_null_astro_forecast_pk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro' AS table_nm\n        ,'not_null' AS test_type_cd\n        ,'forecast_pk' AS tested_field_nm\n        ,'Records where the \"forecast_pk\" is null' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n),\n\ns_fct_astro_forecast_not_null_astro_forecast_pk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_not_null_astro_forecast_pk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_forecast_not_null_astro_forecast_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_forecast_not_null_astro_forecast_pk_base AS base\n    LEFT JOIN s_fct_astro_forecast_not_null_astro_forecast_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_astro_not_null_astro_pk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro' AS table_nm\n        ,'not_null' AS test_type_cd\n        ,'astro_pk' AS tested_field_nm\n        ,'Records where the \"astro_pk\" is null' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n),\n\ns_fct_astro_not_null_astro_pk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_not_null_astro_pk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_not_null_astro_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_not_null_astro_pk_base AS base\n    LEFT JOIN s_fct_astro_not_null_astro_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_not_null_weather_pk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'not_null' AS test_type_cd\n        ,'weather_pk' AS tested_field_nm\n        ,'Records where the \"weather_pk\" is null' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_not_null_weather_pk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_not_null_weather_pk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_not_null_weather_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_not_null_weather_pk_base AS base\n    LEFT JOIN s_fct_weather_forecast_not_null_weather_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_not_null_weather_pk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'not_null' AS test_type_cd\n        ,'weather_pk' AS tested_field_nm\n        ,'Records where the \"weather_pk\" is null' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_not_null_weather_pk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_not_null_weather_pk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_not_null_weather_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_not_null_weather_pk_base AS base\n    LEFT JOIN s_fct_weather_not_null_weather_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_dim_city_unique_city_pk_base AS (\n    SELECT\n        NULL AS m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,NULL AS forecast_dt\n        ,'s_dim_city' AS table_nm\n        ,'unique' AS test_type_cd\n        ,'city_pk' AS tested_field_nm\n        ,'Records where the \"city_pk\" is duplicated' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_dim_city\"\n),\n\ns_dim_city_unique_city_pk_cnt AS (\n    SELECT\n        NULL AS m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,NULL AS forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_dim_city_unique_city_pk\"\n    GROUP BY \n        country_cd\n        ,county_nm\n),\n\ns_dim_city_unique_city_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_dim_city_unique_city_pk_base AS base\n    LEFT JOIN s_dim_city_unique_city_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\n\ns_fct_astro_forecast_unique_astro_forecast_pk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro_forecast' AS table_nm\n        ,'unique' AS test_type_cd\n        ,'astro_forecast_pk' AS tested_field_nm\n        ,'Records where the \"astro_forecast_pk\" is duplicated' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n),\n\ns_fct_astro_forecast_unique_astro_forecast_pk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_unique_astro_forecast_pk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_forecast_unique_astro_forecast_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_forecast_unique_astro_forecast_pk_base AS base\n    LEFT JOIN s_fct_astro_forecast_unique_astro_forecast_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_astro_unique_astro_pk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro' AS table_nm\n        ,'unique' AS test_type_cd\n        ,'astro_pk' AS tested_field_nm\n        ,'Records where the \"astro_pk\" is duplicated' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n),\n\ns_fct_astro_unique_astro_pk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_unique_astro_pk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_unique_astro_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_unique_astro_pk_base AS base\n    LEFT JOIN s_fct_astro_unique_astro_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_unique_weather_pk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'unique' AS test_type_cd\n        ,'weather_pk' AS tested_field_nm\n        ,'Records where the \"weather_pk\" is duplicated' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_unique_weather_pk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_unique_weather_pk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_unique_weather_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_unique_weather_pk_base AS base\n    LEFT JOIN s_fct_weather_forecast_unique_weather_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_unique_weather_pk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'unique' AS test_type_cd\n        ,'weather_pk' AS tested_field_nm\n        ,'Records where the \"weather_pk\" is duplicated' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_unique_weather_pk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_unique_weather_pk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_unique_weather_pk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_unique_weather_pk_base AS base\n    LEFT JOIN s_fct_weather_unique_weather_pk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n), \n\ns_fct_astro_forecast_rel_s_dim_city_city_fk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro_forecast' AS table_nm\n        ,'relationships' AS test_type_cd\n        ,'city_fk' AS tested_field_nm\n        ,'Records where the \"city_fk\" does not have a matching entry in the \"s_dim_city\" dimension table' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n),\n\ns_fct_astro_forecast_rel_s_dim_city_city_fk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_forecast_rel_s_dim_city_city_fk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_forecast_rel_s_dim_city_city_fk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_forecast_rel_s_dim_city_city_fk_base AS base\n    LEFT JOIN s_fct_astro_forecast_rel_s_dim_city_city_fk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\n\ns_fct_astro_rel_s_dim_city_city_fk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_astro' AS table_nm\n        ,'relationships' AS test_type_cd\n        ,'city_fk' AS tested_field_nm\n        ,'Records where the \"city_fk\" does not have a matching entry in the \"s_dim_city\" dimension table' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n),\n\ns_fct_astro_rel_s_dim_city_city_fk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_astro_rel_s_dim_city_city_fk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_astro_rel_s_dim_city_city_fk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_astro_rel_s_dim_city_city_fk_base AS base\n    LEFT JOIN s_fct_astro_rel_s_dim_city_city_fk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_forecast_rel_s_dim_city_city_fk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather_forecast' AS table_nm\n        ,'relationships' AS test_type_cd\n        ,'city_fk' AS tested_field_nm\n        ,'Records where the \"city_fk\" does not have a matching entry in the \"s_dim_city\" dimension table' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\ns_fct_weather_forecast_rel_s_dim_city_city_fk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_rel_s_dim_city_city_fk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_forecast_rel_s_dim_city_city_fk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_forecast_rel_s_dim_city_city_fk_base AS base\n    LEFT JOIN s_fct_weather_forecast_rel_s_dim_city_city_fk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\ns_fct_weather_rel_s_dim_city_city_fk_base AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,'s_fct_weather' AS table_nm\n        ,'relationships' AS test_type_cd\n        ,'city_fk' AS tested_field_nm\n        ,'Records where the \"city_fk\" does not have a matching entry in the \"s_dim_city\" dimension table' AS description\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_rel_s_dim_city_city_fk_cnt AS (\n    SELECT\n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        ,COUNT(*) AS failed_record_cnt\n    FROM \"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_rel_s_dim_city_city_fk\"\n    GROUP BY \n        m_valid_dt\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n),\n\ns_fct_weather_rel_s_dim_city_city_fk_joined AS (\n    SELECT\n        base.m_valid_dt\n        ,base.country_cd\n        ,base.county_nm\n        ,base.forecast_dt\n        ,base.table_nm\n        ,base.test_type_cd\n        ,base.tested_field_nm\n        ,base.description\n        ,cnt_records.failed_record_cnt\n    FROM s_fct_weather_rel_s_dim_city_city_fk_base AS base\n    LEFT JOIN s_fct_weather_rel_s_dim_city_city_fk_cnt AS cnt_records\n    ON base.m_valid_dt = cnt_records.m_valid_dt\n    AND base.country_cd = cnt_records.country_cd\n    AND base.county_nm = cnt_records.county_nm\n    AND base.forecast_dt = cnt_records.forecast_dt\n),\n\nunion_tests AS (\n    SELECT * FROM s_dim_city_not_null_city_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_not_null_astro_forecast_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_not_null_astro_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_not_null_weather_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_not_null_weather_pk_joined\n    UNION ALL\n    SELECT * FROM s_dim_city_unique_city_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_unique_astro_forecast_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_unique_astro_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_unique_weather_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_unique_weather_pk_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_forecast_rel_s_dim_city_city_fk_joined\n    UNION ALL\n    SELECT * FROM s_fct_astro_rel_s_dim_city_city_fk_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_forecast_rel_s_dim_city_city_fk_joined\n    UNION ALL\n    SELECT * FROM s_fct_weather_rel_s_dim_city_city_fk_joined\n),\n\nfailed_record_cnt_fixed AS (\n    SELECT \n        m_valid_dt\n        ,country_cd\n        ,table_nm\n        ,test_type_cd\n        ,tested_field_nm\n        ,description\n        ,failed_record_cnt\n        ,CASE WHEN failed_record_cnt is NULL THEN 0 ELSE failed_record_cnt END AS failed_record_cnt_fixed\n    FROM union_tests\n),\n\nreorder AS (\n    SELECT \n        m_valid_dt\n        ,country_cd\n        ,table_nm\n        ,test_type_cd\n        ,tested_field_nm\n        ,description\n        ,failed_record_cnt_fixed as failed_record_cnt\n    FROM failed_record_cnt_fixed\n)\n\nSELECT * FROM reorder", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_standard_tests\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.032576Z", "completed_at": "2025-04-21T16:52:05.032576Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.048202Z", "completed_at": "2025-04-21T16:52:05.048202Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_dim_country_cd", "compiled": true, "compiled_code": "WITH s_fct_astro AS (\n    SELECT DISTINCT\n        country_cd\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n),\n\ns_fct_astro_forecast AS (\n    SELECT DISTINCT\n        country_cd\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n),\n\ns_fct_weather AS (\n    SELECT DISTINCT\n        country_cd\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_forecast AS (\n    SELECT DISTINCT\n        country_cd\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\nunion_select AS (\n    SELECT * FROM s_fct_astro\n    UNION\n    SELECT * FROM s_fct_astro_forecast\n    UNION\n    SELECT * FROM s_fct_weather\n    UNION\n    SELECT * FROM s_fct_weather_forecast\n)\n\nSELECT * FROM union_select", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_country_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.032576Z", "completed_at": "2025-04-21T16:52:05.048202Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.048202Z", "completed_at": "2025-04-21T16:52:05.048202Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.015625953674316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_dim_county_nm", "compiled": true, "compiled_code": "WITH s_fct_astro AS (\n    SELECT DISTINCT\n        county_nm\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro\"\n),\n\ns_fct_astro_forecast AS (\n    SELECT DISTINCT\n        county_nm\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_astro_forecast\"\n),\n\ns_fct_weather AS (\n    SELECT DISTINCT\n        county_nm\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather\"\n),\n\ns_fct_weather_forecast AS (\n    SELECT DISTINCT\n        county_nm\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\nunion_select AS (\n    SELECT * FROM s_fct_astro\n    UNION\n    SELECT * FROM s_fct_astro_forecast\n    UNION\n    SELECT * FROM s_fct_weather\n    UNION\n    SELECT * FROM s_fct_weather_forecast\n)\n\nSELECT * FROM union_select", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_dim_county_nm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.032576Z", "completed_at": "2025-04-21T16:52:05.048202Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.048202Z", "completed_at": "2025-04-21T16:52:05.048202Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.015625953674316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_fct_weather_forecast", "compiled": true, "compiled_code": "WITH s_fct_weather_forecast AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n)\n\nSELECT * FROM s_fct_weather_forecast", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_weather_forecast\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.048202Z", "completed_at": "2025-04-21T16:52:05.058728Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.058728Z", "completed_at": "2025-04-21T16:52:05.058728Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.02615213394165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.g_fct_weather_forecast_avg", "compiled": true, "compiled_code": "WITH s_fct_weather_forecast AS (\n    SELECT\n        m_valid_dt\n        ,weather_pk\n        ,city_nm\n        ,city_fk\n        ,country_cd\n        ,county_nm\n        ,forecast_dt\n        -- Group to the start of the month\n--       ,CAST(YEAR(forecast_dt) AS VARCHAR) + '-' + RIGHT('0' + CAST(MONTH(forecast_dt) AS VARCHAR), 2) + '-01' AS month_dt\n        ,temp_c_no\n        ,temp_feelslike_no\n        ,cloud_coverage_pct\n        ,precip_mm_no\n        ,humidity_pct\n        ,gust_kph_no\n        ,heatindex_c_no\n        ,wind_kph_no\n        ,windchill_c_no\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\n-- Step 1: Pre-aggregate by city, country, and m_valid_dt\ndaily_aggregates AS (\n    SELECT\n        m_valid_dt\n        ,forecast_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,AVG(temp_c_no) AS temp_c_avg\n        ,AVG(cloud_coverage_pct) AS cloud_coverage_avg\n        ,AVG(precip_mm_no) AS precipitation_mm_avg\n        ,AVG(humidity_pct) AS humidity_avg\n        ,AVG(gust_kph_no) AS gust_kph_avg\n        ,AVG(heatindex_c_no) AS heatindex_c_no_avg\n        ,AVG(wind_kph_no) AS wind_kph_no_avg\n        ,AVG(windchill_c_no) AS windchill_c_no_avg\n    FROM s_fct_weather_forecast\n    GROUP BY m_valid_dt, city_nm, city_fk, county_nm, country_cd, forecast_dt\n),\n\n-- Step 2: Calculate rolling averages\nrolling_averages AS (\n    SELECT\n        city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,m_valid_dt\n        -- Rolling averages (3 days)\n        ,AVG(temp_c_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS temperature_c_avg_3d\n\n        ,AVG(cloud_coverage_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS cloud_coverage_avg_3d\n\n        ,AVG(precipitation_mm_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS precipitation_mm_avg_3d\n\n        ,AVG(humidity_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS humidity_avg_3d\n\n        ,AVG(gust_kph_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS gust_kph_avg_3d\n\n        ,AVG(heatindex_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS heatindex_c_no_avg_3d\n\n        ,AVG(wind_kph_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS wind_kph_no_avg_3d\n\n        ,AVG(windchill_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n        ) AS windchill_c_no_avg_3d\n-- Rolling averages (1 week = 7 days)\n        ,AVG(temp_c_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS temperature_c_avg_1w\n\n        ,AVG(cloud_coverage_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS cloud_coverage_avg_1w\n\n        ,AVG(precipitation_mm_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS precipitation_mm_avg_1w\n\n        ,AVG(humidity_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS humidity_avg_1w\n\n        ,AVG(gust_kph_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS gust_kph_avg_1w\n\n        ,AVG(heatindex_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS heatindex_c_no_avg_1w\n\n        ,AVG(wind_kph_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS wind_kph_no_avg_1w\n\n        ,AVG(windchill_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) AS windchill_c_no_avg_1w\n-- Rolling averages (2 weeks = 14 days)\n        ,AVG(temp_c_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS temperature_c_avg_2w\n\n        ,AVG(cloud_coverage_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS cloud_coverage_avg_2w\n\n        ,AVG(precipitation_mm_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS precipitation_mm_avg_2w\n\n        ,AVG(humidity_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS humidity_avg_2w\n\n        ,AVG(gust_kph_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS gust_kph_avg_2w\n\n        ,AVG(heatindex_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS heatindex_c_no_avg_2w\n\n        ,AVG(wind_kph_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS wind_kph_no_avg_2w\n\n        ,AVG(windchill_c_no_avg) OVER (\n            PARTITION BY city_nm, city_fk, county_nm, country_cd\n            ORDER BY m_valid_dt ROWS BETWEEN 13 PRECEDING AND CURRENT ROW\n        ) AS windchill_c_no_avg_2w\n    FROM daily_aggregates\n),\n\nunit_conversion AS (\n    SELECT\n        m_valid_dt\n        ,city_nm\n        ,city_fk\n        ,county_nm\n        ,country_cd\n        ,\n    \n    \n\n    temperature_c_avg_3d\n    , temperature_c_avg_3d * 9/5 + 32 AS temperature_f_avg_3d\n    , temperature_c_avg_3d + 273.15 AS temperature_k_avg_3d\n\n        ,\n    \n    \n\n    temperature_c_avg_1w\n    , temperature_c_avg_1w * 9/5 + 32 AS temperature_f_avg_1w\n    , temperature_c_avg_1w + 273.15 AS temperature_k_avg_1w\n\n        ,\n    \n    \n\n    temperature_c_avg_2w\n    , temperature_c_avg_2w * 9/5 + 32 AS temperature_f_avg_2w\n    , temperature_c_avg_2w + 273.15 AS temperature_k_avg_2w\n\n        ,cloud_coverage_avg_3d\n        ,cloud_coverage_avg_1w\n        ,cloud_coverage_avg_2w\n        ,precipitation_mm_avg_3d\n        ,precipitation_mm_avg_1w\n        ,precipitation_mm_avg_2w\n        ,humidity_avg_3d\n        ,humidity_avg_1w\n        ,humidity_avg_2w\n        ,\n    \n    \n\n    gust_kph_avg_3d\n    , gust_kph_avg_3d * 0.621371 AS gust_miph_avg_3d\n\n        ,\n    \n    \n\n    gust_kph_avg_1w\n    , gust_kph_avg_1w * 0.621371 AS gust_miph_avg_1w\n\n        ,\n    \n    \n\n    gust_kph_avg_2w\n    , gust_kph_avg_2w * 0.621371 AS gust_miph_avg_2w\n\n        ,\n    \n    \n\n    heatindex_c_no_avg_3d\n    , heatindex_c_no_avg_3d * 9/5 + 32 AS heatindex_f_no_avg_3d\n    , heatindex_c_no_avg_3d + 273.15 AS heatindex_k_no_avg_3d\n\n        ,\n    \n    \n\n    heatindex_c_no_avg_1w\n    , heatindex_c_no_avg_1w * 9/5 + 32 AS heatindex_f_no_avg_1w\n    , heatindex_c_no_avg_1w + 273.15 AS heatindex_k_no_avg_1w\n\n        ,\n    \n    \n\n    heatindex_c_no_avg_2w\n    , heatindex_c_no_avg_2w * 9/5 + 32 AS heatindex_f_no_avg_2w\n    , heatindex_c_no_avg_2w + 273.15 AS heatindex_k_no_avg_2w\n\n        ,\n    \n    \n\n    wind_kph_no_avg_3d\n    , wind_kph_no_avg_3d * 0.621371 AS wind_miph_no_avg_3d\n\n        ,\n    \n    \n\n    wind_kph_no_avg_1w\n    , wind_kph_no_avg_1w * 0.621371 AS wind_miph_no_avg_1w\n\n        ,\n    \n    \n\n    wind_kph_no_avg_2w\n    , wind_kph_no_avg_2w * 0.621371 AS wind_miph_no_avg_2w\n\n        ,\n    \n    \n\n    windchill_c_no_avg_3d\n    , windchill_c_no_avg_3d * 9/5 + 32 AS windchill_f_no_avg_3d\n    , windchill_c_no_avg_3d + 273.15 AS windchill_k_no_avg_3d\n\n        ,\n    \n    \n\n    windchill_c_no_avg_1w\n    , windchill_c_no_avg_1w * 9/5 + 32 AS windchill_f_no_avg_1w\n    , windchill_c_no_avg_1w + 273.15 AS windchill_k_no_avg_1w\n\n        ,\n    \n    \n\n    windchill_c_no_avg_2w\n    , windchill_c_no_avg_2w * 9/5 + 32 AS windchill_f_no_avg_2w\n    , windchill_c_no_avg_2w + 273.15 AS windchill_k_no_avg_2w\n\n    FROM rolling_averages\n)\n\nSELECT * FROM unit_conversion", "relation_name": "\"wh_weather\".\"dbt_gold\".\"g_fct_weather_forecast_avg\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.064343Z", "completed_at": "2025-04-21T16:52:05.067125Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.080134Z", "completed_at": "2025-04-21T16:52:05.080134Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.03193187713623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_accepted_range_temp_c_no.e74a655f7c", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not temp_c_no >= -20\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not temp_c_no <= 50\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_temp_c_no\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.058728Z", "completed_at": "2025-04-21T16:52:05.080134Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.080134Z", "completed_at": "2025-04-21T16:52:05.080134Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03193187713623047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_accepted_range_m_valid_dt.6eae96b50b", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not m_valid_dt >= CAST(DATEFROMPARTS(YEAR(GETDATE()), 1, 1) AS DATE)\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not m_valid_dt <= CAST(DATEFROMPARTS(YEAR(GETDATE()), 12, 31) AS DATE)\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_range_m_valid_dt\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.067125Z", "completed_at": "2025-04-21T16:52:05.080134Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.080134Z", "completed_at": "2025-04-21T16:52:05.080134Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.013008594512939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_cloud_coverage_cd", "compiled": true, "compiled_code": "WITH invalid_cloud_coverage_cd AS (\n    SELECT \n    *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n    WHERE \n        ( cloud_coverage_pct BETWEEN 0 AND 20 AND cloud_coverage_cd NOT IN ('Clear'))\n        OR \n        ( cloud_coverage_pct BETWEEN 21 AND 40 AND cloud_coverage_cd NOT IN ('Partly Cloudy'))\n        OR \n        ( cloud_coverage_pct BETWEEN 41 AND 60 AND cloud_coverage_cd NOT IN ('Cloudy'))\n        OR \n        ( cloud_coverage_pct BETWEEN 61 AND 80 AND cloud_coverage_cd NOT IN ('Overcast'))\n        OR \n        ( cloud_coverage_pct BETWEEN 81 AND 100 AND cloud_coverage_cd NOT IN ('Completely Overcast'))\n)\n\nSELECT *\nFROM invalid_cloud_coverage_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_cloud_coverage_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.067125Z", "completed_at": "2025-04-21T16:52:05.080134Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.080134Z", "completed_at": "2025-04-21T16:52:05.080134Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.021405696868896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_accepted_values_country_cd.df0ff2d172", "compiled": true, "compiled_code": "\n\nwith validation as (\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n    where country_cd not in \n        (\n\n        \n            'HU'\n        \n   )\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_accepted_values_country_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.080134Z", "completed_at": "2025-04-21T16:52:05.095813Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.095813Z", "completed_at": "2025-04-21T16:52:05.095813Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.01567864418029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_humidity_cd", "compiled": true, "compiled_code": "WITH invalid_humidity_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n    WHERE \n        ( humidity_pct BETWEEN 0 AND 20 AND humidity_cd NOT IN ('Very Low'))\n        OR \n        ( humidity_pct BETWEEN 21 AND 40 AND humidity_cd NOT IN ('Low'))\n        OR \n        ( humidity_pct BETWEEN 41 AND 60 AND humidity_cd NOT IN ('Moderate'))\n        OR \n        ( humidity_pct BETWEEN 61 AND 80 AND humidity_cd NOT IN ('High'))\n        OR \n        ( humidity_pct BETWEEN 81 AND 100 AND humidity_cd NOT IN ('Very High'))\n)\n\nSELECT *\nFROM invalid_humidity_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_humidity_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.080134Z", "completed_at": "2025-04-21T16:52:05.095813Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.095813Z", "completed_at": "2025-04-21T16:52:05.095813Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.01567864418029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_rain_chance_cd", "compiled": true, "compiled_code": "WITH invalid_rain_chance_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n    WHERE \n        ( rain_chance_pct BETWEEN 0 AND 20 AND rain_chance_cd NOT IN ('Very Low'))\n        OR \n        ( rain_chance_pct BETWEEN 21 AND 40 AND rain_chance_cd NOT IN ('Low'))\n        OR \n        ( rain_chance_pct BETWEEN 41 AND 60 AND rain_chance_cd NOT IN ('Moderate'))\n        OR \n        ( rain_chance_pct BETWEEN 61 AND 80 AND rain_chance_cd NOT IN ('High'))\n        OR \n        ( rain_chance_pct BETWEEN 81 AND 100 AND rain_chance_cd NOT IN ('Very High'))\n)\n\nSELECT *\nFROM invalid_rain_chance_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_rain_chance_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.095813Z", "completed_at": "2025-04-21T16:52:05.095813Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.095813Z", "completed_at": "2025-04-21T16:52:05.095813Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.01567864418029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_snow_chance_cd", "compiled": true, "compiled_code": "WITH invalid_snow_chance_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n    WHERE \n        ( snow_chance_pct BETWEEN 0 AND 20 AND snow_chance_cd NOT IN ('Very Low'))\n        OR \n        ( snow_chance_pct BETWEEN 21 AND 40 AND snow_chance_cd NOT IN ('Low'))\n        OR \n        ( snow_chance_pct BETWEEN 41 AND 60 AND snow_chance_cd NOT IN ('Moderate'))\n        OR \n        ( snow_chance_pct BETWEEN 61 AND 80 AND snow_chance_cd NOT IN ('High'))\n        OR \n        ( snow_chance_pct BETWEEN 81 AND 100 AND snow_chance_cd NOT IN ('Very High'))\n)\n\nSELECT *\nFROM invalid_snow_chance_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_snow_chance_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.095813Z", "completed_at": "2025-04-21T16:52:05.095813Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.095813Z", "completed_at": "2025-04-21T16:52:05.095813Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.01567864418029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_invalid_temp_feelslike_cd", "compiled": true, "compiled_code": "WITH invalid_temp_feelslike_cd AS (\n    SELECT *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n    WHERE \n        ( temp_feelslike_no <= 0 AND temp_feelslike_cd NOT IN ('Very Cold'))\n        OR \n        ( temp_feelslike_no BETWEEN 1 AND 10 AND temp_feelslike_cd NOT IN ('Cold'))\n        OR \n        ( temp_feelslike_no BETWEEN 11 AND 20 AND temp_feelslike_cd NOT IN ('Cool'))\n        OR \n        ( temp_feelslike_no BETWEEN 21 AND 30 AND temp_feelslike_cd NOT IN ('Warm'))\n        OR \n        ( temp_feelslike_no BETWEEN 31 AND 40 AND temp_feelslike_cd NOT IN ('Hot'))\n        OR \n        ( temp_feelslike_no > 41 AND temp_feelslike_cd NOT IN ('Very Hot'))\n)\n\nSELECT *\nFROM invalid_temp_feelslike_cd", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_invalid_temp_feelslike_cd\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.095813Z", "completed_at": "2025-04-21T16:52:05.127344Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.132341Z", "completed_at": "2025-04-21T16:52:05.132341Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.03652811050415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_not_null_weather_pk.795c9765d2", "compiled": true, "compiled_code": "\n\nwith validation as (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n    WHERE weather_pk IS NULL\n)\n\nselect * from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_not_null_weather_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.115688Z", "completed_at": "2025-04-21T16:52:05.133347Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.137343Z", "completed_at": "2025-04-21T16:52:05.137343Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.04153013229370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_rel_s_dim_city_city_fk.7e448c69a1", "compiled": true, "compiled_code": "\n    with validation as (\n\n        -- Find all records in the child model where the foreign key does not exist in the parent model\n        select child.*\n        from \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\" as child\n        left join \"wh_weather\".\"dbt_silver\".\"s_dim_city\" as parent\n        on child.city_fk = parent.city_pk\n        where parent.city_pk is null and child.city_fk is not null\n    )\n\n    -- Return all records from the child model that have unmatched foreign keys\n    select *\n    from validation\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_rel_s_dim_city_city_fk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.115688Z", "completed_at": "2025-04-21T16:52:05.135349Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.139342Z", "completed_at": "2025-04-21T16:52:05.139342Z"}], "thread_id": "Thread-11 (worker)", "execution_time": 0.043529510498046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.weather_dbt.s_fct_weather_forecast_unique_weather_pk.c44d1db974", "compiled": true, "compiled_code": "\n    with validation as (\n        -- Find all values of the column that appear more than once\n        select weather_pk\n        from \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n        group by weather_pk\n        having count(*) > 1\n    )\n\n    -- Return the full records for rows that have duplicate values\n    select *\n    from \"wh_weather\".\"dbt_silver\".\"s_fct_weather_forecast\"\n    where weather_pk in (select weather_pk from validation)\n\n", "relation_name": "\"wh_weather\".\"dbt_dq_test\".\"s_fct_weather_forecast_unique_weather_pk\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.128345Z", "completed_at": "2025-04-21T16:52:05.138343Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.143164Z", "completed_at": "2025-04-21T16:52:05.143164Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.028738021850585938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_business_tests_summary", "compiled": true, "compiled_code": "WITH dq_business_tests AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_dq\".\"dq_business_tests\"\n),\n\nunique_tests AS (\n    SELECT\n        m_valid_dt\n        ,table_nm\n        ,test_type_cd\n        ,tested_field_nm\n        ,SUM(failed_record_cnt) AS failed_records_cnt\n    FROM dq_business_tests\n    GROUP BY m_valid_dt, table_nm, test_type_cd, tested_field_nm\n),\n\nsummary AS (\n    SELECT\n        m_valid_dt\n        ,test_type_cd\n        ,COUNT(*) AS test_cnt \n        ,SUM(CASE WHEN failed_records_cnt > 0 THEN 1 ELSE 0 END) AS failed_test_cnt\n        ,SUM(CASE WHEN failed_records_cnt = 0 THEN 1 ELSE 0 END) AS passed_test_cnt\n        ,SUM(failed_records_cnt) AS failed_records_cnt \n    FROM unique_tests\n    GROUP BY m_valid_dt, test_type_cd\n)\nSELECT * \nFROM summary", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_business_tests_summary\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.145951Z", "completed_at": "2025-04-21T16:52:05.155977Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.156973Z", "completed_at": "2025-04-21T16:52:05.156973Z"}], "thread_id": "Thread-12 (worker)", "execution_time": 0.01617288589477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_dim_table_nm", "compiled": true, "compiled_code": "WITH dq_standard_tests AS (\n    SELECT DISTINCT \n        table_nm\n    FROM \"wh_weather\".\"dbt_dq\".\"dq_standard_tests\"\n),\n\ndq_business_tests AS (\n    SELECT DISTINCT \n        table_nm\n    FROM \"wh_weather\".\"dbt_dq\".\"dq_business_tests\"\n)\n\nSELECT * FROM dq_standard_tests\nUNION\nSELECT * FROM dq_business_tests", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_dim_table_nm\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-21T16:52:05.150919Z", "completed_at": "2025-04-21T16:52:05.155977Z"}, {"name": "execute", "started_at": "2025-04-21T16:52:05.158797Z", "completed_at": "2025-04-21T16:52:05.158797Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.013845682144165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.weather_dbt.dq_standard_tests_summary", "compiled": true, "compiled_code": "WITH dq_standard_tests AS (\n    SELECT\n        *\n    FROM \"wh_weather\".\"dbt_dq\".\"dq_standard_tests\"\n),\n\nunique_tests AS (\n    SELECT\n        m_valid_dt\n        ,table_nm\n        ,test_type_cd\n        ,tested_field_nm\n        ,SUM(failed_record_cnt) AS failed_records_cnt\n    FROM dq_standard_tests\n    GROUP BY m_valid_dt, table_nm, test_type_cd, tested_field_nm\n),\n\nsummary AS (\n    SELECT\n        m_valid_dt\n        ,test_type_cd\n        ,COUNT(*) AS test_cnt \n        ,SUM(CASE WHEN failed_records_cnt > 0 THEN 1 ELSE 0 END) AS failed_test_cnt\n        ,SUM(CASE WHEN failed_records_cnt = 0 THEN 1 ELSE 0 END) AS passed_test_cnt\n        ,SUM(failed_records_cnt) AS failed_records_cnt \n    FROM unique_tests\n    GROUP BY m_valid_dt, test_type_cd\n)\nSELECT * \nFROM summary", "relation_name": "\"wh_weather\".\"dbt_dq\".\"dq_standard_tests_summary\"", "batch_results": null}], "elapsed_time": 3.6207776069641113, "args": {"partial_parse_file_diff": true, "log_format_file": "debug", "which": "generate", "write_json": true, "project_dir": "C:\\Users\\D\u00e1vidDobos\\szakdoga\\weather_dbt", "show_resource_report": false, "exclude": [], "vars": {}, "printer_width": 80, "send_anonymous_usage_stats": true, "favor_state": false, "log_format": "default", "select": [], "invocation_command": "dbt docs generate", "require_batched_execution_for_custom_microbatch_strategy": false, "empty_catalog": false, "require_nested_cumulative_type_params": false, "log_path": "C:\\Users\\D\u00e1vidDobos\\szakdoga\\weather_dbt\\logs", "require_explicit_package_overrides_for_builtin_materializations": true, "log_level_file": "debug", "static": false, "warn_error_options": {"include": [], "exclude": []}, "indirect_selection": "eager", "defer": false, "require_yaml_configuration_for_mf_time_spines": false, "static_parser": true, "compile": true, "state_modified_compare_vars": false, "partial_parse": true, "version_check": true, "introspect": true, "macro_debugging": false, "use_colors_file": true, "quiet": false, "cache_selected_only": false, "log_file_max_bytes": 10485760, "print": true, "populate_cache": true, "skip_nodes_if_on_run_start_fails": false, "strict_mode": false, "state_modified_compare_more_unrendered_values": false, "use_colors": true, "profiles_dir": "C:\\Users\\D\u00e1vidDobos\\.dbt", "log_level": "info", "source_freshness_run_project_hooks": false, "require_resource_names_without_spaces": false}}